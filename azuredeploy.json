{
  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.10.61.36676",
      "templateHash": "639831193419886208"
    }
  },
  "parameters": {
    "resourceGroupLocation": {
      "type": "string",
      "defaultValue": "westeurope",
      "allowedValues": [
        "eastus",
        "eastus2",
        "southcentralus",
        "westus2",
        "australiaeast",
        "northeurope",
        "westeurope",
        "centralus",
        "northcentralus",
        "westus",
        "eastasia",
        "japaneast",
        "francecentral",
        "westcentralus",
        "japanwest"
      ],
      "metadata": {
        "description": "Resource Group deployment region"
      }
    },
    "environment": {
      "type": "string",
      "defaultValue": "dev",
      "maxLength": 3
    },
    "prefix": {
      "type": "string",
      "defaultValue": "[uniqueString(parameters('environment'), subscription().id, parameters('resourceGroupLocation'))]",
      "maxLength": 13
    },
    "deployHubSpoke": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Indicate if Hub-Spoke Network should be deployed."
      }
    },
    "deployJumpBoxVMs": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Indicate if a Linux and Windows Jumpbox should be deployed."
      }
    },
    "deployJumpboxWindowsAddOns": {
      "type": "bool",
      "defaultValue": true
    },
    "vmExtensionWindowsJumpboxUri": {
      "type": "string",
      "defaultValue": "https://raw.githubusercontent.com/mocelj/AzureBatch-Secured/main/artefacts/VM-Extensions-Windows/azure-batch-secured-jumpbox-setup.ps1"
    },
    "ignoreDnsZoneNwLinks": {
      "type": "bool",
      "defaultValue": false
    },
    "deployVPNGw": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Indicate if a VPN Gateway should be deployed. Note: deployment may take up to 45 min addtional time. Certificate has to be added after creation."
      }
    },
    "deploySecureBatch": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Indicate if Azure Batch Demo should be deployed."
      }
    },
    "utcShort": {
      "type": "string",
      "defaultValue": "[utcNow('d')]"
    },
    "resourceTags": {
      "type": "object",
      "defaultValue": {
        "WorkloadName": "Back Office Risk",
        "BusinessUnit": "Risk Managment",
        "Owner": "Darko Mocelj",
        "Environment": "[parameters('environment')]",
        "CostCenter": "Internal",
        "LastDeployed": "[parameters('utcShort')]"
      }
    },
    "adminUserName": {
      "type": "string",
      "defaultValue": "localadmin"
    },
    "adminPassword": {
      "type": "secureString"
    },
    "jumpboxLinuxVmSize": {
      "type": "string",
      "defaultValue": "Standard_B1s",
      "allowedValues": [
        "Standard_B1s",
        "Standard_B2ms"
      ]
    },
    "jumpboxWindowsVmSize": {
      "type": "string",
      "defaultValue": "Standard_D4_v5",
      "allowedValues": [
        "Standard_B2ms",
        "Standard_B4ms",
        "Standard_D4_v5"
      ]
    },
    "batchServiceObjectId": {
      "type": "string",
      "metadata": {
        "description": "Get the Batch Service Object Id: az ad sp show --id \"MicrosoftAzureBatch\" --query objectId -o tsv"
      }
    },
    "batchNodeSku": {
      "type": "string",
      "defaultValue": "Standard_D2s_V3",
      "allowedValues": [
        "Standard_D2s_V3",
        "Standard_D2s_V4",
        "Standard_D2s_V5",
        "Standard_F2s_v2",
        "Standard_F4s_v2",
        "Standard_F8s_v2"
      ]
    },
    "acrPublicNetworkAccess": {
      "type": "string",
      "defaultValue": "Disabled",
      "metadata": {
        "description": "Private access (Recommended) is only available for Premium SKU."
      },
      "allowedValues": [
        "Enabled",
        "Disabled"
      ]
    },
    "acrSku": {
      "type": "string",
      "defaultValue": "Premium",
      "allowedValues": [
        "Basic",
        "Classic",
        "Premium",
        "Standard"
      ]
    },
    "acrAdminUserEnabled": {
      "type": "bool",
      "defaultValue": true
    },
    "deployPrivateACR": {
      "type": "bool",
      "defaultValue": true
    },
    "primaryScriptBuildKvTestImage": {
      "type": "string",
      "defaultValue": "https://raw.githubusercontent.com/mocelj/AzureBatch-Secured/main/artefacts/checkAkv/buildRemoteContainer.sh"
    }
  },
  "variables": {
    "pipFirewallName": "[format('pip-{0}-{1}-fw-vnet-hub-01', parameters('environment'), parameters('prefix'))]",
    "pipBastionName": "[format('pip-{0}-{1}-bas-vnet-hub-01', parameters('environment'), parameters('prefix'))]",
    "vNetHubObject": {
      "vNetName": "[format('vnet-{0}-{1}-hub-01', parameters('environment'), parameters('prefix'))]",
      "vNetRG": "[format('rg-{0}-{1}-vnet-hub-01', parameters('environment'), parameters('prefix'))]",
      "NetworkType": "Hub",
      "vNetAddressSpace": "10.1.0.0/16",
      "positionGateway": 0,
      "positionFirewall": 1,
      "positionBastion": 2,
      "positionJumpBox": 3,
      "positionDNS": 4,
      "subnets": [
        {
          "vNetName": "[format('vnet-{0}-{1}-hub-01', parameters('environment'), parameters('prefix'))]",
          "subnetName": "GatewaySubnet",
          "SubnetAddressSpace": "10.1.1.0/24",
          "serviceEndpoints": [],
          "nsgToAttach": "None",
          "securityRules": [],
          "rtToAttach": "None",
          "routes": [],
          "privateEndpointNetworkPolicies": "Enabled",
          "PrivateLinkServiceNetworkPolicies": "Enabled"
        },
        {
          "vNetName": "[format('vnet-{0}-{1}-hub-01', parameters('environment'), parameters('prefix'))]",
          "subnetName": "AzureFirewallSubnet",
          "SubnetAddressSpace": "10.1.2.0/24",
          "serviceEndpoints": [],
          "nsgToAttach": "None",
          "securityRules": [],
          "rtToAttach": "None",
          "routes": [],
          "privateEndpointNetworkPolicies": "Enabled",
          "PrivateLinkServiceNetworkPolicies": "Enabled"
        },
        {
          "vNetName": "[format('vnet-{0}-{1}-hub-01', parameters('environment'), parameters('prefix'))]",
          "subnetName": "AzureBastionSubnet",
          "SubnetAddressSpace": "10.1.3.0/24",
          "serviceEndpoints": [],
          "nsgToAttach": "[format('vnet-{0}-{1}-hub-01-AzureBastionSubnet-nsg', parameters('environment'), parameters('prefix'))]",
          "securityRules": [
            {
              "name": "bastion-in-allow",
              "properties": {
                "protocol": "Tcp",
                "sourcePortRange": "*",
                "sourceAddressPrefix": "Internet",
                "destinationPortRange": "443",
                "destinationAddressPrefix": "*",
                "access": "Allow",
                "priority": 100,
                "direction": "Inbound"
              }
            },
            {
              "name": "bastion-control-in-allow",
              "properties": {
                "protocol": "Tcp",
                "sourcePortRange": "*",
                "sourceAddressPrefix": "GatewayManager",
                "destinationPortRange": "443",
                "destinationAddressPrefix": "*",
                "access": "Allow",
                "priority": 120,
                "direction": "Inbound"
              }
            },
            {
              "name": "bastion-in-host",
              "properties": {
                "protocol": "*",
                "sourcePortRange": "*",
                "destinationPortRanges": [
                  "8080",
                  "5701"
                ],
                "sourceAddressPrefix": "VirtualNetwork",
                "destinationAddressPrefix": "VirtualNetwork",
                "access": "Allow",
                "priority": 130,
                "direction": "Inbound"
              }
            },
            {
              "name": "bastion-vnet-out-allow",
              "properties": {
                "protocol": "Tcp",
                "sourcePortRange": "*",
                "sourceAddressPrefix": "*",
                "destinationPortRanges": [
                  "22",
                  "3389"
                ],
                "destinationAddressPrefix": "VirtualNetwork",
                "access": "Allow",
                "priority": 100,
                "direction": "Outbound"
              }
            },
            {
              "name": "bastion-azure-out-allow",
              "properties": {
                "protocol": "Tcp",
                "sourcePortRange": "*",
                "sourceAddressPrefix": "*",
                "destinationPortRange": "443",
                "destinationAddressPrefix": "AzureCloud",
                "access": "Allow",
                "priority": 120,
                "direction": "Outbound"
              }
            },
            {
              "name": "bastion-out-host",
              "properties": {
                "protocol": "*",
                "sourcePortRange": "*",
                "destinationPortRanges": [
                  "8080",
                  "5701"
                ],
                "sourceAddressPrefix": "VirtualNetwork",
                "destinationAddressPrefix": "VirtualNetwork",
                "access": "Allow",
                "priority": 130,
                "direction": "Outbound"
              }
            },
            {
              "name": "bastion-out-deny",
              "properties": {
                "protocol": "*",
                "sourcePortRange": "*",
                "destinationPortRange": "*",
                "sourceAddressPrefix": "*",
                "destinationAddressPrefix": "*",
                "access": "Deny",
                "priority": 1000,
                "direction": "Outbound"
              }
            }
          ],
          "rtToAttach": "None",
          "routes": [],
          "privateEndpointNetworkPolicies": "Enabled",
          "PrivateLinkServiceNetworkPolicies": "Enabled"
        },
        {
          "vNetName": "[format('vnet-{0}-{1}-hub-01', parameters('environment'), parameters('prefix'))]",
          "subnetName": "snet-Jumpbox",
          "SubnetAddressSpace": "10.1.4.0/24",
          "serviceEndpoints": [],
          "nsgToAttach": "[format('vnet-{0}-{1}-hub-01-snetJumpbox-nsg', parameters('environment'), parameters('prefix'))]",
          "securityRules": [
            {
              "name": "bastion-in-vnet",
              "properties": {
                "protocol": "Tcp",
                "sourcePortRange": "*",
                "sourceAddressPrefix": "10.1.3.0/24",
                "destinationPortRanges": [
                  "22",
                  "3389"
                ],
                "destinationAddressPrefix": "*",
                "access": "Allow",
                "priority": 100,
                "direction": "Inbound"
              }
            },
            {
              "name": "DenyAllInBound",
              "properties": {
                "protocol": "Tcp",
                "sourcePortRange": "*",
                "sourceAddressPrefix": "*",
                "destinationPortRange": "443",
                "destinationAddressPrefix": "*",
                "access": "Deny",
                "priority": 1000,
                "direction": "Inbound"
              }
            }
          ],
          "rtToAttach": "[format('vnet-{0}-{1}-hub-01-snetJumpbox-rt', parameters('environment'), parameters('prefix'))]",
          "routes": [],
          "privateEndpointNetworkPolicies": "Enabled",
          "PrivateLinkServiceNetworkPolicies": "Enabled"
        },
        {
          "vNetName": "[format('vnet-{0}-{1}-hub-01', parameters('environment'), parameters('prefix'))]",
          "subnetName": "snet-dns",
          "SubnetAddressSpace": "10.1.5.0/24",
          "serviceEndpoints": [],
          "nsgToAttach": "[format('vnet-{0}-{1}-hub-01-dns-nsg', parameters('environment'), parameters('prefix'))]",
          "securityRules": [],
          "rtToAttach": "None",
          "routes": [],
          "privateEndpointNetworkPolicies": "Enabled",
          "PrivateLinkServiceNetworkPolicies": "Enabled"
        }
      ]
    },
    "vNetSpoke01Param": {
      "vNetName": "[format('vnet-{0}-{1}-spoke-01', parameters('environment'), parameters('prefix'))]",
      "vNetRG": "[format('rg-{0}-{1}-vnet-spoke-01', parameters('environment'), parameters('prefix'))]",
      "NetworkType": "Spoke",
      "vNetAddressSpace": "10.2.0.0/16",
      "positionEndpointSubnet": 3,
      "positionLinuxSubnet": 0,
      "positionWindowsSubnet": 1,
      "positionLinuxNoSshSubnet": 2,
      "subnets": [
        {
          "vNetName": "[format('vnet-{0}-{1}-spoke-01', parameters('environment'), parameters('prefix'))]",
          "subnetName": "snet-grid-linux",
          "SubnetAddressSpace": "10.2.1.0/24",
          "serviceEndpoints": [],
          "nsgToAttach": "[format('vnet-{0}-{1}-spoke-01-snet-grid-linux-nsg', parameters('environment'), parameters('prefix'))]",
          "securityRules": [
            {
              "name": "BatchServiceRule",
              "properties": {
                "protocol": "tcp",
                "sourcePortRange": "*",
                "destinationPortRange": "29876-29877",
                "sourceAddressPrefix": "[format('BatchNodeManagement.{0}', parameters('resourceGroupLocation'))]",
                "destinationAddressPrefix": "*",
                "access": "Allow",
                "priority": 120,
                "direction": "Inbound",
                "sourcePortRanges": [],
                "destinationPortRanges": [],
                "sourceAddressPrefixes": [],
                "destinationAddressPrefixes": []
              }
            }
          ],
          "rtToAttach": "[format('vnet-{0}-{1}-spoke-01-snet-grid-linux-rt', parameters('environment'), parameters('prefix'))]",
          "routes": [],
          "privateEndpointNetworkPolicies": "Disabled",
          "PrivateLinkServiceNetworkPolicies": "Disabled"
        },
        {
          "vNetName": "[format('vnet-{0}-{1}-spoke-01', parameters('environment'), parameters('prefix'))]",
          "subnetName": "snet-grid-win",
          "SubnetAddressSpace": "10.2.2.0/24",
          "serviceEndpoints": [],
          "nsgToAttach": "[format('vnet-{0}-{1}-spoke-01-snet-grid-win-nsg', parameters('environment'), parameters('prefix'))]",
          "securityRules": [
            {
              "name": "BatchServiceRule",
              "properties": {
                "protocol": "tcp",
                "sourcePortRange": "*",
                "destinationPortRange": "29876-29877",
                "sourceAddressPrefix": "[format('BatchNodeManagement.{0}', parameters('resourceGroupLocation'))]",
                "destinationAddressPrefix": "*",
                "access": "Allow",
                "priority": 120,
                "direction": "Inbound",
                "sourcePortRanges": [],
                "destinationPortRanges": [],
                "sourceAddressPrefixes": [],
                "destinationAddressPrefixes": []
              }
            }
          ],
          "rtToAttach": "[format('vnet-{0}-{1}-spoke-01-snet-grid-win-rt', parameters('environment'), parameters('prefix'))]",
          "routes": [],
          "privateEndpointNetworkPolicies": "Disabled",
          "PrivateLinkServiceNetworkPolicies": "Disabled"
        },
        {
          "vNetName": "[format('vnet-{0}-{1}-spoke-01', parameters('environment'), parameters('prefix'))]",
          "subnetName": "snet-generic",
          "SubnetAddressSpace": "10.2.3.0/24",
          "serviceEndpoints": [],
          "nsgToAttach": "[format('vnet-{0}-{1}-spoke-01-snet-generic-nsg', parameters('environment'), parameters('prefix'))]",
          "securityRules": [
            {
              "name": "BatchServiceRule",
              "properties": {
                "protocol": "tcp",
                "sourcePortRange": "*",
                "destinationPortRange": "29876-29877",
                "sourceAddressPrefix": "[format('BatchNodeManagement.{0}', parameters('resourceGroupLocation'))]",
                "destinationAddressPrefix": "*",
                "access": "Allow",
                "priority": 120,
                "direction": "Inbound",
                "sourcePortRanges": [],
                "destinationPortRanges": [],
                "sourceAddressPrefixes": [],
                "destinationAddressPrefixes": []
              }
            },
            {
              "name": "Deny-RDP",
              "properties": {
                "description": "Denies the ability to remote desktop onto Azure batch nodes",
                "protocol": "*",
                "sourcePortRange": "*",
                "destinationPortRange": "3389",
                "sourceAddressPrefix": "*",
                "destinationAddressPrefix": "*",
                "access": "Deny",
                "priority": 100,
                "direction": "Inbound"
              }
            },
            {
              "name": "Deny-SSH",
              "properties": {
                "description": "Denies the ability to ssh onto Azure batch nodes",
                "protocol": "*",
                "sourcePortRange": "*",
                "destinationPortRange": "22",
                "sourceAddressPrefix": "*",
                "destinationAddressPrefix": "*",
                "access": "Deny",
                "priority": 101,
                "direction": "Inbound"
              }
            }
          ],
          "rtToAttach": "[format('vnet-{0}-{1}-spoke-01-snet-generic-rt', parameters('environment'), parameters('prefix'))]",
          "routes": [],
          "privateEndpointNetworkPolicies": "Disabled",
          "PrivateLinkServiceNetworkPolicies": "Disabled"
        },
        {
          "vNetName": "[format('vnet-{0}-{1}-spoke-01', parameters('environment'), parameters('prefix'))]",
          "subnetName": "snet-priv-ep",
          "SubnetAddressSpace": "10.2.4.0/24",
          "serviceEndpoints": [],
          "nsgToAttach": "[format('vnet-{0}-{1}-spoke-01-snet-priv-ep-nsg', parameters('environment'), parameters('prefix'))]",
          "securityRules": [],
          "rtToAttach": "[format('vnet-{0}-{1}-spoke-01-snet-priv-ep-rt', parameters('environment'), parameters('prefix'))]",
          "routes": [],
          "privateEndpointNetworkPolicies": "Disabled",
          "PrivateLinkServiceNetworkPolicies": "Disabled"
        }
      ]
    },
    "vNetSpoke02Param": {
      "vNetName": "[format('vnet-{0}-{1}-spoke-02', parameters('environment'), parameters('prefix'))]",
      "vNetRG": "[format('rg-{0}-{1}-vnet-spoke-02', parameters('environment'), parameters('prefix'))]",
      "vNetLocation": "[parameters('resourceGroupLocation')]",
      "NetworkType": "Spoke",
      "vNetAddressSpace": "10.3.0.0/16",
      "positionEndpointSubnet": 3,
      "positionTestVM": 0,
      "subnets": [
        {
          "vNetName": "[format('vnet-{0}-{1}-spoke-02', parameters('environment'), parameters('prefix'))]",
          "subnetName": "snet-front-calc",
          "SubnetAddressSpace": "10.3.1.0/24",
          "serviceEndpoints": [],
          "nsgToAttach": "[format('vnet-{0}-{1}-spoke-02-snet-front-calc-nsg', parameters('environment'), parameters('prefix'))]",
          "securityRules": [],
          "rtToAttach": "[format('vnet-{0}-{1}-spoke-02-snet-front-calc-rt', parameters('environment'), parameters('prefix'))]",
          "routes": [],
          "privateEndpointNetworkPolicies": "Enabled",
          "PrivateLinkServiceNetworkPolicies": "Enabled"
        },
        {
          "vNetName": "[format('vnet-{0}-{1}-spoke-02', parameters('environment'), parameters('prefix'))]",
          "subnetName": "snet-calc-nodes",
          "SubnetAddressSpace": "10.3.2.0/24",
          "serviceEndpoints": [],
          "nsgToAttach": "[format('vnet-{0}-{1}-spoke-02-snet-calc-nodes-nsg', parameters('environment'), parameters('prefix'))]",
          "securityRules": [],
          "rtToAttach": "[format('vnet-{0}-{1}-spoke-02-snet-calc-nodes-rt', parameters('environment'), parameters('prefix'))]",
          "routes": [],
          "privateEndpointNetworkPolicies": "Enabled",
          "PrivateLinkServiceNetworkPolicies": "Enabled"
        },
        {
          "vNetName": "[format('vnet-{0}-{1}-spoke-02', parameters('environment'), parameters('prefix'))]",
          "subnetName": "snet-storage",
          "SubnetAddressSpace": "10.3.3.0/24",
          "serviceEndpoints": [],
          "nsgToAttach": "[format('vnet-{0}-{1}-spoke-02-snet-storage-nsg', parameters('environment'), parameters('prefix'))]",
          "securityRules": [],
          "rtToAttach": "[format('vnet-{0}-{1}-spoke-02-snet-storage-rt', parameters('environment'), parameters('prefix'))]",
          "routes": [],
          "privateEndpointNetworkPolicies": "Enabled",
          "PrivateLinkServiceNetworkPolicies": "Enabled"
        },
        {
          "vNetName": "[format('vnet-{0}-{1}-spoke-02', parameters('environment'), parameters('prefix'))]",
          "subnetName": "snet-priv-ep",
          "SubnetAddressSpace": "10.3.4.0/24",
          "serviceEndpoints": [],
          "nsgToAttach": "[format('vnet-{0}-{1}-spoke-02-snet-priv-ep-nsg', parameters('environment'), parameters('prefix'))]",
          "securityRules": [],
          "rtToAttach": "[format('vnet-{0}-{1}-spoke-02-snet-priv-ep-rt', parameters('environment'), parameters('prefix'))]",
          "routes": [],
          "privateEndpointNetworkPolicies": "Disabled",
          "PrivateLinkServiceNetworkPolicies": "Disabled"
        }
      ]
    },
    "fwNetworkRuleCollections": [
      {
        "name": "nrcIntraSpokeConnectivity",
        "properties": {
          "priority": 110,
          "action": {
            "type": "Allow"
          },
          "rules": [
            {
              "name": "Spoke01-to-Spoke02",
              "protocols": [
                "Any"
              ],
              "sourceAddresses": [
                "[variables('vNetSpoke01Param').vNetAddressSpace]"
              ],
              "destinationAddresses": [
                "[variables('vNetSpoke02Param').vNetAddressSpace]"
              ],
              "sourceIpGroups": [],
              "destinationIpGroups": [],
              "destinationFqdns": [],
              "destinationPorts": [
                "*"
              ]
            },
            {
              "name": "Spoke02-to-Spoke01",
              "protocols": [
                "Any"
              ],
              "sourceAddresses": [
                "[variables('vNetSpoke02Param').vNetAddressSpace]"
              ],
              "destinationAddresses": [
                "[variables('vNetSpoke01Param').vNetAddressSpace]"
              ],
              "sourceIpGroups": [],
              "destinationIpGroups": [],
              "destinationFqdns": [],
              "destinationPorts": [
                "*"
              ]
            },
            {
              "name": "SMTP",
              "protocols": [
                "Any"
              ],
              "sourceAddresses": [
                "*"
              ],
              "destinationAddresses": [
                "*"
              ],
              "sourceIpGroups": [],
              "destinationIpGroups": [],
              "destinationFqdns": [],
              "destinationPorts": [
                25
              ]
            },
            {
              "name": "NTP",
              "protocols": [
                "UDP"
              ],
              "sourceAddresses": [
                "*"
              ],
              "destinationAddresses": [
                "*"
              ],
              "sourceIpGroups": [],
              "destinationIpGroups": [],
              "destinationFqdns": [],
              "destinationPorts": [
                123
              ]
            },
            {
              "name": "Dev-Jumpboxes",
              "protocols": [
                "Any"
              ],
              "sourceAddresses": [
                "10.1.4.4",
                "10.1.4.5"
              ],
              "destinationAddresses": [
                "*"
              ],
              "sourceIpGroups": [],
              "destinationIpGroups": [],
              "destinationFqdns": [],
              "destinationPorts": [
                "*"
              ]
            }
          ]
        }
      }
    ],
    "fwApplicationRuleCollections": [
      {
        "name": "applicationRuleCollectionAllow",
        "properties": {
          "priority": 100,
          "action": {
            "type": "Allow"
          },
          "rules": [
            {
              "name": "web-Microsoft",
              "priority": 0,
              "direction": "Inbound",
              "protocols": [
                {
                  "protocolType": "Http",
                  "port": 80
                },
                {
                  "protocolType": "Https",
                  "port": 443
                }
              ],
              "fqdnTags": [],
              "targetFqdns": [
                "*aka.ms",
                "*azure.com",
                "*azure.net",
                "*azure-automation.net",
                "*azuredatabricks.net",
                "[format('*{0}', environment().suffixes.azureDatalakeStoreFileSystem)]",
                "[format('*{0}', environment().suffixes.acrLoginServer)]",
                "[format('*{0}', environment().suffixes.sqlServerHostname)]",
                "*azureedge.net",
                "*azurewebsites.net",
                "*bing.com",
                "*gfx.ms",
                "*microsoft.com",
                "*microsoftonline.com",
                "*microsoftonline-p.com",
                "*msappproxy.net",
                "*msauth.net",
                "*msecnd.net",
                "*msftauth.net",
                "*msocsp.com",
                "*oneget.org",
                "*powershellgallery.com",
                "*visualstudio.com",
                "*vsassets.io",
                "*windows.net",
                "*windows.com",
                "*loganalytics.io",
                "*applicationinsights.io",
                "*microsofttranslator.com",
                "*clouddatahub.net",
                "*cloudsimple.com",
                "*cloudsimple.io",
                "*api.videoindexer.ai",
                "*azurecr.io",
                "*.azure.ai",
                "*.aether.ms",
                "*azureml.net",
                "*finnhub.io"
              ],
              "actions": [],
              "sourceAddresses": [
                "*"
              ],
              "sourceIpGroups": []
            },
            {
              "name": "web-LinuxRepos",
              "priority": 0,
              "direction": "Inbound",
              "protocols": [
                {
                  "protocolType": "Http",
                  "port": 80
                },
                {
                  "protocolType": "Https",
                  "port": 443
                }
              ],
              "fqdnTags": [],
              "targetFqdns": [
                "*redhat.com",
                "*snapcraft.io",
                "*trafficmanager.net",
                "*ubuntu.com"
              ],
              "actions": [],
              "sourceAddresses": [
                "*"
              ],
              "sourceIpGroups": []
            },
            {
              "name": "web-DevOps",
              "priority": 0,
              "direction": "Inbound",
              "protocols": [
                {
                  "protocolType": "Http",
                  "port": 80
                },
                {
                  "protocolType": "Https",
                  "port": 443
                }
              ],
              "fqdnTags": [],
              "targetFqdns": [
                "*github.com",
                "*github.io",
                "*cloudflare.com",
                "*fedoraproject.org",
                "*githubusercontent.com",
                "*hashicorp.com",
                "*mongodb.com",
                "*mongodb.org",
                "*terraform.io",
                "*python.org",
                "*pythonhosted.org",
                "*pypi.org",
                "*accuweather.com",
                "*openweathermap.org",
                "avwx.rest",
                "*bintray.com",
                "*pypa.io"
              ],
              "actions": [],
              "sourceAddresses": [
                "*"
              ],
              "sourceIpGroups": []
            },
            {
              "name": "web-Google",
              "priority": 0,
              "direction": "Inbound",
              "protocols": [
                {
                  "protocolType": "Http",
                  "port": 80
                },
                {
                  "protocolType": "Https",
                  "port": 443
                }
              ],
              "fqdnTags": [],
              "targetFqdns": [
                "*gcr.io",
                "*google.com",
                "*googleapis.com"
              ],
              "actions": [],
              "sourceAddresses": [
                "*"
              ],
              "sourceIpGroups": []
            },
            {
              "name": "web-AKS",
              "priority": 0,
              "direction": "Inbound",
              "protocols": [
                {
                  "protocolType": "Http",
                  "port": 80
                },
                {
                  "protocolType": "Https",
                  "port": 443
                }
              ],
              "fqdnTags": [],
              "targetFqdns": [
                "*amazonaws.com",
                "*azmk8s.io",
                "*azurecr.io",
                "*cloudapp.net",
                "*cloudfront.net",
                "*docker.com",
                "*docker.io",
                "*pivotal.io",
                "*quay.io",
                "*nvidia.github.io",
                "*apt.dockerproject.org",
                "*cdn.mscr.io"
              ],
              "actions": [],
              "sourceAddresses": [
                "*"
              ],
              "sourceIpGroups": []
            },
            {
              "name": "web-Misc",
              "priority": 0,
              "direction": "Inbound",
              "protocols": [
                {
                  "protocolType": "Http",
                  "port": 80
                },
                {
                  "protocolType": "Https",
                  "port": 443
                }
              ],
              "fqdnTags": [],
              "targetFqdns": [
                "*aspnetcdn.com",
                "*bootstrapcdn.com",
                "*nvidia.com",
                "*sentinelone.net",
                "*metrics.nsatc.net"
              ],
              "actions": [],
              "sourceAddresses": [
                "*"
              ],
              "sourceIpGroups": []
            },
            {
              "name": "web-VirtualDesktop",
              "priority": 0,
              "direction": "Inbound",
              "protocols": [
                {
                  "protocolType": "Http",
                  "port": 80
                },
                {
                  "protocolType": "Https",
                  "port": 443
                }
              ],
              "fqdnTags": [],
              "targetFqdns": [
                "*cloud.com",
                "*citrixdata.com",
                "*nssvc.net",
                "*xendesktop.net",
                "*netscalergateway.net",
                "*citrixnetworkapi.net",
                "*citrixworkspacesapi.net",
                "*service-now.com",
                "*citrix.com",
                "*netscalermgmt.net"
              ],
              "actions": [],
              "sourceAddresses": [
                "*"
              ],
              "sourceIpGroups": []
            },
            {
              "name": "AzureBackup",
              "priority": 0,
              "direction": "Inbound",
              "protocols": [
                {
                  "protocolType": "Http",
                  "port": 80
                },
                {
                  "protocolType": "Https",
                  "port": 443
                }
              ],
              "fqdnTags": [
                "AzureBackup"
              ],
              "targetFqdns": [],
              "actions": [],
              "sourceAddresses": [
                "*"
              ],
              "sourceIpGroups": []
            },
            {
              "name": "WindowsUpdate",
              "priority": 0,
              "direction": "Inbound",
              "protocols": [
                {
                  "protocolType": "Http",
                  "port": 80
                },
                {
                  "protocolType": "Https",
                  "port": 443
                }
              ],
              "fqdnTags": [
                "WindowsUpdate"
              ],
              "targetFqdns": [],
              "actions": [],
              "sourceAddresses": [
                "*"
              ],
              "sourceIpGroups": []
            }
          ]
        }
      }
    ],
    "linuxVmInitScriptRaw": "#!/bin/sh\n\necho \"Script triggered by cloud-init process\"\n\n\n# Install required packages and ensure installed packages are updated\n\napt update\napt upgrade -y\napt install  azure-cli nfs-common jq -y\n\n# Mount the NFS File Share\n\nmkdir -p /mnt/share\n\nmount -o sec=sys,vers=3,nolock,proto=tcp {0}.blob.core.windows.net:/{0}/{1}  /mnt/share\n\n",
    "linuxVmInitScript": "[format(variables('linuxVmInitScriptRaw'), variables('saNameStorageNFS'), 'container')]",
    "vmObjectJumpbox": {
      "nicName": "nic-jumpbox-linux-",
      "vmName": "vm-jumpbox-linux-",
      "vmSize": "[parameters('jumpboxLinuxVmSize')]",
      "osProfile": {
        "computerName": "LinuxJumpbox",
        "adminUserName": "[parameters('adminUserName')]",
        "adminPassword": "[parameters('adminPassword')]",
        "customData": "[base64(variables('linuxVmInitScript'))]"
      },
      "imageReference": {
        "publisher": "canonical",
        "offer": "0001-com-ubuntu-server-focal",
        "sku": "20_04-lts-gen2",
        "version": "latest"
      }
    },
    "vmObjectJumpboxWindows": {
      "nicName": "nic-jumpbox-windows-",
      "vmName": "vm-jumpbox-windows-",
      "vmSize": "[parameters('jumpboxWindowsVmSize')]",
      "osProfile": {
        "computerName": "WindowsJumpbox",
        "adminUserName": "[parameters('adminUserName')]",
        "adminPassword": "[parameters('adminPassword')]"
      },
      "imageReference": {
        "publisher": "microsoftwindowsdesktop",
        "offer": "windows-11",
        "sku": "win11-21h2-pro",
        "version": "latest"
      }
    },
    "privateDnsZoneNamesBase": [
      "[format('privatelink.blob.{0}', environment().suffixes.storage)]",
      "[format('privatelink.file.{0}', environment().suffixes.storage)]",
      "privatelink.vaultcore.azure.net",
      "[format('privatelink.{0}.batch.azure.com', parameters('resourceGroupLocation'))]"
    ],
    "privateDnsZoneNameACR": [
      "[format('privatelink{0}', environment().suffixes.acrLoginServer)]"
    ],
    "privateDnsZoneNames": "[if(parameters('deployPrivateACR'), union(variables('privateDnsZoneNamesBase'), variables('privateDnsZoneNameACR')), variables('privateDnsZoneNamesBase'))]",
    "saNameAzBatch": "[format('sa{0}azbatch', parameters('prefix'))]",
    "saNameStorageSMB": "[format('sa{0}blobsmb', parameters('prefix'))]",
    "saNameStorageNFS": "[format('sa{0}blobnfs', parameters('prefix'))]",
    "saNameAzBatchApplication": "[format('sa{0}baapp', parameters('prefix'))]",
    "saDefinitions": [
      {
        "storageAccountName": "[variables('saNameAzBatch')]",
        "privateLinkGroupIds": "blob",
        "storageAccountAccessTier": "Hot",
        "storageAccountKind": "StorageV2",
        "largeFileSharesState": "Disabled",
        "storageAccountSku": "Standard_LRS",
        "supportsHttpsTrafficOnly": false,
        "isHnsEnabled": false,
        "isNfsV3Enabled": false,
        "allowSharedKeyAccess": true
      },
      {
        "storageAccountName": "[variables('saNameStorageSMB')]",
        "privateLinkGroupIds": "file",
        "storageAccountAccessTier": "Hot",
        "storageAccountKind": "StorageV2",
        "largeFileSharesState": "Enabled",
        "storageAccountSku": "Standard_LRS",
        "supportsHttpsTrafficOnly": false,
        "isHnsEnabled": false,
        "isNfsV3Enabled": false,
        "fileShareEnabledProtocol": "SMB",
        "fileShareAccessTier": "TransactionOptimized",
        "allowSharedKeyAccess": true
      },
      {
        "storageAccountName": "[variables('saNameStorageNFS')]",
        "privateLinkGroupIds": "blob",
        "storageAccountAccessTier": "Hot",
        "storageAccountKind": "StorageV2",
        "largeFileSharesState": "Disabled",
        "storageAccountSku": "Standard_LRS",
        "supportsHttpsTrafficOnly": false,
        "isHnsEnabled": true,
        "isNfsV3Enabled": true,
        "allowSharedKeyAccess": true
      },
      {
        "storageAccountName": "[variables('saNameAzBatchApplication')]",
        "privateLinkGroupIds": "blob",
        "storageAccountAccessTier": "Hot",
        "storageAccountKind": "StorageV2",
        "largeFileSharesState": "Disabled",
        "storageAccountSku": "Standard_LRS",
        "supportsHttpsTrafficOnly": false,
        "isHnsEnabled": false,
        "isNfsV3Enabled": false,
        "allowSharedKeyAccess": true
      }
    ],
    "rgHub": "[format('rg-{0}-{1}-vnet-hub-01', parameters('environment'), parameters('prefix'))]",
    "rgSpoke01": "[format('rg-{0}-{1}-vnet-spoke-01', parameters('environment'), parameters('prefix'))]",
    "rgSpoke02": "[format('rg-{0}-{1}-vnet-spoke-02', parameters('environment'), parameters('prefix'))]",
    "rgJumpbox": "[format('rg-{0}-{1}-jumpbox', parameters('environment'), parameters('prefix'))]",
    "rgAzureBatch": "[format('rg-{0}-{1}-azbatch', parameters('environment'), parameters('prefix'))]",
    "azureFirewallName": "[format('fw-{0}-{1}-vnet-hub-01', parameters('environment'), parameters('prefix'))]",
    "bastionName": "[format('bas-{0}-{1}-vnet-hub-01', parameters('environment'), parameters('prefix'))]",
    "resourceGroupNames": [
      "[variables('rgHub')]",
      "[variables('rgSpoke01')]",
      "[variables('rgSpoke02')]",
      "[variables('rgJumpbox')]",
      "[variables('rgAzureBatch')]"
    ],
    "acrName": "[format('acr{0}{1}azbatch', parameters('environment'), parameters('prefix'))]",
    "batchAccountName": "[format('ba{0}{1}01', parameters('environment'), parameters('prefix'))]",
    "logAnalyticsWorkspaceName": "[format('log-{0}-{1}-{2}', parameters('environment'), parameters('prefix'), uniqueString(subscription().subscriptionId, format('rg-{0}-vnet-hub-01', parameters('prefix'))))]",
    "appInsightsName": "[format('appi-{0}-{1}-{2}', parameters('environment'), parameters('prefix'), uniqueString(subscription().subscriptionId, format('rg-{0}-vnet-hub-01', parameters('prefix'))))]",
    "vpnGwName": "[format('vpnGw{0}{1}01', parameters('environment'), parameters('prefix'))]",
    "vpnClientAddressPoolPrefix": "172.16.25.0/24"
  },
  "resources": [
    {
      "copy": {
        "name": "rgModule",
        "count": "[length(variables('resourceGroupNames'))]",
        "mode": "serial",
        "batchSize": 1
      },
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('dpl-{0}-Sub-{1}', uniqueString(deployment().name, deployment().location), variables('resourceGroupNames')[copyIndex()])]",
      "location": "[deployment().location]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "resourceGroupLocation": {
            "value": "[parameters('resourceGroupLocation')]"
          },
          "resourceGroupName": {
            "value": "[variables('resourceGroupNames')[copyIndex()]]"
          },
          "resourceTags": {
            "value": "[parameters('resourceTags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.10.61.36676",
              "templateHash": "7139188142350928998"
            }
          },
          "parameters": {
            "resourceGroupLocation": {
              "type": "string"
            },
            "resourceTags": {
              "type": "object"
            },
            "resourceGroupName": {
              "type": "string"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Resources/resourceGroups",
              "apiVersion": "2021-04-01",
              "name": "[parameters('resourceGroupName')]",
              "location": "[parameters('resourceGroupLocation')]",
              "tags": "[parameters('resourceTags')]"
            }
          ]
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('dpl-{0}-logAnalytics', uniqueString(deployment().name, deployment().location))]",
      "resourceGroup": "[variables('rgHub')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "logAnalyticsWorkspaceName": {
            "value": "[variables('logAnalyticsWorkspaceName')]"
          },
          "tags": {
            "value": "[parameters('resourceTags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.10.61.36676",
              "templateHash": "15361124388189105755"
            }
          },
          "parameters": {
            "logAnalyticsWorkspaceName": {
              "type": "string"
            },
            "skuName": {
              "type": "string",
              "defaultValue": "Free"
            },
            "tags": {
              "type": "object"
            }
          },
          "resources": [
            {
              "type": "Microsoft.OperationalInsights/workspaces",
              "apiVersion": "2021-06-01",
              "name": "[parameters('logAnalyticsWorkspaceName')]",
              "location": "[resourceGroup().location]",
              "tags": "[parameters('tags')]",
              "properties": {
                "sku": {
                  "name": "[parameters('skuName')]"
                }
              }
            }
          ],
          "outputs": {
            "id": {
              "type": "string",
              "value": "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('logAnalyticsWorkspaceName'))]"
            }
          }
        }
      },
      "dependsOn": [
        "rgModule"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('dpl-{0}-appInsights', uniqueString(deployment().name, deployment().location))]",
      "resourceGroup": "[variables('rgHub')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "appInsightsWorkspaceResourceId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgHub')), 'Microsoft.Resources/deployments', format('dpl-{0}-logAnalytics', uniqueString(deployment().name, deployment().location)))).outputs.id.value]"
          },
          "name": {
            "value": "[variables('appInsightsName')]"
          },
          "tags": {
            "value": "[parameters('resourceTags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.10.61.36676",
              "templateHash": "3640648420746395880"
            }
          },
          "parameters": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "Required. Name of the Application Insights"
              }
            },
            "appInsightsType": {
              "type": "string",
              "defaultValue": "web",
              "allowedValues": [
                "web",
                "other"
              ],
              "metadata": {
                "description": "Optional. Application type"
              }
            },
            "appInsightsWorkspaceResourceId": {
              "type": "string",
              "metadata": {
                "description": "Required. Resource ID of the log analytics workspace which the data will be ingested to. This property is required to create an application with this API version. Applications from older versions will not have this property."
              }
            },
            "appInsightsPublicNetworkAccessForIngestion": {
              "type": "string",
              "defaultValue": "Enabled",
              "allowedValues": [
                "Enabled",
                "Disabled"
              ],
              "metadata": {
                "description": "Optional. The network access type for accessing Application Insights ingestion. - Enabled or Disabled"
              }
            },
            "appInsightsPublicNetworkAccessForQuery": {
              "type": "string",
              "defaultValue": "Enabled",
              "allowedValues": [
                "Enabled",
                "Disabled"
              ],
              "metadata": {
                "description": "Optional. The network access type for accessing Application Insights query. - Enabled or Disabled"
              }
            },
            "kind": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. The kind of application that this component refers to, used to customize UI. This value is a freeform string, values should typically be one of the following: web, ios, other, store, java, phone."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Optional. Location for all Resources"
              }
            },
            "roleAssignments": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Optional. Array of role assignment objects that contain the 'roleDefinitionIdOrName' and 'principalId' to define RBAC role assignments on this resource. In the roleDefinitionIdOrName attribute, you can provide either the display name of the role definition, or it's fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. Tags of the resource."
              }
            },
            "cuaId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Customer Usage Attribution ID (GUID). This GUID must be previously registered"
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.Insights/components",
              "apiVersion": "2020-02-02",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "kind": "[parameters('kind')]",
              "properties": {
                "Application_Type": "[parameters('appInsightsType')]",
                "WorkspaceResourceId": "[parameters('appInsightsWorkspaceResourceId')]",
                "publicNetworkAccessForIngestion": "[parameters('appInsightsPublicNetworkAccessForIngestion')]",
                "publicNetworkAccessForQuery": "[parameters('appInsightsPublicNetworkAccessForQuery')]"
              }
            },
            {
              "condition": "[not(empty(parameters('cuaId')))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('pid-{0}', parameters('cuaId'))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {},
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.10.61.36676",
                      "templateHash": "4193470495622901480"
                    }
                  },
                  "resources": []
                }
              }
            },
            {
              "copy": {
                "name": "appInsights_rbac",
                "count": "[length(parameters('roleAssignments'))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('{0}-AppInsights-Rbac-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "principalIds": {
                    "value": "[parameters('roleAssignments')[copyIndex()].principalIds]"
                  },
                  "roleDefinitionIdOrName": {
                    "value": "[parameters('roleAssignments')[copyIndex()].roleDefinitionIdOrName]"
                  },
                  "resourceId": {
                    "value": "[resourceId('Microsoft.Insights/components', parameters('name'))]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.10.61.36676",
                      "templateHash": "13858939094356364755"
                    }
                  },
                  "parameters": {
                    "principalIds": {
                      "type": "array"
                    },
                    "roleDefinitionIdOrName": {
                      "type": "string"
                    },
                    "resourceId": {
                      "type": "string"
                    }
                  },
                  "variables": {
                    "builtInRoleNames": {
                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                      "Application Insights Component Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'ae349356-3a1b-4a5e-921d-050484c6347e')]",
                      "Application Insights Snapshot Debugger": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '08954f03-6346-4c2e-81c0-ec3a5cfae23b')]",
                      "Data Purger": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '150f5e0c-0603-4f03-8c7f-cf70034c4e90')]",
                      "Log Analytics Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '92aaf0da-9dab-42b6-94a3-d43ce8d16293')]",
                      "Log Analytics Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '73c42c96-874c-492b-b04d-ab87d138a893')]",
                      "Managed Application Contributor Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '641177b8-a67a-45b9-a033-47bc880bb21e')]",
                      "Managed Application Operator Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c7393b34-138c-406f-901b-d8cf2b17e6ae')]",
                      "Managed Applications Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b9331d33-8a36-4f8c-b097-4f54124fdb44')]",
                      "Monitoring Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '749f88d5-cbae-40b8-bcfc-e573ddc772fa')]",
                      "Monitoring Metrics Publisher": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '3913510d-42f4-4e42-8a64-420c390055eb')]",
                      "Monitoring Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '43d0d8ad-25c7-4714-9337-8ba259a9fe05')]",
                      "Resource Policy Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '36243c78-bf99-498c-9df9-86d9f8d28608')]",
                      "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]",
                      "Website Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'de139f84-1756-47ae-9be6-808fbbe84772')]"
                    }
                  },
                  "resources": [
                    {
                      "copy": {
                        "name": "roleAssignment",
                        "count": "[length(parameters('principalIds'))]"
                      },
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2020-04-01-preview",
                      "scope": "[format('Microsoft.Insights/components/{0}', last(split(parameters('resourceId'), '/')))]",
                      "name": "[guid(last(split(parameters('resourceId'), '/')), parameters('principalIds')[copyIndex()], parameters('roleDefinitionIdOrName'))]",
                      "properties": {
                        "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), parameters('roleDefinitionIdOrName')), variables('builtInRoleNames')[parameters('roleDefinitionIdOrName')], parameters('roleDefinitionIdOrName'))]",
                        "principalId": "[parameters('principalIds')[copyIndex()]]"
                      }
                    }
                  ]
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Insights/components', parameters('name'))]"
              ]
            }
          ],
          "outputs": {
            "appInsightsName": {
              "type": "string",
              "value": "[parameters('name')]",
              "metadata": {
                "description": "The name of the application insights component"
              }
            },
            "appInsightsResourceId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Insights/components', parameters('name'))]",
              "metadata": {
                "description": "The resource ID of the application insights component"
              }
            },
            "appInsightsResourceGroup": {
              "type": "string",
              "value": "[resourceGroup().name]",
              "metadata": {
                "description": "The resource group the application insights component was deployed into"
              }
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgHub')), 'Microsoft.Resources/deployments', format('dpl-{0}-logAnalytics', uniqueString(deployment().name, deployment().location)))]",
        "rgModule"
      ]
    },
    {
      "condition": "[parameters('deployHubSpoke')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('dpl-{0}-hubSpoke', uniqueString(deployment().name, deployment().location))]",
      "location": "[deployment().location]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "pipBastionName": {
            "value": "[variables('pipBastionName')]"
          },
          "pipFirewallName": {
            "value": "[variables('pipFirewallName')]"
          },
          "rgHub": {
            "value": "[variables('rgHub')]"
          },
          "rgSpoke01": {
            "value": "[variables('rgSpoke01')]"
          },
          "rgSpoke02": {
            "value": "[variables('rgSpoke02')]"
          },
          "vNetHubObject": {
            "value": "[variables('vNetHubObject')]"
          },
          "vNetSpoke01Object": {
            "value": "[variables('vNetSpoke01Param')]"
          },
          "vNetSpoke02Object": {
            "value": "[variables('vNetSpoke02Param')]"
          },
          "logAnalyticsWorkspaceId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgHub')), 'Microsoft.Resources/deployments', format('dpl-{0}-logAnalytics', uniqueString(deployment().name, deployment().location)))).outputs.id.value]"
          },
          "azureFirewallName": {
            "value": "[variables('azureFirewallName')]"
          },
          "bastionName": {
            "value": "[variables('bastionName')]"
          },
          "fwNetworkRuleCollections": {
            "value": "[variables('fwNetworkRuleCollections')]"
          },
          "fwApplicationRuleCollections": {
            "value": "[variables('fwApplicationRuleCollections')]"
          },
          "privateDnsZoneNames": {
            "value": "[variables('privateDnsZoneNames')]"
          },
          "ignoreDnsZoneNwLinks": {
            "value": "[parameters('ignoreDnsZoneNwLinks')]"
          },
          "tags": {
            "value": "[parameters('resourceTags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.10.61.36676",
              "templateHash": "8470180889693258761"
            }
          },
          "parameters": {
            "tags": {
              "type": "object",
              "defaultValue": {}
            },
            "logAnalyticsWorkspaceId": {
              "type": "string"
            },
            "rgHub": {
              "type": "string"
            },
            "pipFirewallName": {
              "type": "string"
            },
            "pipBastionName": {
              "type": "string"
            },
            "vNetHubObject": {
              "type": "object"
            },
            "fwNetworkRuleCollections": {
              "type": "array",
              "defaultValue": []
            },
            "fwApplicationRuleCollections": {
              "type": "array",
              "defaultValue": []
            },
            "azureFirewallName": {
              "type": "string"
            },
            "bastionName": {
              "type": "string"
            },
            "rgSpoke01": {
              "type": "string"
            },
            "vNetSpoke01Object": {
              "type": "object"
            },
            "rgSpoke02": {
              "type": "string"
            },
            "vNetSpoke02Object": {
              "type": "object"
            },
            "privateDnsZoneNames": {
              "type": "array",
              "defaultValue": []
            },
            "ignoreDnsZoneNwLinks": {
              "type": "bool",
              "defaultValue": false
            }
          },
          "resources": [
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('dpl-{0}-vnet-hub', uniqueString(deployment().name, deployment().location))]",
              "resourceGroup": "[parameters('rgHub')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "vNetHubObject": {
                    "value": "[parameters('vNetHubObject')]"
                  },
                  "logAnalyticsWorkspaceId": {
                    "value": "[parameters('logAnalyticsWorkspaceId')]"
                  },
                  "pipBastionName": {
                    "value": "[parameters('pipBastionName')]"
                  },
                  "pipFirewallName": {
                    "value": "[parameters('pipFirewallName')]"
                  },
                  "fwNetworkRuleCollections": {
                    "value": "[parameters('fwNetworkRuleCollections')]"
                  },
                  "fwApplicationRuleCollections": {
                    "value": "[parameters('fwApplicationRuleCollections')]"
                  },
                  "azureFirewallName": {
                    "value": "[parameters('azureFirewallName')]"
                  },
                  "bastionName": {
                    "value": "[parameters('bastionName')]"
                  },
                  "rgHub": {
                    "value": "[parameters('rgHub')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.10.61.36676",
                      "templateHash": "16581223250272271812"
                    }
                  },
                  "parameters": {
                    "rgHub": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {}
                    },
                    "pipFirewallName": {
                      "type": "string"
                    },
                    "pipBastionName": {
                      "type": "string"
                    },
                    "vNetHubObject": {
                      "type": "object"
                    },
                    "logAnalyticsWorkspaceId": {
                      "type": "string"
                    },
                    "fwNetworkRuleCollections": {
                      "type": "array",
                      "defaultValue": []
                    },
                    "fwApplicationRuleCollections": {
                      "type": "array",
                      "defaultValue": []
                    },
                    "azureFirewallName": {
                      "type": "string"
                    },
                    "bastionName": {
                      "type": "string"
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('dpl-{0}-pip-fw', uniqueString(deployment().name, parameters('location')))]",
                      "resourceGroup": "[parameters('rgHub')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "pipName": {
                            "value": "[parameters('pipFirewallName')]"
                          },
                          "tags": {
                            "value": "[parameters('tags')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.10.61.36676",
                              "templateHash": "16649564108942475401"
                            }
                          },
                          "parameters": {
                            "pipName": {
                              "type": "string"
                            },
                            "skuName": {
                              "type": "string",
                              "defaultValue": "Standard"
                            },
                            "publicIPAllocationMethod": {
                              "type": "string",
                              "defaultValue": "Static"
                            },
                            "tags": {
                              "type": "object",
                              "defaultValue": {}
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Network/publicIPAddresses",
                              "apiVersion": "2021-03-01",
                              "name": "[parameters('pipName')]",
                              "location": "[resourceGroup().location]",
                              "tags": "[parameters('tags')]",
                              "sku": {
                                "name": "[parameters('skuName')]"
                              },
                              "properties": {
                                "publicIPAllocationMethod": "[parameters('publicIPAllocationMethod')]"
                              }
                            }
                          ],
                          "outputs": {
                            "pipId": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.Network/publicIPAddresses', parameters('pipName'))]"
                            },
                            "pipIp": {
                              "type": "string",
                              "value": "[reference(resourceId('Microsoft.Network/publicIPAddresses', parameters('pipName'))).ipAddress]"
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('dpl-{0}-pip-bastion', uniqueString(deployment().name, parameters('location')))]",
                      "resourceGroup": "[parameters('rgHub')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "pipName": {
                            "value": "[parameters('pipBastionName')]"
                          },
                          "tags": {
                            "value": "[parameters('tags')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.10.61.36676",
                              "templateHash": "16649564108942475401"
                            }
                          },
                          "parameters": {
                            "pipName": {
                              "type": "string"
                            },
                            "skuName": {
                              "type": "string",
                              "defaultValue": "Standard"
                            },
                            "publicIPAllocationMethod": {
                              "type": "string",
                              "defaultValue": "Static"
                            },
                            "tags": {
                              "type": "object",
                              "defaultValue": {}
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Network/publicIPAddresses",
                              "apiVersion": "2021-03-01",
                              "name": "[parameters('pipName')]",
                              "location": "[resourceGroup().location]",
                              "tags": "[parameters('tags')]",
                              "sku": {
                                "name": "[parameters('skuName')]"
                              },
                              "properties": {
                                "publicIPAllocationMethod": "[parameters('publicIPAllocationMethod')]"
                              }
                            }
                          ],
                          "outputs": {
                            "pipId": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.Network/publicIPAddresses', parameters('pipName'))]"
                            },
                            "pipIp": {
                              "type": "string",
                              "value": "[reference(resourceId('Microsoft.Network/publicIPAddresses', parameters('pipName'))).ipAddress]"
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('dpl-{0}-vNet-Hub', uniqueString(deployment().name, parameters('location')))]",
                      "resourceGroup": "[parameters('rgHub')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "vNetObject": {
                            "value": "[parameters('vNetHubObject')]"
                          },
                          "tags": {
                            "value": "[parameters('tags')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.10.61.36676",
                              "templateHash": "1135338002588638283"
                            }
                          },
                          "parameters": {
                            "vNetObject": {
                              "type": "object"
                            },
                            "tags": {
                              "type": "object",
                              "defaultValue": {}
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Network/virtualNetworks",
                              "apiVersion": "2021-03-01",
                              "name": "[parameters('vNetObject').vnetName]",
                              "location": "[resourceGroup().location]",
                              "tags": "[parameters('tags')]",
                              "properties": {
                                "copy": [
                                  {
                                    "name": "subnets",
                                    "count": "[length(parameters('vNetObject').subnets)]",
                                    "input": {
                                      "name": "[parameters('vNetObject').subnets[copyIndex('subnets')].SubnetName]",
                                      "properties": {
                                        "addressPrefix": "[parameters('vNetObject').subnets[copyIndex('subnets')].SubnetAddressSpace]",
                                        "privateEndpointNetworkPolicies": "[parameters('vNetObject').subnets[copyIndex('subnets')].privateEndpointNetworkPolicies]"
                                      }
                                    }
                                  }
                                ],
                                "addressSpace": {
                                  "addressPrefixes": [
                                    "[parameters('vNetObject').vNetAddressSpace]"
                                  ]
                                },
                                "enableDdosProtection": false
                              }
                            }
                          ],
                          "outputs": {
                            "vNetName": {
                              "type": "string",
                              "value": "[parameters('vNetObject').vnetName]"
                            },
                            "vNetId": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.Network/virtualNetworks', parameters('vNetObject').vnetName)]"
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('dpl-{0}-fw', uniqueString(deployment().name, parameters('location')))]",
                      "resourceGroup": "[parameters('rgHub')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "applicationRuleCollection": {
                            "value": "[parameters('fwApplicationRuleCollections')]"
                          },
                          "networkRuleCollection": {
                            "value": "[parameters('fwNetworkRuleCollections')]"
                          },
                          "azureFirewallName": {
                            "value": "[parameters('azureFirewallName')]"
                          },
                          "azureFirwallSubnetId": {
                            "value": "[format('{0}/subnets/{1}', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('rgHub')), 'Microsoft.Resources/deployments', format('dpl-{0}-vNet-Hub', uniqueString(deployment().name, parameters('location'))))).outputs.vNetId.value, parameters('vNetHubObject').subnets[parameters('vNetHubObject').positionFirewall].subnetName)]"
                          },
                          "publicIpAddressId": {
                            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('rgHub')), 'Microsoft.Resources/deployments', format('dpl-{0}-pip-fw', uniqueString(deployment().name, parameters('location'))))).outputs.pipId.value]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.10.61.36676",
                              "templateHash": "85573317028304744"
                            }
                          },
                          "parameters": {
                            "azureFirewallName": {
                              "type": "string"
                            },
                            "publicIpAddressId": {
                              "type": "string"
                            },
                            "azureFirwallSubnetId": {
                              "type": "string"
                            },
                            "tags": {
                              "type": "object",
                              "defaultValue": {}
                            },
                            "logAnalyticsWorkspaceId": {
                              "type": "string",
                              "defaultValue": ""
                            },
                            "networkRuleCollection": {
                              "type": "array",
                              "defaultValue": []
                            },
                            "applicationRuleCollection": {
                              "type": "array",
                              "defaultValue": []
                            },
                            "fwSkuName": {
                              "type": "string",
                              "defaultValue": "AZFW_VNet"
                            },
                            "fwSkuTier": {
                              "type": "string",
                              "defaultValue": "Standard"
                            },
                            "threatIntelMode": {
                              "type": "string",
                              "defaultValue": "Alert"
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Network/azureFirewalls",
                              "apiVersion": "2021-03-01",
                              "name": "[parameters('azureFirewallName')]",
                              "location": "[resourceGroup().location]",
                              "tags": "[parameters('tags')]",
                              "properties": {
                                "sku": {
                                  "name": "[parameters('fwSkuName')]",
                                  "tier": "[parameters('fwSkuTier')]"
                                },
                                "threatIntelMode": "[parameters('threatIntelMode')]",
                                "ipConfigurations": [
                                  {
                                    "name": "[parameters('azureFirewallName')]",
                                    "properties": {
                                      "publicIPAddress": {
                                        "id": "[parameters('publicIpAddressId')]"
                                      },
                                      "subnet": {
                                        "id": "[parameters('azureFirwallSubnetId')]"
                                      }
                                    }
                                  }
                                ],
                                "networkRuleCollections": "[parameters('networkRuleCollection')]",
                                "applicationRuleCollections": "[parameters('applicationRuleCollection')]"
                              }
                            },
                            {
                              "condition": "[not(empty(parameters('logAnalyticsWorkspaceId')))]",
                              "type": "Microsoft.Insights/diagnosticSettings",
                              "apiVersion": "2021-05-01-preview",
                              "scope": "[format('Microsoft.Network/azureFirewalls/{0}', parameters('azureFirewallName'))]",
                              "name": "diagFirewall",
                              "properties": {
                                "workspaceId": "[parameters('logAnalyticsWorkspaceId')]",
                                "logs": [
                                  {
                                    "category": "AzureFirewallApplicationRule",
                                    "enabled": true
                                  },
                                  {
                                    "category": "AzureFirewallNetworkRule",
                                    "enabled": true
                                  },
                                  {
                                    "category": "AzureFirewallDnsProxy",
                                    "enabled": true
                                  }
                                ]
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Network/azureFirewalls', parameters('azureFirewallName'))]"
                              ]
                            }
                          ],
                          "outputs": {
                            "fwPrivateIpAddress": {
                              "type": "string",
                              "value": "[reference(resourceId('Microsoft.Network/azureFirewalls', parameters('azureFirewallName'))).ipConfigurations[0].properties.privateIPAddress]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('rgHub')), 'Microsoft.Resources/deployments', format('dpl-{0}-pip-fw', uniqueString(deployment().name, parameters('location'))))]",
                        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('rgHub')), 'Microsoft.Resources/deployments', format('dpl-{0}-vNet-Hub', uniqueString(deployment().name, parameters('location'))))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('dpl-{0}-bastion', uniqueString(deployment().name, parameters('location')))]",
                      "resourceGroup": "[parameters('rgHub')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "bastionSubnetId": {
                            "value": "[format('{0}/subnets/{1}', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('rgHub')), 'Microsoft.Resources/deployments', format('dpl-{0}-vNet-Hub', uniqueString(deployment().name, parameters('location'))))).outputs.vNetId.value, parameters('vNetHubObject').subnets[parameters('vNetHubObject').positionBastion].subnetName)]"
                          },
                          "publicIpAddressId": {
                            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('rgHub')), 'Microsoft.Resources/deployments', format('dpl-{0}-pip-bastion', uniqueString(deployment().name, parameters('location'))))).outputs.pipId.value]"
                          },
                          "bastionName": {
                            "value": "[parameters('bastionName')]"
                          },
                          "tags": {
                            "value": "[parameters('tags')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.10.61.36676",
                              "templateHash": "10883525406927766509"
                            }
                          },
                          "parameters": {
                            "bastionName": {
                              "type": "string",
                              "defaultValue": "bastionhost"
                            },
                            "publicIpAddressId": {
                              "type": "string"
                            },
                            "bastionSubnetId": {
                              "type": "string"
                            },
                            "tags": {
                              "type": "object",
                              "defaultValue": {}
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Network/bastionHosts",
                              "apiVersion": "2020-06-01",
                              "name": "[parameters('bastionName')]",
                              "location": "[resourceGroup().location]",
                              "tags": "[parameters('tags')]",
                              "properties": {
                                "ipConfigurations": [
                                  {
                                    "name": "ipconf",
                                    "properties": {
                                      "subnet": {
                                        "id": "[parameters('bastionSubnetId')]"
                                      },
                                      "publicIPAddress": {
                                        "id": "[parameters('publicIpAddressId')]"
                                      }
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('rgHub')), 'Microsoft.Resources/deployments', format('dpl-{0}-pip-bastion', uniqueString(deployment().name, parameters('location'))))]",
                        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('rgHub')), 'Microsoft.Resources/deployments', format('dpl-{0}-vNet-Hub', uniqueString(deployment().name, parameters('location'))))]"
                      ]
                    },
                    {
                      "condition": "[not(equals(parameters('vNetHubObject').subnets[copyIndex()].rtToAttach, 'None'))]",
                      "copy": {
                        "name": "vNetHubRT",
                        "count": "[length(parameters('vNetHubObject').subnets)]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('dpl-{0}-RT-vNet-Hub-{1}', uniqueString(deployment().name, parameters('location')), parameters('vNetHubObject').subnets[copyIndex()].subnetName)]",
                      "resourceGroup": "[parameters('rgHub')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "rtName": {
                            "value": "[parameters('vNetHubObject').subnets[copyIndex()].rtToAttach]"
                          },
                          "routes": {
                            "value": "[if(empty(createArray(createObject('name', 'Default', 'properties', createObject('addressPrefix', '0.0.0.0/0', 'nextHopType', 'VirtualAppliance', 'nextHopIpAddress', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('rgHub')), 'Microsoft.Resources/deployments', format('dpl-{0}-fw', uniqueString(deployment().name, parameters('location'))))).outputs.fwPrivateIpAddress.value)))), parameters('vNetHubObject').subnets[copyIndex()].routes, union(parameters('vNetHubObject').subnets[copyIndex()].routes, createArray(createObject('name', 'Default', 'properties', createObject('addressPrefix', '0.0.0.0/0', 'nextHopType', 'VirtualAppliance', 'nextHopIpAddress', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('rgHub')), 'Microsoft.Resources/deployments', format('dpl-{0}-fw', uniqueString(deployment().name, parameters('location'))))).outputs.fwPrivateIpAddress.value)))))]"
                          },
                          "tags": {
                            "value": "[parameters('tags')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.10.61.36676",
                              "templateHash": "8857908103978307514"
                            }
                          },
                          "parameters": {
                            "rtName": {
                              "type": "string"
                            },
                            "disableBGPProp": {
                              "type": "bool",
                              "defaultValue": false
                            },
                            "routes": {
                              "type": "array",
                              "defaultValue": []
                            },
                            "tags": {
                              "type": "object",
                              "defaultValue": {}
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Network/routeTables",
                              "apiVersion": "2020-06-01",
                              "name": "[parameters('rtName')]",
                              "location": "[resourceGroup().location]",
                              "properties": {
                                "disableBgpRoutePropagation": "[parameters('disableBGPProp')]",
                                "routes": "[parameters('routes')]"
                              },
                              "tags": "[parameters('tags')]"
                            }
                          ],
                          "outputs": {
                            "id": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.Network/routeTables', parameters('rtName'))]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('rgHub')), 'Microsoft.Resources/deployments', format('dpl-{0}-fw', uniqueString(deployment().name, parameters('location'))))]",
                        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('rgHub')), 'Microsoft.Resources/deployments', format('dpl-{0}-vNet-Hub', uniqueString(deployment().name, parameters('location'))))]"
                      ]
                    },
                    {
                      "condition": "[not(equals(parameters('vNetHubObject').subnets[copyIndex()].nsgToAttach, 'None'))]",
                      "copy": {
                        "name": "vNetHubNSG",
                        "count": "[length(parameters('vNetHubObject').subnets)]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('dpl-{0}-NSG-vNet-Hub-{1}', uniqueString(deployment().name, parameters('location')), parameters('vNetHubObject').subnets[copyIndex()].subnetName)]",
                      "resourceGroup": "[parameters('rgHub')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "nsgName": {
                            "value": "[parameters('vNetHubObject').subnets[copyIndex()].nsgToAttach]"
                          },
                          "secRules": {
                            "value": "[parameters('vNetHubObject').subnets[copyIndex()].securityRules]"
                          },
                          "tags": {
                            "value": "[parameters('tags')]"
                          },
                          "logAnalyticsWorkspaceId": {
                            "value": "[parameters('logAnalyticsWorkspaceId')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.10.61.36676",
                              "templateHash": "1805279730060917740"
                            }
                          },
                          "parameters": {
                            "nsgName": {
                              "type": "string"
                            },
                            "secRules": {
                              "type": "array"
                            },
                            "tags": {
                              "type": "object",
                              "defaultValue": {}
                            },
                            "logAnalyticsWorkspaceId": {
                              "type": "string",
                              "defaultValue": ""
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Network/networkSecurityGroups",
                              "apiVersion": "2020-06-01",
                              "name": "[parameters('nsgName')]",
                              "location": "[resourceGroup().location]",
                              "properties": {
                                "securityRules": "[parameters('secRules')]"
                              },
                              "tags": "[parameters('tags')]"
                            },
                            {
                              "condition": "[not(empty(parameters('logAnalyticsWorkspaceId')))]",
                              "type": "Microsoft.Insights/diagnosticSettings",
                              "apiVersion": "2021-05-01-preview",
                              "scope": "[format('Microsoft.Network/networkSecurityGroups/{0}', parameters('nsgName'))]",
                              "name": "diagNSG",
                              "properties": {
                                "workspaceId": "[parameters('logAnalyticsWorkspaceId')]",
                                "logs": [
                                  {
                                    "category": "NetworkSecurityGroupEvent",
                                    "enabled": true
                                  },
                                  {
                                    "category": "NetworkSecurityGroupRuleCounter",
                                    "enabled": true
                                  }
                                ]
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('nsgName'))]"
                              ]
                            }
                          ],
                          "outputs": {
                            "id": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('nsgName'))]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('rgHub')), 'Microsoft.Resources/deployments', format('dpl-{0}-vNet-Hub', uniqueString(deployment().name, parameters('location'))))]",
                        "vNetHubRT"
                      ]
                    },
                    {
                      "copy": {
                        "name": "vNetHubNsgRtAttach",
                        "count": "[length(parameters('vNetHubObject').subnets)]",
                        "mode": "serial",
                        "batchSize": 1
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('dpl-{0}-Attach-vNet-Hub-{1}', uniqueString(deployment().name, parameters('location')), parameters('vNetHubObject').subnets[copyIndex()].subnetName)]",
                      "resourceGroup": "[parameters('rgHub')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "vnetName": {
                            "value": "[parameters('vNetHubObject').subnets[copyIndex()].vNetName]"
                          },
                          "subnetName": {
                            "value": "[parameters('vNetHubObject').subnets[copyIndex()].subnetName]"
                          },
                          "subnetAddressPrefix": {
                            "value": "[parameters('vNetHubObject').subnets[copyIndex()].SubnetAddressSpace]"
                          },
                          "rtToAttach": {
                            "value": "[parameters('vNetHubObject').subnets[copyIndex()].rtToAttach]"
                          },
                          "nsgToAttach": {
                            "value": "[parameters('vNetHubObject').subnets[copyIndex()].nsgToAttach]"
                          },
                          "privateEndpointNetworkPolicies": {
                            "value": "[parameters('vNetHubObject').subnets[copyIndex()].privateEndpointNetworkPolicies]"
                          },
                          "privateLinkServiceNetworkPolicies": {
                            "value": "[parameters('vNetHubObject').subnets[copyIndex()].privateLinkServiceNetworkPolicies]"
                          },
                          "serviceEndpoints": {
                            "value": "[parameters('vNetHubObject').subnets[copyIndex()].serviceEndpoints]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.10.61.36676",
                              "templateHash": "1493134657072870144"
                            }
                          },
                          "parameters": {
                            "vnetName": {
                              "type": "string"
                            },
                            "subnetName": {
                              "type": "string"
                            },
                            "subnetAddressPrefix": {
                              "type": "string"
                            },
                            "nsgToAttach": {
                              "type": "string",
                              "defaultValue": "None"
                            },
                            "rtToAttach": {
                              "type": "string",
                              "defaultValue": "None"
                            },
                            "privateEndpointNetworkPolicies": {
                              "type": "string",
                              "defaultValue": "Enabled"
                            },
                            "privateLinkServiceNetworkPolicies": {
                              "type": "string"
                            },
                            "serviceEndpoints": {
                              "type": "array"
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Network/virtualNetworks/subnets",
                              "apiVersion": "2021-03-01",
                              "name": "[format('{0}/{1}', parameters('vnetName'), parameters('subnetName'))]",
                              "properties": {
                                "addressPrefix": "[parameters('subnetAddressPrefix')]",
                                "privateEndpointNetworkPolicies": "[parameters('privateEndpointNetworkPolicies')]",
                                "privateLinkServiceNetworkPolicies": "[parameters('privateLinkServiceNetworkPolicies')]",
                                "serviceEndpoints": "[parameters('serviceEndpoints')]",
                                "networkSecurityGroup": "[if(contains(parameters('nsgToAttach'), 'None'), null(), createObject('id', resourceId('Microsoft.Networking/networkSecurityGroups', parameters('nsgToAttach'))))]",
                                "routeTable": "[if(contains(parameters('rtToAttach'), 'None'), null(), createObject('id', resourceId('Microsoft.Networking/routeTables', parameters('rtToAttach'))))]"
                              }
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('rgHub')), 'Microsoft.Resources/deployments', format('dpl-{0}-vNet-Hub', uniqueString(deployment().name, parameters('location'))))]",
                        "vNetHubNSG",
                        "vNetHubRT"
                      ]
                    }
                  ],
                  "outputs": {
                    "fwPublicIpAddress": {
                      "type": "string",
                      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('rgHub')), 'Microsoft.Resources/deployments', format('dpl-{0}-pip-fw', uniqueString(deployment().name, parameters('location'))))).outputs.pipIp.value]"
                    },
                    "vNetName": {
                      "type": "string",
                      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('rgHub')), 'Microsoft.Resources/deployments', format('dpl-{0}-vNet-Hub', uniqueString(deployment().name, parameters('location'))))).outputs.vNetName.value]"
                    },
                    "vNetId": {
                      "type": "string",
                      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('rgHub')), 'Microsoft.Resources/deployments', format('dpl-{0}-vNet-Hub', uniqueString(deployment().name, parameters('location'))))).outputs.vNetId.value]"
                    },
                    "fwPrivateIpAddress": {
                      "type": "string",
                      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('rgHub')), 'Microsoft.Resources/deployments', format('dpl-{0}-fw', uniqueString(deployment().name, parameters('location'))))).outputs.fwPrivateIpAddress.value]"
                    }
                  }
                }
              }
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('dpl-{0}-vnet-spoke-1', uniqueString(deployment().name, deployment().location))]",
              "resourceGroup": "[parameters('rgSpoke01')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "fwRouteNextHopIpAddress": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('rgHub')), 'Microsoft.Resources/deployments', format('dpl-{0}-vnet-hub', uniqueString(deployment().name, deployment().location)))).outputs.fwPrivateIpAddress.value]"
                  },
                  "logAnalyticsWorkspaceId": {
                    "value": "[parameters('logAnalyticsWorkspaceId')]"
                  },
                  "rgVnet": {
                    "value": "[parameters('rgSpoke01')]"
                  },
                  "vNetObject": {
                    "value": "[parameters('vNetSpoke01Object')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.10.61.36676",
                      "templateHash": "4141130034366007347"
                    }
                  },
                  "parameters": {
                    "rgVnet": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {}
                    },
                    "vNetObject": {
                      "type": "object"
                    },
                    "logAnalyticsWorkspaceId": {
                      "type": "string"
                    },
                    "fwRouteNextHopIpAddress": {
                      "type": "string"
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]"
                    }
                  },
                  "variables": {
                    "fwRoutes": [
                      {
                        "name": "Default",
                        "properties": {
                          "addressPrefix": "0.0.0.0/0",
                          "nextHopType": "VirtualAppliance",
                          "nextHopIpAddress": "[parameters('fwRouteNextHopIpAddress')]"
                        }
                      }
                    ]
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('dpl-{0}-{1}', uniqueString(deployment().name, parameters('location')), parameters('vNetObject').vNetName)]",
                      "resourceGroup": "[parameters('rgVnet')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "vNetObject": {
                            "value": "[parameters('vNetObject')]"
                          },
                          "tags": {
                            "value": "[parameters('tags')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.10.61.36676",
                              "templateHash": "1135338002588638283"
                            }
                          },
                          "parameters": {
                            "vNetObject": {
                              "type": "object"
                            },
                            "tags": {
                              "type": "object",
                              "defaultValue": {}
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Network/virtualNetworks",
                              "apiVersion": "2021-03-01",
                              "name": "[parameters('vNetObject').vnetName]",
                              "location": "[resourceGroup().location]",
                              "tags": "[parameters('tags')]",
                              "properties": {
                                "copy": [
                                  {
                                    "name": "subnets",
                                    "count": "[length(parameters('vNetObject').subnets)]",
                                    "input": {
                                      "name": "[parameters('vNetObject').subnets[copyIndex('subnets')].SubnetName]",
                                      "properties": {
                                        "addressPrefix": "[parameters('vNetObject').subnets[copyIndex('subnets')].SubnetAddressSpace]",
                                        "privateEndpointNetworkPolicies": "[parameters('vNetObject').subnets[copyIndex('subnets')].privateEndpointNetworkPolicies]"
                                      }
                                    }
                                  }
                                ],
                                "addressSpace": {
                                  "addressPrefixes": [
                                    "[parameters('vNetObject').vNetAddressSpace]"
                                  ]
                                },
                                "enableDdosProtection": false
                              }
                            }
                          ],
                          "outputs": {
                            "vNetName": {
                              "type": "string",
                              "value": "[parameters('vNetObject').vnetName]"
                            },
                            "vNetId": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.Network/virtualNetworks', parameters('vNetObject').vnetName)]"
                            }
                          }
                        }
                      }
                    },
                    {
                      "condition": "[not(equals(parameters('vNetObject').subnets[copyIndex()].rtToAttach, 'None'))]",
                      "copy": {
                        "name": "vNetRT",
                        "count": "[length(parameters('vNetObject').subnets)]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('dpl-{0}-RT-spoke-{1}', uniqueString(deployment().name, parameters('location')), parameters('vNetObject').subnets[copyIndex()].subnetName)]",
                      "resourceGroup": "[parameters('rgVnet')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "rtName": {
                            "value": "[parameters('vNetObject').subnets[copyIndex()].rtToAttach]"
                          },
                          "routes": {
                            "value": "[if(empty(variables('fwRoutes')), parameters('vNetObject').subnets[copyIndex()].routes, union(parameters('vNetObject').subnets[copyIndex()].routes, variables('fwRoutes')))]"
                          },
                          "tags": {
                            "value": "[parameters('tags')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.10.61.36676",
                              "templateHash": "8857908103978307514"
                            }
                          },
                          "parameters": {
                            "rtName": {
                              "type": "string"
                            },
                            "disableBGPProp": {
                              "type": "bool",
                              "defaultValue": false
                            },
                            "routes": {
                              "type": "array",
                              "defaultValue": []
                            },
                            "tags": {
                              "type": "object",
                              "defaultValue": {}
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Network/routeTables",
                              "apiVersion": "2020-06-01",
                              "name": "[parameters('rtName')]",
                              "location": "[resourceGroup().location]",
                              "properties": {
                                "disableBgpRoutePropagation": "[parameters('disableBGPProp')]",
                                "routes": "[parameters('routes')]"
                              },
                              "tags": "[parameters('tags')]"
                            }
                          ],
                          "outputs": {
                            "id": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.Network/routeTables', parameters('rtName'))]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('rgVnet')), 'Microsoft.Resources/deployments', format('dpl-{0}-{1}', uniqueString(deployment().name, parameters('location')), parameters('vNetObject').vNetName))]"
                      ]
                    },
                    {
                      "condition": "[not(equals(parameters('vNetObject').subnets[copyIndex()].nsgToAttach, 'None'))]",
                      "copy": {
                        "name": "vNetNSG",
                        "count": "[length(parameters('vNetObject').subnets)]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('dpl-{0}-NSG-spoke-{1}', uniqueString(deployment().name, parameters('location')), parameters('vNetObject').subnets[copyIndex()].subnetName)]",
                      "resourceGroup": "[parameters('rgVnet')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "nsgName": {
                            "value": "[parameters('vNetObject').subnets[copyIndex()].nsgToAttach]"
                          },
                          "secRules": {
                            "value": "[parameters('vNetObject').subnets[copyIndex()].securityRules]"
                          },
                          "tags": {
                            "value": "[parameters('tags')]"
                          },
                          "logAnalyticsWorkspaceId": {
                            "value": "[parameters('logAnalyticsWorkspaceId')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.10.61.36676",
                              "templateHash": "1805279730060917740"
                            }
                          },
                          "parameters": {
                            "nsgName": {
                              "type": "string"
                            },
                            "secRules": {
                              "type": "array"
                            },
                            "tags": {
                              "type": "object",
                              "defaultValue": {}
                            },
                            "logAnalyticsWorkspaceId": {
                              "type": "string",
                              "defaultValue": ""
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Network/networkSecurityGroups",
                              "apiVersion": "2020-06-01",
                              "name": "[parameters('nsgName')]",
                              "location": "[resourceGroup().location]",
                              "properties": {
                                "securityRules": "[parameters('secRules')]"
                              },
                              "tags": "[parameters('tags')]"
                            },
                            {
                              "condition": "[not(empty(parameters('logAnalyticsWorkspaceId')))]",
                              "type": "Microsoft.Insights/diagnosticSettings",
                              "apiVersion": "2021-05-01-preview",
                              "scope": "[format('Microsoft.Network/networkSecurityGroups/{0}', parameters('nsgName'))]",
                              "name": "diagNSG",
                              "properties": {
                                "workspaceId": "[parameters('logAnalyticsWorkspaceId')]",
                                "logs": [
                                  {
                                    "category": "NetworkSecurityGroupEvent",
                                    "enabled": true
                                  },
                                  {
                                    "category": "NetworkSecurityGroupRuleCounter",
                                    "enabled": true
                                  }
                                ]
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('nsgName'))]"
                              ]
                            }
                          ],
                          "outputs": {
                            "id": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('nsgName'))]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('rgVnet')), 'Microsoft.Resources/deployments', format('dpl-{0}-{1}', uniqueString(deployment().name, parameters('location')), parameters('vNetObject').vNetName))]",
                        "vNetRT"
                      ]
                    },
                    {
                      "copy": {
                        "name": "vNetNsgRtAttach",
                        "count": "[length(parameters('vNetObject').subnets)]",
                        "mode": "serial",
                        "batchSize": 1
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('dpl-{0}-attach-{1}', uniqueString(deployment().name, parameters('location')), parameters('vNetObject').subnets[copyIndex()].subnetName)]",
                      "resourceGroup": "[parameters('rgVnet')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "vnetName": {
                            "value": "[parameters('vNetObject').subnets[copyIndex()].vNetName]"
                          },
                          "subnetName": {
                            "value": "[parameters('vNetObject').subnets[copyIndex()].subnetName]"
                          },
                          "subnetAddressPrefix": {
                            "value": "[parameters('vNetObject').subnets[copyIndex()].SubnetAddressSpace]"
                          },
                          "privateEndpointNetworkPolicies": {
                            "value": "[parameters('vNetObject').subnets[copyIndex()].privateEndpointNetworkPolicies]"
                          },
                          "rtToAttach": {
                            "value": "[parameters('vNetObject').subnets[copyIndex()].rtToAttach]"
                          },
                          "nsgToAttach": {
                            "value": "[parameters('vNetObject').subnets[copyIndex()].nsgToAttach]"
                          },
                          "privateLinkServiceNetworkPolicies": {
                            "value": "[parameters('vNetObject').subnets[copyIndex()].privateLinkServiceNetworkPolicies]"
                          },
                          "serviceEndpoints": {
                            "value": "[parameters('vNetObject').subnets[copyIndex()].serviceEndpoints]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.10.61.36676",
                              "templateHash": "1493134657072870144"
                            }
                          },
                          "parameters": {
                            "vnetName": {
                              "type": "string"
                            },
                            "subnetName": {
                              "type": "string"
                            },
                            "subnetAddressPrefix": {
                              "type": "string"
                            },
                            "nsgToAttach": {
                              "type": "string",
                              "defaultValue": "None"
                            },
                            "rtToAttach": {
                              "type": "string",
                              "defaultValue": "None"
                            },
                            "privateEndpointNetworkPolicies": {
                              "type": "string",
                              "defaultValue": "Enabled"
                            },
                            "privateLinkServiceNetworkPolicies": {
                              "type": "string"
                            },
                            "serviceEndpoints": {
                              "type": "array"
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Network/virtualNetworks/subnets",
                              "apiVersion": "2021-03-01",
                              "name": "[format('{0}/{1}', parameters('vnetName'), parameters('subnetName'))]",
                              "properties": {
                                "addressPrefix": "[parameters('subnetAddressPrefix')]",
                                "privateEndpointNetworkPolicies": "[parameters('privateEndpointNetworkPolicies')]",
                                "privateLinkServiceNetworkPolicies": "[parameters('privateLinkServiceNetworkPolicies')]",
                                "serviceEndpoints": "[parameters('serviceEndpoints')]",
                                "networkSecurityGroup": "[if(contains(parameters('nsgToAttach'), 'None'), null(), createObject('id', resourceId('Microsoft.Networking/networkSecurityGroups', parameters('nsgToAttach'))))]",
                                "routeTable": "[if(contains(parameters('rtToAttach'), 'None'), null(), createObject('id', resourceId('Microsoft.Networking/routeTables', parameters('rtToAttach'))))]"
                              }
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('rgVnet')), 'Microsoft.Resources/deployments', format('dpl-{0}-{1}', uniqueString(deployment().name, parameters('location')), parameters('vNetObject').vNetName))]",
                        "vNetNSG",
                        "vNetRT"
                      ]
                    }
                  ],
                  "outputs": {
                    "vNetName": {
                      "type": "string",
                      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('rgVnet')), 'Microsoft.Resources/deployments', format('dpl-{0}-{1}', uniqueString(deployment().name, parameters('location')), parameters('vNetObject').vNetName))).outputs.vNetName.value]"
                    },
                    "vNetId": {
                      "type": "string",
                      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('rgVnet')), 'Microsoft.Resources/deployments', format('dpl-{0}-{1}', uniqueString(deployment().name, parameters('location')), parameters('vNetObject').vNetName))).outputs.vNetId.value]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('rgHub')), 'Microsoft.Resources/deployments', format('dpl-{0}-vnet-hub', uniqueString(deployment().name, deployment().location)))]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('dpl-{0}-vnet-spoke-2', uniqueString(deployment().name, deployment().location))]",
              "resourceGroup": "[parameters('rgSpoke02')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "fwRouteNextHopIpAddress": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('rgHub')), 'Microsoft.Resources/deployments', format('dpl-{0}-vnet-hub', uniqueString(deployment().name, deployment().location)))).outputs.fwPrivateIpAddress.value]"
                  },
                  "logAnalyticsWorkspaceId": {
                    "value": "[parameters('logAnalyticsWorkspaceId')]"
                  },
                  "rgVnet": {
                    "value": "[parameters('rgSpoke02')]"
                  },
                  "vNetObject": {
                    "value": "[parameters('vNetSpoke02Object')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.10.61.36676",
                      "templateHash": "4141130034366007347"
                    }
                  },
                  "parameters": {
                    "rgVnet": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {}
                    },
                    "vNetObject": {
                      "type": "object"
                    },
                    "logAnalyticsWorkspaceId": {
                      "type": "string"
                    },
                    "fwRouteNextHopIpAddress": {
                      "type": "string"
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]"
                    }
                  },
                  "variables": {
                    "fwRoutes": [
                      {
                        "name": "Default",
                        "properties": {
                          "addressPrefix": "0.0.0.0/0",
                          "nextHopType": "VirtualAppliance",
                          "nextHopIpAddress": "[parameters('fwRouteNextHopIpAddress')]"
                        }
                      }
                    ]
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('dpl-{0}-{1}', uniqueString(deployment().name, parameters('location')), parameters('vNetObject').vNetName)]",
                      "resourceGroup": "[parameters('rgVnet')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "vNetObject": {
                            "value": "[parameters('vNetObject')]"
                          },
                          "tags": {
                            "value": "[parameters('tags')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.10.61.36676",
                              "templateHash": "1135338002588638283"
                            }
                          },
                          "parameters": {
                            "vNetObject": {
                              "type": "object"
                            },
                            "tags": {
                              "type": "object",
                              "defaultValue": {}
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Network/virtualNetworks",
                              "apiVersion": "2021-03-01",
                              "name": "[parameters('vNetObject').vnetName]",
                              "location": "[resourceGroup().location]",
                              "tags": "[parameters('tags')]",
                              "properties": {
                                "copy": [
                                  {
                                    "name": "subnets",
                                    "count": "[length(parameters('vNetObject').subnets)]",
                                    "input": {
                                      "name": "[parameters('vNetObject').subnets[copyIndex('subnets')].SubnetName]",
                                      "properties": {
                                        "addressPrefix": "[parameters('vNetObject').subnets[copyIndex('subnets')].SubnetAddressSpace]",
                                        "privateEndpointNetworkPolicies": "[parameters('vNetObject').subnets[copyIndex('subnets')].privateEndpointNetworkPolicies]"
                                      }
                                    }
                                  }
                                ],
                                "addressSpace": {
                                  "addressPrefixes": [
                                    "[parameters('vNetObject').vNetAddressSpace]"
                                  ]
                                },
                                "enableDdosProtection": false
                              }
                            }
                          ],
                          "outputs": {
                            "vNetName": {
                              "type": "string",
                              "value": "[parameters('vNetObject').vnetName]"
                            },
                            "vNetId": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.Network/virtualNetworks', parameters('vNetObject').vnetName)]"
                            }
                          }
                        }
                      }
                    },
                    {
                      "condition": "[not(equals(parameters('vNetObject').subnets[copyIndex()].rtToAttach, 'None'))]",
                      "copy": {
                        "name": "vNetRT",
                        "count": "[length(parameters('vNetObject').subnets)]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('dpl-{0}-RT-spoke-{1}', uniqueString(deployment().name, parameters('location')), parameters('vNetObject').subnets[copyIndex()].subnetName)]",
                      "resourceGroup": "[parameters('rgVnet')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "rtName": {
                            "value": "[parameters('vNetObject').subnets[copyIndex()].rtToAttach]"
                          },
                          "routes": {
                            "value": "[if(empty(variables('fwRoutes')), parameters('vNetObject').subnets[copyIndex()].routes, union(parameters('vNetObject').subnets[copyIndex()].routes, variables('fwRoutes')))]"
                          },
                          "tags": {
                            "value": "[parameters('tags')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.10.61.36676",
                              "templateHash": "8857908103978307514"
                            }
                          },
                          "parameters": {
                            "rtName": {
                              "type": "string"
                            },
                            "disableBGPProp": {
                              "type": "bool",
                              "defaultValue": false
                            },
                            "routes": {
                              "type": "array",
                              "defaultValue": []
                            },
                            "tags": {
                              "type": "object",
                              "defaultValue": {}
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Network/routeTables",
                              "apiVersion": "2020-06-01",
                              "name": "[parameters('rtName')]",
                              "location": "[resourceGroup().location]",
                              "properties": {
                                "disableBgpRoutePropagation": "[parameters('disableBGPProp')]",
                                "routes": "[parameters('routes')]"
                              },
                              "tags": "[parameters('tags')]"
                            }
                          ],
                          "outputs": {
                            "id": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.Network/routeTables', parameters('rtName'))]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('rgVnet')), 'Microsoft.Resources/deployments', format('dpl-{0}-{1}', uniqueString(deployment().name, parameters('location')), parameters('vNetObject').vNetName))]"
                      ]
                    },
                    {
                      "condition": "[not(equals(parameters('vNetObject').subnets[copyIndex()].nsgToAttach, 'None'))]",
                      "copy": {
                        "name": "vNetNSG",
                        "count": "[length(parameters('vNetObject').subnets)]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('dpl-{0}-NSG-spoke-{1}', uniqueString(deployment().name, parameters('location')), parameters('vNetObject').subnets[copyIndex()].subnetName)]",
                      "resourceGroup": "[parameters('rgVnet')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "nsgName": {
                            "value": "[parameters('vNetObject').subnets[copyIndex()].nsgToAttach]"
                          },
                          "secRules": {
                            "value": "[parameters('vNetObject').subnets[copyIndex()].securityRules]"
                          },
                          "tags": {
                            "value": "[parameters('tags')]"
                          },
                          "logAnalyticsWorkspaceId": {
                            "value": "[parameters('logAnalyticsWorkspaceId')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.10.61.36676",
                              "templateHash": "1805279730060917740"
                            }
                          },
                          "parameters": {
                            "nsgName": {
                              "type": "string"
                            },
                            "secRules": {
                              "type": "array"
                            },
                            "tags": {
                              "type": "object",
                              "defaultValue": {}
                            },
                            "logAnalyticsWorkspaceId": {
                              "type": "string",
                              "defaultValue": ""
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Network/networkSecurityGroups",
                              "apiVersion": "2020-06-01",
                              "name": "[parameters('nsgName')]",
                              "location": "[resourceGroup().location]",
                              "properties": {
                                "securityRules": "[parameters('secRules')]"
                              },
                              "tags": "[parameters('tags')]"
                            },
                            {
                              "condition": "[not(empty(parameters('logAnalyticsWorkspaceId')))]",
                              "type": "Microsoft.Insights/diagnosticSettings",
                              "apiVersion": "2021-05-01-preview",
                              "scope": "[format('Microsoft.Network/networkSecurityGroups/{0}', parameters('nsgName'))]",
                              "name": "diagNSG",
                              "properties": {
                                "workspaceId": "[parameters('logAnalyticsWorkspaceId')]",
                                "logs": [
                                  {
                                    "category": "NetworkSecurityGroupEvent",
                                    "enabled": true
                                  },
                                  {
                                    "category": "NetworkSecurityGroupRuleCounter",
                                    "enabled": true
                                  }
                                ]
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('nsgName'))]"
                              ]
                            }
                          ],
                          "outputs": {
                            "id": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('nsgName'))]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('rgVnet')), 'Microsoft.Resources/deployments', format('dpl-{0}-{1}', uniqueString(deployment().name, parameters('location')), parameters('vNetObject').vNetName))]",
                        "vNetRT"
                      ]
                    },
                    {
                      "copy": {
                        "name": "vNetNsgRtAttach",
                        "count": "[length(parameters('vNetObject').subnets)]",
                        "mode": "serial",
                        "batchSize": 1
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('dpl-{0}-attach-{1}', uniqueString(deployment().name, parameters('location')), parameters('vNetObject').subnets[copyIndex()].subnetName)]",
                      "resourceGroup": "[parameters('rgVnet')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "vnetName": {
                            "value": "[parameters('vNetObject').subnets[copyIndex()].vNetName]"
                          },
                          "subnetName": {
                            "value": "[parameters('vNetObject').subnets[copyIndex()].subnetName]"
                          },
                          "subnetAddressPrefix": {
                            "value": "[parameters('vNetObject').subnets[copyIndex()].SubnetAddressSpace]"
                          },
                          "privateEndpointNetworkPolicies": {
                            "value": "[parameters('vNetObject').subnets[copyIndex()].privateEndpointNetworkPolicies]"
                          },
                          "rtToAttach": {
                            "value": "[parameters('vNetObject').subnets[copyIndex()].rtToAttach]"
                          },
                          "nsgToAttach": {
                            "value": "[parameters('vNetObject').subnets[copyIndex()].nsgToAttach]"
                          },
                          "privateLinkServiceNetworkPolicies": {
                            "value": "[parameters('vNetObject').subnets[copyIndex()].privateLinkServiceNetworkPolicies]"
                          },
                          "serviceEndpoints": {
                            "value": "[parameters('vNetObject').subnets[copyIndex()].serviceEndpoints]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.10.61.36676",
                              "templateHash": "1493134657072870144"
                            }
                          },
                          "parameters": {
                            "vnetName": {
                              "type": "string"
                            },
                            "subnetName": {
                              "type": "string"
                            },
                            "subnetAddressPrefix": {
                              "type": "string"
                            },
                            "nsgToAttach": {
                              "type": "string",
                              "defaultValue": "None"
                            },
                            "rtToAttach": {
                              "type": "string",
                              "defaultValue": "None"
                            },
                            "privateEndpointNetworkPolicies": {
                              "type": "string",
                              "defaultValue": "Enabled"
                            },
                            "privateLinkServiceNetworkPolicies": {
                              "type": "string"
                            },
                            "serviceEndpoints": {
                              "type": "array"
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Network/virtualNetworks/subnets",
                              "apiVersion": "2021-03-01",
                              "name": "[format('{0}/{1}', parameters('vnetName'), parameters('subnetName'))]",
                              "properties": {
                                "addressPrefix": "[parameters('subnetAddressPrefix')]",
                                "privateEndpointNetworkPolicies": "[parameters('privateEndpointNetworkPolicies')]",
                                "privateLinkServiceNetworkPolicies": "[parameters('privateLinkServiceNetworkPolicies')]",
                                "serviceEndpoints": "[parameters('serviceEndpoints')]",
                                "networkSecurityGroup": "[if(contains(parameters('nsgToAttach'), 'None'), null(), createObject('id', resourceId('Microsoft.Networking/networkSecurityGroups', parameters('nsgToAttach'))))]",
                                "routeTable": "[if(contains(parameters('rtToAttach'), 'None'), null(), createObject('id', resourceId('Microsoft.Networking/routeTables', parameters('rtToAttach'))))]"
                              }
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('rgVnet')), 'Microsoft.Resources/deployments', format('dpl-{0}-{1}', uniqueString(deployment().name, parameters('location')), parameters('vNetObject').vNetName))]",
                        "vNetNSG",
                        "vNetRT"
                      ]
                    }
                  ],
                  "outputs": {
                    "vNetName": {
                      "type": "string",
                      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('rgVnet')), 'Microsoft.Resources/deployments', format('dpl-{0}-{1}', uniqueString(deployment().name, parameters('location')), parameters('vNetObject').vNetName))).outputs.vNetName.value]"
                    },
                    "vNetId": {
                      "type": "string",
                      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('rgVnet')), 'Microsoft.Resources/deployments', format('dpl-{0}-{1}', uniqueString(deployment().name, parameters('location')), parameters('vNetObject').vNetName))).outputs.vNetId.value]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('rgHub')), 'Microsoft.Resources/deployments', format('dpl-{0}-vnet-hub', uniqueString(deployment().name, deployment().location)))]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('dpl-{0}-peering-hub-spoke01', uniqueString(deployment().name, deployment().location))]",
              "resourceGroup": "[parameters('rgHub')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "vnetSourceName": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('rgHub')), 'Microsoft.Resources/deployments', format('dpl-{0}-vnet-hub', uniqueString(deployment().name, deployment().location)))).outputs.vNetName.value]"
                  },
                  "peeringName": {
                    "value": "[format('{0}-to-{1}', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('rgHub')), 'Microsoft.Resources/deployments', format('dpl-{0}-vnet-hub', uniqueString(deployment().name, deployment().location)))).outputs.vNetName.value, reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('rgSpoke01')), 'Microsoft.Resources/deployments', format('dpl-{0}-vnet-spoke-1', uniqueString(deployment().name, deployment().location)))).outputs.vNetName.value)]"
                  },
                  "vnetTargetId": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('rgSpoke01')), 'Microsoft.Resources/deployments', format('dpl-{0}-vnet-spoke-1', uniqueString(deployment().name, deployment().location)))).outputs.vNetId.value]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.10.61.36676",
                      "templateHash": "15769953375790046071"
                    }
                  },
                  "parameters": {
                    "vnetSourceName": {
                      "type": "string"
                    },
                    "peeringName": {
                      "type": "string"
                    },
                    "vnetTargetId": {
                      "type": "string"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/virtualNetworks/virtualNetworkPeerings",
                      "apiVersion": "2020-06-01",
                      "name": "[format('{0}/{1}', parameters('vnetSourceName'), parameters('peeringName'))]",
                      "properties": {
                        "allowVirtualNetworkAccess": true,
                        "allowForwardedTraffic": true,
                        "allowGatewayTransit": false,
                        "useRemoteGateways": false,
                        "remoteVirtualNetwork": {
                          "id": "[parameters('vnetTargetId')]"
                        }
                      }
                    }
                  ]
                }
              },
              "dependsOn": [
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('rgHub')), 'Microsoft.Resources/deployments', format('dpl-{0}-vnet-hub', uniqueString(deployment().name, deployment().location)))]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('rgSpoke01')), 'Microsoft.Resources/deployments', format('dpl-{0}-vnet-spoke-1', uniqueString(deployment().name, deployment().location)))]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('dpl-{0}-peering-spoke01-hub', uniqueString(deployment().name, deployment().location))]",
              "resourceGroup": "[parameters('rgSpoke01')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "vnetSourceName": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('rgSpoke01')), 'Microsoft.Resources/deployments', format('dpl-{0}-vnet-spoke-1', uniqueString(deployment().name, deployment().location)))).outputs.vNetName.value]"
                  },
                  "peeringName": {
                    "value": "[format('{0}-to-{1}', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('rgSpoke01')), 'Microsoft.Resources/deployments', format('dpl-{0}-vnet-spoke-1', uniqueString(deployment().name, deployment().location)))).outputs.vNetName.value, reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('rgHub')), 'Microsoft.Resources/deployments', format('dpl-{0}-vnet-hub', uniqueString(deployment().name, deployment().location)))).outputs.vNetName.value)]"
                  },
                  "vnetTargetId": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('rgHub')), 'Microsoft.Resources/deployments', format('dpl-{0}-vnet-hub', uniqueString(deployment().name, deployment().location)))).outputs.vNetId.value]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.10.61.36676",
                      "templateHash": "15769953375790046071"
                    }
                  },
                  "parameters": {
                    "vnetSourceName": {
                      "type": "string"
                    },
                    "peeringName": {
                      "type": "string"
                    },
                    "vnetTargetId": {
                      "type": "string"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/virtualNetworks/virtualNetworkPeerings",
                      "apiVersion": "2020-06-01",
                      "name": "[format('{0}/{1}', parameters('vnetSourceName'), parameters('peeringName'))]",
                      "properties": {
                        "allowVirtualNetworkAccess": true,
                        "allowForwardedTraffic": true,
                        "allowGatewayTransit": false,
                        "useRemoteGateways": false,
                        "remoteVirtualNetwork": {
                          "id": "[parameters('vnetTargetId')]"
                        }
                      }
                    }
                  ]
                }
              },
              "dependsOn": [
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('rgHub')), 'Microsoft.Resources/deployments', format('dpl-{0}-vnet-hub', uniqueString(deployment().name, deployment().location)))]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('rgSpoke01')), 'Microsoft.Resources/deployments', format('dpl-{0}-vnet-spoke-1', uniqueString(deployment().name, deployment().location)))]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('dpl-{0}-peering-hub-spoke02', uniqueString(deployment().name, deployment().location))]",
              "resourceGroup": "[parameters('rgHub')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "vnetSourceName": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('rgHub')), 'Microsoft.Resources/deployments', format('dpl-{0}-vnet-hub', uniqueString(deployment().name, deployment().location)))).outputs.vNetName.value]"
                  },
                  "peeringName": {
                    "value": "[format('{0}-to-{1}', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('rgHub')), 'Microsoft.Resources/deployments', format('dpl-{0}-vnet-hub', uniqueString(deployment().name, deployment().location)))).outputs.vNetName.value, reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('rgSpoke02')), 'Microsoft.Resources/deployments', format('dpl-{0}-vnet-spoke-2', uniqueString(deployment().name, deployment().location)))).outputs.vNetName.value)]"
                  },
                  "vnetTargetId": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('rgSpoke02')), 'Microsoft.Resources/deployments', format('dpl-{0}-vnet-spoke-2', uniqueString(deployment().name, deployment().location)))).outputs.vNetId.value]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.10.61.36676",
                      "templateHash": "15769953375790046071"
                    }
                  },
                  "parameters": {
                    "vnetSourceName": {
                      "type": "string"
                    },
                    "peeringName": {
                      "type": "string"
                    },
                    "vnetTargetId": {
                      "type": "string"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/virtualNetworks/virtualNetworkPeerings",
                      "apiVersion": "2020-06-01",
                      "name": "[format('{0}/{1}', parameters('vnetSourceName'), parameters('peeringName'))]",
                      "properties": {
                        "allowVirtualNetworkAccess": true,
                        "allowForwardedTraffic": true,
                        "allowGatewayTransit": false,
                        "useRemoteGateways": false,
                        "remoteVirtualNetwork": {
                          "id": "[parameters('vnetTargetId')]"
                        }
                      }
                    }
                  ]
                }
              },
              "dependsOn": [
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('rgHub')), 'Microsoft.Resources/deployments', format('dpl-{0}-vnet-hub', uniqueString(deployment().name, deployment().location)))]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('rgSpoke02')), 'Microsoft.Resources/deployments', format('dpl-{0}-vnet-spoke-2', uniqueString(deployment().name, deployment().location)))]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('dpl-{0}-peering-spoke02-hub', uniqueString(deployment().name, deployment().location))]",
              "resourceGroup": "[parameters('rgSpoke02')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "vnetSourceName": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('rgSpoke02')), 'Microsoft.Resources/deployments', format('dpl-{0}-vnet-spoke-2', uniqueString(deployment().name, deployment().location)))).outputs.vNetName.value]"
                  },
                  "peeringName": {
                    "value": "[format('{0}-to-{1}', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('rgSpoke02')), 'Microsoft.Resources/deployments', format('dpl-{0}-vnet-spoke-2', uniqueString(deployment().name, deployment().location)))).outputs.vNetName.value, reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('rgHub')), 'Microsoft.Resources/deployments', format('dpl-{0}-vnet-hub', uniqueString(deployment().name, deployment().location)))).outputs.vNetName.value)]"
                  },
                  "vnetTargetId": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('rgHub')), 'Microsoft.Resources/deployments', format('dpl-{0}-vnet-hub', uniqueString(deployment().name, deployment().location)))).outputs.vNetId.value]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.10.61.36676",
                      "templateHash": "15769953375790046071"
                    }
                  },
                  "parameters": {
                    "vnetSourceName": {
                      "type": "string"
                    },
                    "peeringName": {
                      "type": "string"
                    },
                    "vnetTargetId": {
                      "type": "string"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/virtualNetworks/virtualNetworkPeerings",
                      "apiVersion": "2020-06-01",
                      "name": "[format('{0}/{1}', parameters('vnetSourceName'), parameters('peeringName'))]",
                      "properties": {
                        "allowVirtualNetworkAccess": true,
                        "allowForwardedTraffic": true,
                        "allowGatewayTransit": false,
                        "useRemoteGateways": false,
                        "remoteVirtualNetwork": {
                          "id": "[parameters('vnetTargetId')]"
                        }
                      }
                    }
                  ]
                }
              },
              "dependsOn": [
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('rgHub')), 'Microsoft.Resources/deployments', format('dpl-{0}-vnet-hub', uniqueString(deployment().name, deployment().location)))]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('rgSpoke02')), 'Microsoft.Resources/deployments', format('dpl-{0}-vnet-spoke-2', uniqueString(deployment().name, deployment().location)))]"
              ]
            },
            {
              "condition": "[not(parameters('ignoreDnsZoneNwLinks'))]",
              "copy": {
                "name": "privateDnsZones",
                "count": "[length(parameters('privateDnsZoneNames'))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('dpl-{0}-dnsZone-{1}', uniqueString(deployment().name, deployment().location), parameters('privateDnsZoneNames')[copyIndex()])]",
              "resourceGroup": "[parameters('rgHub')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "privateDnsZoneName": {
                    "value": "[parameters('privateDnsZoneNames')[copyIndex()]]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.10.61.36676",
                      "templateHash": "14004457062261306802"
                    }
                  },
                  "parameters": {
                    "privateDnsZoneName": {
                      "type": "string",
                      "defaultValue": ""
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {}
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/privateDnsZones",
                      "apiVersion": "2020-06-01",
                      "name": "[parameters('privateDnsZoneName')]",
                      "tags": "[parameters('tags')]",
                      "location": "global"
                    }
                  ]
                }
              },
              "dependsOn": [
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('rgHub')), 'Microsoft.Resources/deployments', format('dpl-{0}-peering-hub-spoke01', uniqueString(deployment().name, deployment().location)))]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('rgHub')), 'Microsoft.Resources/deployments', format('dpl-{0}-peering-hub-spoke02', uniqueString(deployment().name, deployment().location)))]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('rgSpoke01')), 'Microsoft.Resources/deployments', format('dpl-{0}-peering-spoke01-hub', uniqueString(deployment().name, deployment().location)))]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('rgSpoke02')), 'Microsoft.Resources/deployments', format('dpl-{0}-peering-spoke02-hub', uniqueString(deployment().name, deployment().location)))]"
              ]
            },
            {
              "condition": "[not(parameters('ignoreDnsZoneNwLinks'))]",
              "copy": {
                "name": "privateDnsVirtualNwLink",
                "count": "[length(parameters('privateDnsZoneNames'))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('dpl-{0}-dnsZoneNwL-{1}', uniqueString(deployment().name, deployment().location), copyIndex())]",
              "resourceGroup": "[parameters('rgHub')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "privateDnsZoneName": {
                    "value": "[parameters('privateDnsZoneNames')[copyIndex()]]"
                  },
                  "virtualNetworkLinks": {
                    "value": [
                      {
                        "vNetName": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('rgHub')), 'Microsoft.Resources/deployments', format('dpl-{0}-vnet-hub', uniqueString(deployment().name, deployment().location)))).outputs.vNetName.value]",
                        "vNetId": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('rgHub')), 'Microsoft.Resources/deployments', format('dpl-{0}-vnet-hub', uniqueString(deployment().name, deployment().location)))).outputs.vNetId.value]"
                      },
                      {
                        "vNetName": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('rgSpoke01')), 'Microsoft.Resources/deployments', format('dpl-{0}-vnet-spoke-1', uniqueString(deployment().name, deployment().location)))).outputs.vNetName.value]",
                        "vNetId": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('rgSpoke01')), 'Microsoft.Resources/deployments', format('dpl-{0}-vnet-spoke-1', uniqueString(deployment().name, deployment().location)))).outputs.vNetId.value]"
                      },
                      {
                        "vNetName": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('rgSpoke02')), 'Microsoft.Resources/deployments', format('dpl-{0}-vnet-spoke-2', uniqueString(deployment().name, deployment().location)))).outputs.vNetName.value]",
                        "vNetId": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('rgSpoke02')), 'Microsoft.Resources/deployments', format('dpl-{0}-vnet-spoke-2', uniqueString(deployment().name, deployment().location)))).outputs.vNetId.value]"
                      }
                    ]
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.10.61.36676",
                      "templateHash": "9491151423323881380"
                    }
                  },
                  "parameters": {
                    "privateDnsZoneName": {
                      "type": "string"
                    },
                    "virtualNetworkLinks": {
                      "type": "array"
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {}
                    }
                  },
                  "resources": [
                    {
                      "copy": {
                        "name": "privateDnsVirtualNetworkLink",
                        "count": "[length(parameters('virtualNetworkLinks'))]"
                      },
                      "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
                      "apiVersion": "2020-06-01",
                      "name": "[format('{0}/{1}', parameters('privateDnsZoneName'), parameters('virtualNetworkLinks')[copyIndex()].vNetName)]",
                      "location": "global",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "registrationEnabled": false,
                        "virtualNetwork": {
                          "id": "[parameters('virtualNetworkLinks')[copyIndex()].vNetId]"
                        }
                      }
                    }
                  ]
                }
              },
              "dependsOn": [
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('rgHub')), 'Microsoft.Resources/deployments', format('dpl-{0}-vnet-hub', uniqueString(deployment().name, deployment().location)))]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('rgSpoke01')), 'Microsoft.Resources/deployments', format('dpl-{0}-vnet-spoke-1', uniqueString(deployment().name, deployment().location)))]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('rgSpoke02')), 'Microsoft.Resources/deployments', format('dpl-{0}-vnet-spoke-2', uniqueString(deployment().name, deployment().location)))]",
                "privateDnsZones"
              ]
            }
          ],
          "outputs": {
            "fwPrivateIpAddress": {
              "type": "string",
              "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('rgHub')), 'Microsoft.Resources/deployments', format('dpl-{0}-vnet-hub', uniqueString(deployment().name, deployment().location)))).outputs.fwPrivateIpAddress.value]"
            },
            "fwPublicIpAddress": {
              "type": "string",
              "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('rgHub')), 'Microsoft.Resources/deployments', format('dpl-{0}-vnet-hub', uniqueString(deployment().name, deployment().location)))).outputs.fwPublicIpAddress.value]"
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgHub')), 'Microsoft.Resources/deployments', format('dpl-{0}-logAnalytics', uniqueString(deployment().name, deployment().location)))]",
        "rgModule"
      ]
    },
    {
      "condition": "[parameters('deployVPNGw')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('dpl-{0}-vpnGw', uniqueString(deployment().name, deployment().location))]",
      "resourceGroup": "[variables('rgHub')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[variables('vpnGwName')]"
          },
          "virtualNetworkGatewaySku": {
            "value": "VpnGw2"
          },
          "virtualNetworkGatewayType": {
            "value": "Vpn"
          },
          "vNetResourceId": {
            "value": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgHub')), 'Microsoft.Network/virtualNetworks', variables('vNetHubObject').vNetName)]"
          },
          "activeActive": {
            "value": false
          },
          "enableBgp": {
            "value": false
          },
          "vpnType": {
            "value": "RouteBased"
          },
          "vpnClientAddressPoolPrefix": {
            "value": "[variables('vpnClientAddressPoolPrefix')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.10.61.36676",
              "templateHash": "9523962942625287225"
            }
          },
          "parameters": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "Required. Specifies the Virtual Network Gateway name."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Optional. Location for all resources."
              }
            },
            "gatewayPipName": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Optional. Specifies the name of the Public IP used by the Virtual Network Gateway. If it's not provided, a '-pip' suffix will be appended to the gateway's name."
              }
            },
            "publicIPPrefixResourceId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Resource ID of the Public IP Prefix object. This is only needed if you want your Public IPs created in a PIP Prefix."
              }
            },
            "publicIpZones": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Optional. Specifies the zones of the Public IP address. Basic IP SKU does not support Availability Zones."
              }
            },
            "domainNameLabel": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Optional. DNS name(s) of the Public IP resource(s). If you enabled active-active configuration, you need to provide 2 DNS names, if you want to use this feature. A region specific suffix will be appended to it, e.g.: your-DNS-name.westeurope.cloudapp.azure.com"
              }
            },
            "virtualNetworkGatewayType": {
              "type": "string",
              "allowedValues": [
                "Vpn",
                "ExpressRoute"
              ],
              "metadata": {
                "description": "Required. Specifies the gateway type. E.g. VPN, ExpressRoute"
              }
            },
            "virtualNetworkGatewaySku": {
              "type": "string",
              "allowedValues": [
                "Basic",
                "VpnGw1",
                "VpnGw2",
                "VpnGw3",
                "VpnGw1AZ",
                "VpnGw2AZ",
                "VpnGw3AZ",
                "Standard",
                "HighPerformance",
                "UltraPerformance",
                "ErGw1AZ",
                "ErGw2AZ",
                "ErGw3AZ"
              ],
              "metadata": {
                "description": "Required. The Sku of the Gateway."
              }
            },
            "vpnType": {
              "type": "string",
              "defaultValue": "RouteBased",
              "allowedValues": [
                "PolicyBased",
                "RouteBased"
              ],
              "metadata": {
                "description": "Required. Specifies the VPN type"
              }
            },
            "vNetResourceId": {
              "type": "string",
              "metadata": {
                "description": "Required. Virtual Network resource ID"
              }
            },
            "activeActive": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Value to specify if the Gateway should be deployed in active-active or active-passive configuration"
              }
            },
            "enableBgp": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Value to specify if BGP is enabled or not"
              }
            },
            "asn": {
              "type": "int",
              "defaultValue": 65815,
              "metadata": {
                "description": "Optional. ASN value"
              }
            },
            "vpnClientAddressPoolPrefix": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. The IP address range from which VPN clients will receive an IP address when connected. Range specified must not overlap with on-premise network."
              }
            },
            "clientRootCertData": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Client root certificate data used to authenticate VPN clients."
              }
            },
            "clientRevokedCertThumbprint": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Thumbprint of the revoked certificate. This would revoke VPN client certificates matching this thumbprint from connecting to the VNet."
              }
            },
            "diagnosticLogsRetentionInDays": {
              "type": "int",
              "defaultValue": 365,
              "maxValue": 365,
              "minValue": 0,
              "metadata": {
                "description": "Optional. Specifies the number of days that logs will be kept for; a value of 0 will retain data indefinitely."
              }
            },
            "diagnosticStorageAccountId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Resource ID of the diagnostic storage account."
              }
            },
            "workspaceId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Resource ID of log analytics."
              }
            },
            "eventHubAuthorizationRuleId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Resource ID of the event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
              }
            },
            "eventHubName": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Name of the event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category."
              }
            },
            "roleAssignments": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Optional. Array of role assignment objects that contain the 'roleDefinitionIdOrName' and 'principalId' to define RBAC role assignments on this resource. In the roleDefinitionIdOrName attribute, you can provide either the display name of the role definition, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'"
              }
            },
            "lock": {
              "type": "string",
              "defaultValue": "NotSpecified",
              "metadata": {
                "description": "Optional. Specify the type of lock."
              },
              "allowedValues": [
                "CanNotDelete",
                "NotSpecified",
                "ReadOnly"
              ]
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. Tags of the resource."
              }
            },
            "cuaId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Customer Usage Attribution ID (GUID). This GUID must be previously registered"
              }
            },
            "publicIpLogsToEnable": {
              "type": "array",
              "defaultValue": [
                "DDoSProtectionNotifications",
                "DDoSMitigationFlowLogs",
                "DDoSMitigationReports"
              ],
              "allowedValues": [
                "DDoSProtectionNotifications",
                "DDoSMitigationFlowLogs",
                "DDoSMitigationReports"
              ],
              "metadata": {
                "description": "Optional. The name of logs that will be streamed."
              }
            },
            "virtualNetworkGatewayLogsToEnable": {
              "type": "array",
              "defaultValue": [
                "GatewayDiagnosticLog",
                "TunnelDiagnosticLog",
                "RouteDiagnosticLog",
                "IKEDiagnosticLog",
                "P2SDiagnosticLog"
              ],
              "allowedValues": [
                "GatewayDiagnosticLog",
                "TunnelDiagnosticLog",
                "RouteDiagnosticLog",
                "IKEDiagnosticLog",
                "P2SDiagnosticLog"
              ],
              "metadata": {
                "description": "Optional. The name of logs that will be streamed."
              }
            },
            "metricsToEnable": {
              "type": "array",
              "defaultValue": [
                "AllMetrics"
              ],
              "allowedValues": [
                "AllMetrics"
              ],
              "metadata": {
                "description": "Optional. The name of metrics that will be streamed."
              }
            }
          },
          "variables": {
            "copy": [
              {
                "name": "virtualNetworkGatewayDiagnosticsLogs",
                "count": "[length(parameters('virtualNetworkGatewayLogsToEnable'))]",
                "input": {
                  "category": "[parameters('virtualNetworkGatewayLogsToEnable')[copyIndex('virtualNetworkGatewayDiagnosticsLogs')]]",
                  "enabled": true,
                  "retentionPolicy": {
                    "enabled": true,
                    "days": "[parameters('diagnosticLogsRetentionInDays')]"
                  }
                }
              },
              {
                "name": "publicIpDiagnosticsLogs",
                "count": "[length(parameters('publicIpLogsToEnable'))]",
                "input": {
                  "category": "[parameters('publicIpLogsToEnable')[copyIndex('publicIpDiagnosticsLogs')]]",
                  "enabled": true,
                  "retentionPolicy": {
                    "enabled": true,
                    "days": "[parameters('diagnosticLogsRetentionInDays')]"
                  }
                }
              },
              {
                "name": "diagnosticsMetrics",
                "count": "[length(parameters('metricsToEnable'))]",
                "input": {
                  "category": "[parameters('metricsToEnable')[copyIndex('diagnosticsMetrics')]]",
                  "timeGrain": null,
                  "enabled": true,
                  "retentionPolicy": {
                    "enabled": true,
                    "days": "[parameters('diagnosticLogsRetentionInDays')]"
                  }
                }
              }
            ],
            "zoneRedundantSkus": [
              "VpnGw1AZ",
              "VpnGw2AZ",
              "VpnGw3AZ",
              "VpnGw4AZ",
              "VpnGw5AZ",
              "ErGw1AZ",
              "ErGw2AZ",
              "ErGw3AZ"
            ],
            "gatewayPipSku": "[if(contains(variables('zoneRedundantSkus'), parameters('virtualNetworkGatewaySku')), 'Standard', 'Basic')]",
            "gatewayPipAllocationMethod": "[if(contains(variables('zoneRedundantSkus'), parameters('virtualNetworkGatewaySku')), 'Static', 'Dynamic')]",
            "gatewaySubnetId": "[format('{0}/subnets/GatewaySubnet', parameters('vNetResourceId'))]",
            "activeActive_var": "[if(equals(parameters('virtualNetworkGatewayType'), 'ExpressRoute'), bool('false'), parameters('activeActive'))]",
            "gatewayPipName1": "[if(equals(length(parameters('gatewayPipName')), 0), format('{0}-pip1', parameters('name')), parameters('gatewayPipName')[0])]",
            "gatewayPipName2": "[if(variables('activeActive_var'), if(equals(length(parameters('gatewayPipName')), 1), format('{0}-pip2', parameters('name')), parameters('gatewayPipName')[1]), '')]",
            "gatewayMultiPipArray": [
              "[variables('gatewayPipName1')]",
              "[variables('gatewayPipName2')]"
            ],
            "gatewaySinglePipArray": [
              "[variables('gatewayPipName1')]"
            ],
            "virtualGatewayPipName_var": "[if(not(empty(variables('gatewayPipName2'))), variables('gatewayMultiPipArray'), variables('gatewaySinglePipArray'))]",
            "gatewayPipId1": "[resourceId('Microsoft.Network/publicIPAddresses', variables('gatewayPipName1'))]",
            "gatewayPipId2": "[if(variables('activeActive_var'), resourceId('Microsoft.Network/publicIPAddresses', variables('gatewayPipName2')), resourceId('Microsoft.Network/publicIPAddresses', variables('gatewayPipName1')))]",
            "enableBgp_var": "[if(equals(parameters('virtualNetworkGatewayType'), 'ExpressRoute'), bool('false'), parameters('enableBgp'))]",
            "vpnType_var": "[if(equals(parameters('virtualNetworkGatewayType'), 'ExpressRoute'), 'PolicyBased', parameters('vpnType'))]",
            "bgpSettings": {
              "asn": "[parameters('asn')]"
            },
            "publicIPPrefix": {
              "id": "[parameters('publicIPPrefixResourceId')]"
            },
            "activePassiveIpConfiguration": [
              {
                "properties": {
                  "privateIPAllocationMethod": "Dynamic",
                  "subnet": {
                    "id": "[variables('gatewaySubnetId')]"
                  },
                  "publicIPAddress": {
                    "id": "[variables('gatewayPipId1')]"
                  }
                },
                "name": "vNetGatewayConfig1"
              }
            ],
            "activeActiveIpConfiguration": [
              {
                "properties": {
                  "privateIPAllocationMethod": "Dynamic",
                  "subnet": {
                    "id": "[variables('gatewaySubnetId')]"
                  },
                  "publicIPAddress": {
                    "id": "[variables('gatewayPipId1')]"
                  }
                },
                "name": "vNetGatewayConfig1"
              },
              {
                "properties": {
                  "privateIPAllocationMethod": "Dynamic",
                  "subnet": {
                    "id": "[variables('gatewaySubnetId')]"
                  },
                  "publicIPAddress": {
                    "id": "[variables('gatewayPipId2')]"
                  }
                },
                "name": "vNetGatewayConfig2"
              }
            ],
            "vpnClientRootCertificates": [
              {
                "name": "RootCert1",
                "properties": {
                  "PublicCertData": "[parameters('clientRootCertData')]"
                }
              }
            ],
            "vpmClientRevokedCertificates": [
              {
                "name": "RevokedCert1",
                "properties": {
                  "Thumbprint": "[parameters('clientRevokedCertThumbprint')]"
                }
              }
            ],
            "vpnClientConfiguration": {
              "vpnClientAddressPool": {
                "addressPrefixes": [
                  "[parameters('vpnClientAddressPoolPrefix')]"
                ]
              },
              "vpnClientRootCertificates": "[if(empty(parameters('clientRootCertData')), null(), variables('vpnClientRootCertificates'))]",
              "vpnClientRevokedCertificates": "[if(empty(parameters('clientRevokedCertThumbprint')), null(), variables('vpmClientRevokedCertificates'))]"
            }
          },
          "resources": [
            {
              "copy": {
                "name": "virtualGatewayPublicIP",
                "count": "[length(variables('virtualGatewayPipName_var'))]",
                "mode": "serial",
                "batchSize": 1
              },
              "type": "Microsoft.Network/publicIPAddresses",
              "apiVersion": "2021-02-01",
              "name": "[variables('virtualGatewayPipName_var')[copyIndex()]]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "sku": {
                "name": "[variables('gatewayPipSku')]"
              },
              "properties": {
                "publicIPAllocationMethod": "[variables('gatewayPipAllocationMethod')]",
                "publicIPPrefix": "[if(not(empty(parameters('publicIPPrefixResourceId'))), variables('publicIPPrefix'), null())]",
                "dnsSettings": "[if(equals(length(variables('virtualGatewayPipName_var')), length(parameters('domainNameLabel'))), json(format('{{\"domainNameLabel\": \"{0}\"}}', parameters('domainNameLabel')[copyIndex()])), null())]"
              },
              "zones": "[if(contains(variables('zoneRedundantSkus'), parameters('virtualNetworkGatewaySku')), parameters('publicIpZones'), null())]"
            },
            {
              "condition": "[not(equals(parameters('lock'), 'NotSpecified'))]",
              "copy": {
                "name": "virtualGatewayPublicIP_lock",
                "count": "[length(variables('virtualGatewayPipName_var'))]",
                "mode": "serial",
                "batchSize": 1
              },
              "type": "Microsoft.Authorization/locks",
              "apiVersion": "2016-09-01",
              "scope": "[format('Microsoft.Network/publicIPAddresses/{0}', variables('virtualGatewayPipName_var')[copyIndex()])]",
              "name": "[format('{0}-{1}-lock', variables('virtualGatewayPipName_var')[copyIndex()], parameters('lock'))]",
              "properties": {
                "level": "[parameters('lock')]",
                "notes": "[if(equals(parameters('lock'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot modify the resource or child resources.')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/publicIPAddresses', variables('virtualGatewayPipName_var')[copyIndex()])]"
              ]
            },
            {
              "condition": "[or(or(or(not(empty(parameters('diagnosticStorageAccountId'))), not(empty(parameters('workspaceId')))), not(empty(parameters('eventHubAuthorizationRuleId')))), not(empty(parameters('eventHubName'))))]",
              "copy": {
                "name": "virtualNetworkGatewayPublicIp_diagnosticSettings",
                "count": "[length(variables('virtualGatewayPipName_var'))]",
                "mode": "serial",
                "batchSize": 1
              },
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2021-05-01-preview",
              "scope": "[format('Microsoft.Network/publicIPAddresses/{0}', variables('virtualGatewayPipName_var')[copyIndex()])]",
              "name": "[format('{0}-diagnosticSettings', variables('virtualGatewayPipName_var')[copyIndex()])]",
              "properties": {
                "storageAccountId": "[if(not(empty(parameters('diagnosticStorageAccountId'))), parameters('diagnosticStorageAccountId'), null())]",
                "workspaceId": "[if(not(empty(parameters('workspaceId'))), parameters('workspaceId'), null())]",
                "eventHubAuthorizationRuleId": "[if(not(empty(parameters('eventHubAuthorizationRuleId'))), parameters('eventHubAuthorizationRuleId'), null())]",
                "eventHubName": "[if(not(empty(parameters('eventHubName'))), parameters('eventHubName'), null())]",
                "metrics": "[variables('diagnosticsMetrics')]",
                "logs": "[variables('publicIpDiagnosticsLogs')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/publicIPAddresses', variables('virtualGatewayPipName_var')[copyIndex()])]"
              ]
            },
            {
              "type": "Microsoft.Network/virtualNetworkGateways",
              "apiVersion": "2021-02-01",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "ipConfigurations": "[if(variables('activeActive_var'), variables('activeActiveIpConfiguration'), variables('activePassiveIpConfiguration'))]",
                "activeActive": "[variables('activeActive_var')]",
                "enableBgp": "[variables('enableBgp_var')]",
                "bgpSettings": "[if(equals(parameters('virtualNetworkGatewayType'), 'ExpressRoute'), null(), variables('bgpSettings'))]",
                "sku": {
                  "name": "[parameters('virtualNetworkGatewaySku')]",
                  "tier": "[parameters('virtualNetworkGatewaySku')]"
                },
                "gatewayType": "[parameters('virtualNetworkGatewayType')]",
                "vpnType": "[variables('vpnType_var')]",
                "vpnClientConfiguration": "[if(empty(parameters('vpnClientAddressPoolPrefix')), null(), variables('vpnClientConfiguration'))]"
              },
              "dependsOn": [
                "virtualGatewayPublicIP"
              ]
            },
            {
              "condition": "[not(equals(parameters('lock'), 'NotSpecified'))]",
              "type": "Microsoft.Authorization/locks",
              "apiVersion": "2016-09-01",
              "scope": "[format('Microsoft.Network/virtualNetworkGateways/{0}', parameters('name'))]",
              "name": "[format('{0}-{1}-lock', parameters('name'), parameters('lock'))]",
              "properties": {
                "level": "[parameters('lock')]",
                "notes": "[if(equals(parameters('lock'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot modify the resource or child resources.')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/virtualNetworkGateways', parameters('name'))]"
              ]
            },
            {
              "condition": "[or(or(or(not(empty(parameters('diagnosticStorageAccountId'))), not(empty(parameters('workspaceId')))), not(empty(parameters('eventHubAuthorizationRuleId')))), not(empty(parameters('eventHubName'))))]",
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2021-05-01-preview",
              "scope": "[format('Microsoft.Network/virtualNetworkGateways/{0}', parameters('name'))]",
              "name": "[format('{0}-diagnosticSettings', parameters('name'))]",
              "properties": {
                "storageAccountId": "[if(not(empty(parameters('diagnosticStorageAccountId'))), parameters('diagnosticStorageAccountId'), null())]",
                "workspaceId": "[if(not(empty(parameters('workspaceId'))), parameters('workspaceId'), null())]",
                "eventHubAuthorizationRuleId": "[if(not(empty(parameters('eventHubAuthorizationRuleId'))), parameters('eventHubAuthorizationRuleId'), null())]",
                "eventHubName": "[if(not(empty(parameters('eventHubName'))), parameters('eventHubName'), null())]",
                "metrics": "[variables('diagnosticsMetrics')]",
                "logs": "[variables('virtualNetworkGatewayDiagnosticsLogs')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/virtualNetworkGateways', parameters('name'))]"
              ]
            },
            {
              "condition": "[not(empty(parameters('cuaId')))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('pid-{0}', parameters('cuaId'))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {},
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.10.61.36676",
                      "templateHash": "4193470495622901480"
                    }
                  },
                  "resources": []
                }
              }
            },
            {
              "copy": {
                "name": "virtualNetworkGateway_rbac",
                "count": "[length(parameters('roleAssignments'))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('{0}-VNetGateway-Rbac-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "principalIds": {
                    "value": "[parameters('roleAssignments')[copyIndex()].principalIds]"
                  },
                  "roleDefinitionIdOrName": {
                    "value": "[parameters('roleAssignments')[copyIndex()].roleDefinitionIdOrName]"
                  },
                  "resourceId": {
                    "value": "[resourceId('Microsoft.Network/virtualNetworkGateways', parameters('name'))]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.10.61.36676",
                      "templateHash": "11370741699744880084"
                    }
                  },
                  "parameters": {
                    "principalIds": {
                      "type": "array"
                    },
                    "roleDefinitionIdOrName": {
                      "type": "string"
                    },
                    "resourceId": {
                      "type": "string"
                    }
                  },
                  "variables": {
                    "builtInRoleNames": {
                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                      "Avere Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4f8fab4f-1852-4a58-a46a-8eaf358af14a')]",
                      "Log Analytics Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '92aaf0da-9dab-42b6-94a3-d43ce8d16293')]",
                      "Log Analytics Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '73c42c96-874c-492b-b04d-ab87d138a893')]",
                      "Managed Application Contributor Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '641177b8-a67a-45b9-a033-47bc880bb21e')]",
                      "Managed Application Operator Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c7393b34-138c-406f-901b-d8cf2b17e6ae')]",
                      "Managed Applications Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b9331d33-8a36-4f8c-b097-4f54124fdb44')]",
                      "Monitoring Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '749f88d5-cbae-40b8-bcfc-e573ddc772fa')]",
                      "Monitoring Metrics Publisher": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '3913510d-42f4-4e42-8a64-420c390055eb')]",
                      "Monitoring Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '43d0d8ad-25c7-4714-9337-8ba259a9fe05')]",
                      "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                      "Resource Policy Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '36243c78-bf99-498c-9df9-86d9f8d28608')]",
                      "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                    }
                  },
                  "resources": [
                    {
                      "copy": {
                        "name": "roleAssignment",
                        "count": "[length(parameters('principalIds'))]"
                      },
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2020-04-01-preview",
                      "scope": "[format('Microsoft.Network/virtualNetworkGateways/{0}', last(split(parameters('resourceId'), '/')))]",
                      "name": "[guid(last(split(parameters('resourceId'), '/')), parameters('principalIds')[copyIndex()], parameters('roleDefinitionIdOrName'))]",
                      "properties": {
                        "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), parameters('roleDefinitionIdOrName')), variables('builtInRoleNames')[parameters('roleDefinitionIdOrName')], parameters('roleDefinitionIdOrName'))]",
                        "principalId": "[parameters('principalIds')[copyIndex()]]"
                      }
                    }
                  ]
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/virtualNetworkGateways', parameters('name'))]"
              ]
            }
          ],
          "outputs": {
            "virtualNetworkGatewayResourceGroup": {
              "type": "string",
              "value": "[resourceGroup().name]",
              "metadata": {
                "description": "The resource group the virtual network gateway was deployed"
              }
            },
            "virtualNetworkGatewayName": {
              "type": "string",
              "value": "[parameters('name')]",
              "metadata": {
                "description": "The name of the virtual network gateway"
              }
            },
            "virtualNetworkGatewayResourceId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Network/virtualNetworkGateways', parameters('name'))]",
              "metadata": {
                "description": "The resource ID of the virtual network gateway"
              }
            },
            "activeActive": {
              "type": "bool",
              "value": "[reference(resourceId('Microsoft.Network/virtualNetworkGateways', parameters('name'))).activeActive]",
              "metadata": {
                "description": "Shows if the virtual network gateway is configured in active-active mode"
              }
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/deployments', format('dpl-{0}-hubSpoke', uniqueString(deployment().name, deployment().location)))]"
      ]
    },
    {
      "condition": "[parameters('deploySecureBatch')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('dpl-{0}-azBatchSecured', uniqueString(deployment().name, deployment().location))]",
      "resourceGroup": "[variables('rgAzureBatch')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "rgAzureBatch": {
            "value": "[variables('rgAzureBatch')]"
          },
          "rgHub": {
            "value": "[variables('rgHub')]"
          },
          "rgSpoke": {
            "value": "[variables('rgSpoke01')]"
          },
          "prefix": {
            "value": "[parameters('prefix')]"
          },
          "environment": {
            "value": "[parameters('environment')]"
          },
          "appInsightsName": {
            "value": "[variables('appInsightsName')]"
          },
          "vNetObject": {
            "value": "[variables('vNetSpoke01Param')]"
          },
          "saDefinitions": {
            "value": "[variables('saDefinitions')]"
          },
          "saNameAzBatch": {
            "value": "[variables('saNameAzBatch')]"
          },
          "acrName": {
            "value": "[variables('acrName')]"
          },
          "acrPublicNetworkAccess": {
            "value": "[parameters('acrPublicNetworkAccess')]"
          },
          "acrSku": {
            "value": "[parameters('acrSku')]"
          },
          "acrAdminUserEnabled": {
            "value": "[parameters('acrAdminUserEnabled')]"
          },
          "deployPrivateACR": {
            "value": "[parameters('deployPrivateACR')]"
          },
          "primaryScriptBuildKvTestImage": {
            "value": "[parameters('primaryScriptBuildKvTestImage')]"
          },
          "batchAccountName": {
            "value": "[variables('batchAccountName')]"
          },
          "batchServiceObjectId": {
            "value": "[parameters('batchServiceObjectId')]"
          },
          "batchNodeSku": {
            "value": "[parameters('batchNodeSku')]"
          },
          "saNameStorageNFS": {
            "value": "[variables('saNameStorageNFS')]"
          },
          "saNameStorageSMB": {
            "value": "[variables('saNameStorageSMB')]"
          },
          "tags": {
            "value": "[parameters('resourceTags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.10.61.36676",
              "templateHash": "13425650057520166164"
            }
          },
          "parameters": {
            "rgAzureBatch": {
              "type": "string"
            },
            "prefix": {
              "type": "string"
            },
            "environment": {
              "type": "string"
            },
            "rgHub": {
              "type": "string"
            },
            "rgSpoke": {
              "type": "string"
            },
            "tags": {
              "type": "object",
              "defaultValue": {}
            },
            "vNetObject": {
              "type": "object"
            },
            "saDefinitions": {
              "type": "array"
            },
            "saNameAzBatch": {
              "type": "string"
            },
            "saNameStorageSMB": {
              "type": "string"
            },
            "saNameStorageNFS": {
              "type": "string"
            },
            "acrName": {
              "type": "string"
            },
            "acrPublicNetworkAccess": {
              "type": "string"
            },
            "acrSku": {
              "type": "string"
            },
            "acrAdminUserEnabled": {
              "type": "bool"
            },
            "deployPrivateACR": {
              "type": "bool"
            },
            "primaryScriptBuildKvTestImage": {
              "type": "string"
            },
            "deployPrivateAKV": {
              "type": "bool",
              "defaultValue": true
            },
            "batchServiceObjectId": {
              "type": "string"
            },
            "batchAccountName": {
              "type": "string"
            },
            "batchNodeSku": {
              "type": "string"
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]"
            },
            "appInsightsName": {
              "type": "string"
            }
          },
          "variables": {
            "kvName": "[format('kv-{0}-{1}-ba', parameters('environment'), parameters('prefix'))]",
            "privateEndpointSubnetId": "[format('{0}/subnets/{1}', extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('rgSpoke')), 'Microsoft.Network/virtualNetworks', parameters('vNetObject').vNetName), parameters('vNetObject').subnets[parameters('vNetObject').positionEndpointSubnet].subnetName)]",
            "batchPoolSubnetId_Linux": "[format('{0}/subnets/{1}', extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('rgSpoke')), 'Microsoft.Network/virtualNetworks', parameters('vNetObject').vNetName), parameters('vNetObject').subnets[parameters('vNetObject').positionLinuxSubnet].subnetName)]",
            "batchPoolSubnetId_LinuxNoSsh": "[format('{0}/subnets/{1}', extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('rgSpoke')), 'Microsoft.Network/virtualNetworks', parameters('vNetObject').vNetName), parameters('vNetObject').subnets[parameters('vNetObject').positionLinuxNoSshSubnet].subnetName)]",
            "batchPoolSubnetId_Windows": "[format('{0}/subnets/{1}', extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('rgSpoke')), 'Microsoft.Network/virtualNetworks', parameters('vNetObject').vNetName), parameters('vNetObject').subnets[parameters('vNetObject').positionWindowsSubnet].subnetName)]",
            "batchManagedIdentity": "[format('id-{0}-{1}-azbatch', parameters('environment'), parameters('prefix'))]",
            "acrBuildName": "[format('acr{0}{1}temp', parameters('environment'), parameters('prefix'))]",
            "acrPrivateEndpoints_tmp": [
              {
                "name": "[format('{0}-pl', parameters('acrName'))]",
                "subnetResourceId": "[variables('privateEndpointSubnetId')]",
                "service": "registry",
                "privateDnsZoneResourceIds": [
                  "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('rgHub')), 'Microsoft.Network/privateDnsZones', format('privatelink{0}', environment().suffixes.acrLoginServer))]"
                ]
              }
            ],
            "acrPrivateEndpoints": "[if(parameters('deployPrivateACR'), variables('acrPrivateEndpoints_tmp'), createArray())]",
            "acrImageName": "kvsecretsmi"
          },
          "resources": [
            {
              "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
              "apiVersion": "2018-11-30",
              "name": "[variables('batchManagedIdentity')]",
              "location": "[resourceGroup().location]",
              "tags": "[parameters('tags')]"
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('dpl-{0}-testBatchRoleAssignment', uniqueString(deployment().name, parameters('location')))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "principalId": {
                    "value": "[parameters('batchServiceObjectId')]"
                  },
                  "roleDefinitionName": {
                    "value": "Contributor"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.10.61.36676",
                      "templateHash": "18119728556663911977"
                    }
                  },
                  "parameters": {
                    "principalId": {
                      "type": "string",
                      "metadata": {
                        "description": "the principal id to check for the role assignment"
                      }
                    },
                    "roleDefinitionName": {
                      "type": "string",
                      "metadata": {
                        "description": "built-in role definition id"
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "location where the deployment script will be executed"
                      }
                    },
                    "currentTime": {
                      "type": "string",
                      "defaultValue": "[utcNow()]"
                    }
                  },
                  "variables": {
                    "query": "[format('[?principalId==''{0}'' && roleDefinitionName==''{1}''].{{name:name}}', parameters('principalId'), parameters('roleDefinitionName'))]",
                    "scriptContent": "[format('az login -i > /dev/null 2>&1 && az role assignment list --scope {0} -o json --query \"{1}\"', subscription().id, variables('query'))]"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
                      "apiVersion": "2022-01-31-preview",
                      "name": "[uniqueString(parameters('principalId'), subscription().id, parameters('roleDefinitionName'))]",
                      "location": "[parameters('location')]"
                    },
                    {
                      "type": "Microsoft.Resources/deploymentScripts",
                      "apiVersion": "2020-10-01",
                      "name": "testRoleAssignment",
                      "location": "[parameters('location')]",
                      "kind": "AzureCLI",
                      "identity": {
                        "type": "UserAssigned",
                        "userAssignedIdentities": {
                          "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', uniqueString(parameters('principalId'), subscription().id, parameters('roleDefinitionName'))))]": {}
                        }
                      },
                      "properties": {
                        "azCliVersion": "2.39.0",
                        "retentionInterval": "P1D",
                        "scriptContent": "[format('{0} 2>&1 | jq -c ''{{\"count\": . | length }}'' | tee $AZ_SCRIPTS_OUTPUT_PATH', variables('scriptContent'))]",
                        "cleanupPreference": "OnSuccess",
                        "forceUpdateTag": "[parameters('currentTime')]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', uniqueString(parameters('principalId'), subscription().id, parameters('roleDefinitionName')))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('dpl-{0}-miRoleAssignment', uniqueString(deployment().name, parameters('location')))]",
                      "subscriptionId": "[subscription().subscriptionId]",
                      "location": "[resourceGroup().location]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "builtInRoleType": {
                            "value": "Reader"
                          },
                          "principalId": {
                            "value": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', uniqueString(parameters('principalId'), subscription().id, parameters('roleDefinitionName')))).principalId]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.10.61.36676",
                              "templateHash": "13153533945357071102"
                            }
                          },
                          "parameters": {
                            "principalId": {
                              "type": "string"
                            },
                            "principalType": {
                              "type": "string",
                              "defaultValue": "ServicePrincipal"
                            },
                            "builtInRoleType": {
                              "type": "string",
                              "metadata": {
                                "description": "Built-in role to assign"
                              },
                              "allowedValues": [
                                "Owner",
                                "Contributor",
                                "Reader"
                              ]
                            },
                            "roleNameGuid": {
                              "type": "string",
                              "defaultValue": "[guid(parameters('principalId'), parameters('builtInRoleType'), subscription().displayName)]",
                              "metadata": {
                                "description": "A new GUID used to identify the role assignment"
                              }
                            },
                            "roleAssignmentExists": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "when set to true, role assigment will be ignored"
                              }
                            }
                          },
                          "variables": {
                            "role": {
                              "Owner": "[format('/subscriptions/{0}/providers/Microsoft.Authorization/roleDefinitions/8e3af657-a8ff-443c-a75c-2fe8c4bcb635', subscription().subscriptionId)]",
                              "Contributor": "[format('/subscriptions/{0}/providers/Microsoft.Authorization/roleDefinitions/b24988ac-6180-42a0-ab88-20f7382dd24c', subscription().subscriptionId)]",
                              "Reader": "[format('/subscriptions/{0}/providers/Microsoft.Authorization/roleDefinitions/acdd72a7-3385-48ef-bd42-f606fba81ae7', subscription().subscriptionId)]"
                            }
                          },
                          "resources": [
                            {
                              "condition": "[not(parameters('roleAssignmentExists'))]",
                              "type": "Microsoft.Authorization/roleAssignments",
                              "apiVersion": "2020-04-01-preview",
                              "name": "[parameters('roleNameGuid')]",
                              "properties": {
                                "roleDefinitionId": "[variables('role')[parameters('builtInRoleType')]]",
                                "principalId": "[parameters('principalId')]",
                                "principalType": "[parameters('principalType')]"
                              }
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', uniqueString(parameters('principalId'), subscription().id, parameters('roleDefinitionName')))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "result": {
                      "type": "bool",
                      "value": "[if(greater(reference(resourceId('Microsoft.Resources/deploymentScripts', 'testRoleAssignment')).outputs.count, 0), true(), false())]"
                    }
                  }
                }
              }
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('dpl-{0}-batchRoleAssignment', uniqueString(deployment().name, parameters('location')))]",
              "subscriptionId": "[subscription().subscriptionId]",
              "location": "[resourceGroup().location]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "builtInRoleType": {
                    "value": "Contributor"
                  },
                  "principalId": {
                    "value": "[parameters('batchServiceObjectId')]"
                  },
                  "roleAssignmentExists": {
                    "value": "[reference(resourceId('Microsoft.Resources/deployments', format('dpl-{0}-testBatchRoleAssignment', uniqueString(deployment().name, parameters('location'))))).outputs.result.value]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.10.61.36676",
                      "templateHash": "13153533945357071102"
                    }
                  },
                  "parameters": {
                    "principalId": {
                      "type": "string"
                    },
                    "principalType": {
                      "type": "string",
                      "defaultValue": "ServicePrincipal"
                    },
                    "builtInRoleType": {
                      "type": "string",
                      "metadata": {
                        "description": "Built-in role to assign"
                      },
                      "allowedValues": [
                        "Owner",
                        "Contributor",
                        "Reader"
                      ]
                    },
                    "roleNameGuid": {
                      "type": "string",
                      "defaultValue": "[guid(parameters('principalId'), parameters('builtInRoleType'), subscription().displayName)]",
                      "metadata": {
                        "description": "A new GUID used to identify the role assignment"
                      }
                    },
                    "roleAssignmentExists": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "when set to true, role assigment will be ignored"
                      }
                    }
                  },
                  "variables": {
                    "role": {
                      "Owner": "[format('/subscriptions/{0}/providers/Microsoft.Authorization/roleDefinitions/8e3af657-a8ff-443c-a75c-2fe8c4bcb635', subscription().subscriptionId)]",
                      "Contributor": "[format('/subscriptions/{0}/providers/Microsoft.Authorization/roleDefinitions/b24988ac-6180-42a0-ab88-20f7382dd24c', subscription().subscriptionId)]",
                      "Reader": "[format('/subscriptions/{0}/providers/Microsoft.Authorization/roleDefinitions/acdd72a7-3385-48ef-bd42-f606fba81ae7', subscription().subscriptionId)]"
                    }
                  },
                  "resources": [
                    {
                      "condition": "[not(parameters('roleAssignmentExists'))]",
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2020-04-01-preview",
                      "name": "[parameters('roleNameGuid')]",
                      "properties": {
                        "roleDefinitionId": "[variables('role')[parameters('builtInRoleType')]]",
                        "principalId": "[parameters('principalId')]",
                        "principalType": "[parameters('principalType')]"
                      }
                    }
                  ]
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', format('dpl-{0}-testBatchRoleAssignment', uniqueString(deployment().name, parameters('location'))))]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('dpl-{0}-batchKeyVault', uniqueString(deployment().name, parameters('location')))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "keyVaultName": {
                    "value": "[variables('kvName')]"
                  },
                  "privateEndpointSubnetId": {
                    "value": "[variables('privateEndpointSubnetId')]"
                  },
                  "deployPrivateKeyVault": {
                    "value": "[parameters('deployPrivateAKV')]"
                  },
                  "enablePurgeProtection": {
                    "value": true
                  },
                  "enableSoftDelete": {
                    "value": true
                  },
                  "rgDNSZone": {
                    "value": "[parameters('rgHub')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.10.61.36676",
                      "templateHash": "16302241451410019109"
                    }
                  },
                  "parameters": {
                    "tags": {
                      "type": "object",
                      "defaultValue": {}
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]"
                    },
                    "keyVaultName": {
                      "type": "string"
                    },
                    "keyVaultFamily": {
                      "type": "string",
                      "defaultValue": "A"
                    },
                    "keyVaultSkuName": {
                      "type": "string",
                      "defaultValue": "standard",
                      "allowedValues": [
                        "standard",
                        "premium"
                      ]
                    },
                    "enablePurgeProtection": {
                      "type": "bool",
                      "defaultValue": true
                    },
                    "enabledForDeployment": {
                      "type": "bool",
                      "defaultValue": true
                    },
                    "enabledForDiskEncryption": {
                      "type": "bool",
                      "defaultValue": true
                    },
                    "enabledForTemplateDeployment": {
                      "type": "bool",
                      "defaultValue": true
                    },
                    "enableSoftDelete": {
                      "type": "bool",
                      "defaultValue": true
                    },
                    "publicNetworkAccess": {
                      "type": "string",
                      "defaultValue": "disabled",
                      "allowedValues": [
                        "disabled",
                        "enabled"
                      ]
                    },
                    "deployPrivateKeyVault": {
                      "type": "bool",
                      "defaultValue": true
                    },
                    "privateEndpointSubnetId": {
                      "type": "string"
                    },
                    "kvAccessPolicies": {
                      "type": "array",
                      "defaultValue": []
                    },
                    "rgDNSZone": {
                      "type": "string"
                    }
                  },
                  "variables": {
                    "kvPrivateDnsZoneName": "privatelink.vaultcore.azure.net"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.KeyVault/vaults",
                      "apiVersion": "2021-06-01-preview",
                      "name": "[parameters('keyVaultName')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "accessPolicies": "[parameters('kvAccessPolicies')]",
                        "sku": {
                          "family": "[parameters('keyVaultFamily')]",
                          "name": "[parameters('keyVaultSkuName')]"
                        },
                        "tenantId": "[subscription().tenantId]",
                        "enablePurgeProtection": "[parameters('enablePurgeProtection')]",
                        "enabledForDeployment": "[parameters('enabledForDeployment')]",
                        "enabledForDiskEncryption": "[parameters('enabledForDiskEncryption')]",
                        "enabledForTemplateDeployment": "[parameters('enabledForTemplateDeployment')]",
                        "enableSoftDelete": "[parameters('enableSoftDelete')]",
                        "networkAcls": {
                          "bypass": "AzureServices",
                          "defaultAction": "Deny"
                        },
                        "publicNetworkAccess": "[parameters('publicNetworkAccess')]"
                      }
                    },
                    {
                      "condition": "[parameters('deployPrivateKeyVault')]",
                      "type": "Microsoft.Network/privateEndpoints",
                      "apiVersion": "2021-03-01",
                      "name": "[format('{0}-pl', parameters('keyVaultName'))]",
                      "tags": "[parameters('tags')]",
                      "location": "[parameters('location')]",
                      "properties": {
                        "subnet": {
                          "id": "[parameters('privateEndpointSubnetId')]"
                        },
                        "privateLinkServiceConnections": [
                          {
                            "name": "[format('{0}-pl', parameters('keyVaultName'))]",
                            "properties": {
                              "privateLinkServiceId": "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]",
                              "groupIds": [
                                "vault"
                              ]
                            }
                          }
                        ]
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
                      ]
                    },
                    {
                      "condition": "[parameters('deployPrivateKeyVault')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('deployEndpointAEntry-{0}', parameters('keyVaultName'))]",
                      "resourceGroup": "[parameters('rgDNSZone')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "ipAddress": {
                            "value": "[reference(resourceId('Microsoft.Network/privateEndpoints', format('{0}-pl', parameters('keyVaultName'))), '2021-03-01').customDnsConfigs[0].ipAddresses[0]]"
                          },
                          "privateDnsZoneName": {
                            "value": "[variables('kvPrivateDnsZoneName')]"
                          },
                          "serviceName": {
                            "value": "[parameters('keyVaultName')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.10.61.36676",
                              "templateHash": "13254199335564405154"
                            }
                          },
                          "parameters": {
                            "privateDnsZoneName": {
                              "type": "string"
                            },
                            "serviceName": {
                              "type": "string"
                            },
                            "ipAddress": {
                              "type": "string"
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Network/privateDnsZones/A",
                              "apiVersion": "2020-06-01",
                              "name": "[format('{0}/{1}', parameters('privateDnsZoneName'), parameters('serviceName'))]",
                              "properties": {
                                "ttl": 3600,
                                "aRecords": [
                                  {
                                    "ipv4Address": "[parameters('ipAddress')]"
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]",
                        "[resourceId('Microsoft.Network/privateEndpoints', format('{0}-pl', parameters('keyVaultName')))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "privateEndpointIp": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Network/privateEndpoints', format('{0}-pl', parameters('keyVaultName'))), '2021-03-01').customDnsConfigs[0].ipAddresses[0]]"
                    },
                    "privateEndpointFqdn": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Network/privateEndpoints', format('{0}-pl', parameters('keyVaultName'))), '2021-03-01').customDnsConfigs[0].fqdn]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('batchManagedIdentity'))]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('dpl-{0}-batchKV-Policy-MI-add', uniqueString(deployment().name, parameters('location')))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "accessPolicy": {
                    "value": "[array(createArray(createObject('objectId', reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('batchManagedIdentity'))).principalId, 'permissions', createObject('secrets', createArray('get', 'list', 'set', 'delete', 'recover')), 'tenantId', subscription().tenantId), createObject('objectId', parameters('batchServiceObjectId'), 'permissions', createObject('secrets', createArray('get', 'list', 'set', 'delete', 'recover')), 'tenantId', subscription().tenantId)))]"
                  },
                  "accessPolicyAction": {
                    "value": "add"
                  },
                  "kvName": {
                    "value": "[variables('kvName')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.10.61.36676",
                      "templateHash": "1205673801172475927"
                    }
                  },
                  "parameters": {
                    "kvName": {
                      "type": "string"
                    },
                    "accessPolicyAction": {
                      "type": "string",
                      "allowedValues": [
                        "add",
                        "remove",
                        "replace"
                      ]
                    },
                    "accessPolicy": {
                      "type": "array"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.KeyVault/vaults/accessPolicies",
                      "apiVersion": "2021-06-01-preview",
                      "name": "[format('{0}/{1}', parameters('kvName'), parameters('accessPolicyAction'))]",
                      "properties": {
                        "accessPolicies": "[parameters('accessPolicy')]"
                      }
                    }
                  ]
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('batchManagedIdentity'))]",
                "[resourceId('Microsoft.Resources/deployments', format('dpl-{0}-batchKeyVault', uniqueString(deployment().name, parameters('location'))))]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('dpl-{0}-batchStorageAccounts', uniqueString(deployment().name, parameters('location')))]",
              "resourceGroup": "[parameters('rgAzureBatch')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "rgHub": {
                    "value": "[parameters('rgHub')]"
                  },
                  "kvName": {
                    "value": "[variables('kvName')]"
                  },
                  "privateEndpointSubnetId": {
                    "value": "[variables('privateEndpointSubnetId')]"
                  },
                  "saDefinitions": {
                    "value": "[parameters('saDefinitions')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.10.61.36676",
                      "templateHash": "2598620890102801486"
                    }
                  },
                  "parameters": {
                    "privateEndpointSubnetId": {
                      "type": "string"
                    },
                    "storageAccountIpAllowAccess": {
                      "type": "string",
                      "defaultValue": ""
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {}
                    },
                    "rgHub": {
                      "type": "string"
                    },
                    "saDefinitions": {
                      "type": "array"
                    },
                    "kvName": {
                      "type": "string",
                      "defaultValue": ""
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]"
                    }
                  },
                  "resources": [
                    {
                      "copy": {
                        "name": "stgAzBatchGeneric",
                        "count": "[length(parameters('saDefinitions'))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('dpl-{0}-StorageAccount{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "rgHub": {
                            "value": "[parameters('rgHub')]"
                          },
                          "storageAccountIpAllowAccess": {
                            "value": "[parameters('storageAccountIpAllowAccess')]"
                          },
                          "storageAccountName": {
                            "value": "[parameters('saDefinitions')[copyIndex()].storageAccountName]"
                          },
                          "privateLinkGroupIds": {
                            "value": [
                              "[parameters('saDefinitions')[copyIndex()].privateLinkGroupIds]"
                            ]
                          },
                          "privateEndpointSubnetId": {
                            "value": "[parameters('privateEndpointSubnetId')]"
                          },
                          "tags": {
                            "value": "[parameters('tags')]"
                          },
                          "kvName": {
                            "value": "[parameters('kvName')]"
                          },
                          "storageAccountAccessTier": {
                            "value": "[parameters('saDefinitions')[copyIndex()].storageAccountAccessTier]"
                          },
                          "storageAccountKind": {
                            "value": "[parameters('saDefinitions')[copyIndex()].storageAccountKind]"
                          },
                          "largeFileSharesState": {
                            "value": "[parameters('saDefinitions')[copyIndex()].largeFileSharesState]"
                          },
                          "storageAccountSku": {
                            "value": "[parameters('saDefinitions')[copyIndex()].storageAccountSku]"
                          },
                          "supportsHttpsTrafficOnly": {
                            "value": "[parameters('saDefinitions')[copyIndex()].supportsHttpsTrafficOnly]"
                          },
                          "isHnsEnabled": {
                            "value": "[parameters('saDefinitions')[copyIndex()].isHnsEnabled]"
                          },
                          "isNfsV3Enabled": {
                            "value": "[parameters('saDefinitions')[copyIndex()].isNfsV3Enabled]"
                          },
                          "allowSharedKeyAccess": {
                            "value": "[parameters('saDefinitions')[copyIndex()].allowSharedKeyAccess]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.10.61.36676",
                              "templateHash": "734919773903124754"
                            }
                          },
                          "parameters": {
                            "rgHub": {
                              "type": "string"
                            },
                            "storageAccountName": {
                              "type": "string"
                            },
                            "location": {
                              "type": "string",
                              "defaultValue": "[resourceGroup().location]"
                            },
                            "storageAccountIpAllowAccess": {
                              "type": "string"
                            },
                            "kvName": {
                              "type": "string"
                            },
                            "tags": {
                              "type": "object",
                              "defaultValue": {}
                            },
                            "privateEndpointSubnetId": {
                              "type": "string",
                              "defaultValue": ""
                            },
                            "privateLinkGroupIds": {
                              "type": "array",
                              "defaultValue": []
                            },
                            "storageAccountSku": {
                              "type": "string",
                              "defaultValue": "Standard_LRS",
                              "allowedValues": [
                                "Premium_LRS",
                                "Premium_ZRS",
                                "Standard_GRS",
                                "Standard_GZRS",
                                "Standard_LRS",
                                "Standard_RAGRS",
                                "Standard_RAGZRS",
                                "Standard_ZRS"
                              ]
                            },
                            "storageAccountKind": {
                              "type": "string",
                              "defaultValue": "StorageV2",
                              "allowedValues": [
                                "FileStorage",
                                "StorageV2"
                              ]
                            },
                            "storageAccountAccessTier": {
                              "type": "string",
                              "defaultValue": "Hot",
                              "allowedValues": [
                                "Cool",
                                "Hot"
                              ]
                            },
                            "isHnsEnabled": {
                              "type": "bool",
                              "defaultValue": false
                            },
                            "isNfsV3Enabled": {
                              "type": "bool",
                              "defaultValue": false
                            },
                            "largeFileSharesState": {
                              "type": "string",
                              "defaultValue": "Disabled",
                              "allowedValues": [
                                "Enabled",
                                "Disabled"
                              ]
                            },
                            "supportsHttpsTrafficOnly": {
                              "type": "bool",
                              "defaultValue": true
                            },
                            "allowBlobPublicAccess": {
                              "type": "bool",
                              "defaultValue": false
                            },
                            "allowSharedKeyAccess": {
                              "type": "bool",
                              "defaultValue": false
                            }
                          },
                          "variables": {
                            "secretName": "[format('sa-connection-{0}', parameters('storageAccountName'))]",
                            "filePrivateDnsZoneName": "[format('privatelink.file.{0}', environment().suffixes.storage)]",
                            "blobPrivateDnsZoneName": "[format('privatelink.blob.{0}', environment().suffixes.storage)]",
                            "privateDnsZoneName": "[if(contains(parameters('privateLinkGroupIds'), 'blob'), variables('blobPrivateDnsZoneName'), variables('filePrivateDnsZoneName'))]"
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Storage/storageAccounts",
                              "apiVersion": "2021-06-01",
                              "name": "[parameters('storageAccountName')]",
                              "location": "[parameters('location')]",
                              "tags": "[parameters('tags')]",
                              "sku": {
                                "name": "[parameters('storageAccountSku')]"
                              },
                              "kind": "[parameters('storageAccountKind')]",
                              "properties": {
                                "supportsHttpsTrafficOnly": "[parameters('supportsHttpsTrafficOnly')]",
                                "accessTier": "[parameters('storageAccountAccessTier')]",
                                "allowBlobPublicAccess": "[parameters('allowBlobPublicAccess')]",
                                "allowSharedKeyAccess": "[parameters('allowSharedKeyAccess')]",
                                "minimumTlsVersion": "TLS1_2",
                                "isNfsV3Enabled": "[parameters('isNfsV3Enabled')]",
                                "largeFileSharesState": "[parameters('largeFileSharesState')]",
                                "isHnsEnabled": "[parameters('isHnsEnabled')]",
                                "networkAcls": {
                                  "defaultAction": "Deny",
                                  "bypass": "AzureServices",
                                  "ipRules": "[if(equals(parameters('storageAccountIpAllowAccess'), ''), null(), createArray(createObject('action', 'Allow', 'value', parameters('storageAccountIpAllowAccess'))))]"
                                }
                              }
                            },
                            {
                              "condition": "[not(equals(parameters('kvName'), ''))]",
                              "type": "Microsoft.KeyVault/vaults/secrets",
                              "apiVersion": "2021-04-01-preview",
                              "name": "[format('{0}/{1}', parameters('kvName'), variables('secretName'))]",
                              "tags": "[parameters('tags')]",
                              "properties": {
                                "value": "[format('DefaultEndpointsProtocol=https;AccountName={0};EndpointSuffix={1};AccountKey={2}', parameters('storageAccountName'), environment().suffixes.storage, listKeys(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), '2021-06-01').keys[0].value)]"
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]"
                              ]
                            },
                            {
                              "condition": "[not(equals(parameters('privateEndpointSubnetId'), ''))]",
                              "type": "Microsoft.Network/privateEndpoints",
                              "apiVersion": "2021-03-01",
                              "name": "[format('{0}-pl', parameters('storageAccountName'))]",
                              "tags": "[parameters('tags')]",
                              "location": "[parameters('location')]",
                              "properties": {
                                "subnet": {
                                  "id": "[parameters('privateEndpointSubnetId')]"
                                },
                                "privateLinkServiceConnections": [
                                  {
                                    "name": "[format('{0}-pl', parameters('storageAccountName'))]",
                                    "properties": {
                                      "privateLinkServiceId": "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]",
                                      "groupIds": "[parameters('privateLinkGroupIds')]"
                                    }
                                  }
                                ]
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]"
                              ]
                            },
                            {
                              "condition": "[not(equals(parameters('privateEndpointSubnetId'), ''))]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2020-10-01",
                              "name": "[format('deployEndpointAEntry-{0}', parameters('storageAccountName'))]",
                              "resourceGroup": "[parameters('rgHub')]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "ipAddress": {
                                    "value": "[reference(resourceId('Microsoft.Network/privateEndpoints', format('{0}-pl', parameters('storageAccountName'))), '2021-03-01').customDnsConfigs[0].ipAddresses[0]]"
                                  },
                                  "privateDnsZoneName": {
                                    "value": "[variables('privateDnsZoneName')]"
                                  },
                                  "serviceName": {
                                    "value": "[parameters('storageAccountName')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.10.61.36676",
                                      "templateHash": "13254199335564405154"
                                    }
                                  },
                                  "parameters": {
                                    "privateDnsZoneName": {
                                      "type": "string"
                                    },
                                    "serviceName": {
                                      "type": "string"
                                    },
                                    "ipAddress": {
                                      "type": "string"
                                    }
                                  },
                                  "resources": [
                                    {
                                      "type": "Microsoft.Network/privateDnsZones/A",
                                      "apiVersion": "2020-06-01",
                                      "name": "[format('{0}/{1}', parameters('privateDnsZoneName'), parameters('serviceName'))]",
                                      "properties": {
                                        "ttl": 3600,
                                        "aRecords": [
                                          {
                                            "ipv4Address": "[parameters('ipAddress')]"
                                          }
                                        ]
                                      }
                                    }
                                  ]
                                }
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Network/privateEndpoints', format('{0}-pl', parameters('storageAccountName')))]",
                                "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]"
                              ]
                            }
                          ],
                          "outputs": {
                            "saName": {
                              "type": "string",
                              "value": "[parameters('storageAccountName')]"
                            },
                            "saId": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]"
                            },
                            "privateEndpointIp": {
                              "type": "string",
                              "value": "[reference(resourceId('Microsoft.Network/privateEndpoints', format('{0}-pl', parameters('storageAccountName'))), '2021-03-01').customDnsConfigs[0].ipAddresses[0]]"
                            },
                            "privateEndpointFqdn": {
                              "type": "string",
                              "value": "[reference(resourceId('Microsoft.Network/privateEndpoints', format('{0}-pl', parameters('storageAccountName'))), '2021-03-01').customDnsConfigs[0].fqdn]"
                            }
                          }
                        }
                      }
                    },
                    {
                      "condition": "[contains(parameters('saDefinitions')[copyIndex()].privateLinkGroupIds, 'blob')]",
                      "copy": {
                        "name": "stgAddContainer",
                        "count": "[length(parameters('saDefinitions'))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('dpl-{0}-add-saContainer-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "storageAccountName": {
                            "value": "[parameters('saDefinitions')[copyIndex()].storageAccountName]"
                          },
                          "blobContainers": {
                            "value": [
                              "container"
                            ]
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.10.61.36676",
                              "templateHash": "18060348861853330747"
                            }
                          },
                          "parameters": {
                            "storageAccountName": {
                              "type": "string"
                            },
                            "rootName": {
                              "type": "string",
                              "defaultValue": "default"
                            },
                            "blobContainers": {
                              "type": "array",
                              "defaultValue": []
                            }
                          },
                          "resources": [
                            {
                              "copy": {
                                "name": "containers",
                                "count": "[length(parameters('blobContainers'))]"
                              },
                              "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
                              "apiVersion": "2021-06-01",
                              "name": "[format('{0}/{1}/{2}', parameters('storageAccountName'), parameters('rootName'), parameters('blobContainers')[copyIndex()])]",
                              "properties": {
                                "publicAccess": "None"
                              }
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "stgAzBatchGeneric"
                      ]
                    },
                    {
                      "condition": "[contains(parameters('saDefinitions')[copyIndex()].privateLinkGroupIds, 'file')]",
                      "copy": {
                        "name": "stgAddFileShare",
                        "count": "[length(parameters('saDefinitions'))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('dpl-{0}-add-FileShare-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "storageAccountName": {
                            "value": "[parameters('saDefinitions')[copyIndex()].storageAccountName]"
                          },
                          "fileShareAccessTier": {
                            "value": "[parameters('saDefinitions')[copyIndex()].fileShareAccessTier]"
                          },
                          "fileShareEnabledProtocol": {
                            "value": "[parameters('saDefinitions')[copyIndex()].fileShareEnabledProtocol]"
                          },
                          "fileShareQuota": {
                            "value": "[if(contains(parameters('saDefinitions')[copyIndex()], 'fileShareQuota'), parameters('saDefinitions')[copyIndex()].fileShareQuota, 100)]"
                          },
                          "fileShares": {
                            "value": [
                              "share"
                            ]
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.10.61.36676",
                              "templateHash": "1619228392820487408"
                            }
                          },
                          "parameters": {
                            "storageAccountName": {
                              "type": "string"
                            },
                            "rootName": {
                              "type": "string",
                              "defaultValue": "default"
                            },
                            "fileShareQuota": {
                              "type": "int",
                              "defaultValue": 100
                            },
                            "fileShareAccessTier": {
                              "type": "string",
                              "defaultValue": "Hot",
                              "allowedValues": [
                                "Cool",
                                "Hot",
                                "Premium",
                                "TransactionOptimized"
                              ]
                            },
                            "fileShareEnabledProtocol": {
                              "type": "string",
                              "defaultValue": "NFS",
                              "allowedValues": [
                                "NFS",
                                "SMB"
                              ]
                            },
                            "fileShares": {
                              "type": "array",
                              "defaultValue": []
                            }
                          },
                          "resources": [
                            {
                              "copy": {
                                "name": "fileShare",
                                "count": "[length(parameters('fileShares'))]"
                              },
                              "type": "Microsoft.Storage/storageAccounts/fileServices/shares",
                              "apiVersion": "2021-06-01",
                              "name": "[format('{0}/{1}/{2}', parameters('storageAccountName'), parameters('rootName'), parameters('fileShares')[copyIndex()])]",
                              "properties": {
                                "accessTier": "[parameters('fileShareAccessTier')]",
                                "enabledProtocols": "[parameters('fileShareEnabledProtocol')]",
                                "shareQuota": "[parameters('fileShareQuota')]"
                              }
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "stgAzBatchGeneric"
                      ]
                    }
                  ]
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', format('dpl-{0}-batchKeyVault', uniqueString(deployment().name, parameters('location'))))]"
              ]
            },
            {
              "copy": {
                "name": "assignStorageAccountRole",
                "count": "[length(parameters('saDefinitions'))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('dpl-{0}-batchStorageRoleAssignment-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "builtInRoleType": {
                    "value": "StorageBlobDataContributor"
                  },
                  "principalId": {
                    "value": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('batchManagedIdentity'))).principalId]"
                  },
                  "saName": {
                    "value": "[parameters('saDefinitions')[copyIndex()].storageAccountName]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.10.61.36676",
                      "templateHash": "10267862899354920050"
                    }
                  },
                  "parameters": {
                    "saName": {
                      "type": "string"
                    },
                    "principalId": {
                      "type": "string"
                    },
                    "builtInRoleType": {
                      "type": "string",
                      "metadata": {
                        "description": "Built-in role to assign"
                      },
                      "allowedValues": [
                        "Owner",
                        "Contributor",
                        "Reader",
                        "StorageBlobDataOwner",
                        "StorageBlobDataReader",
                        "StorageBlobDataContributor"
                      ]
                    },
                    "roleNameGuid": {
                      "type": "string",
                      "defaultValue": "[guid(parameters('saName'), parameters('builtInRoleType'), resourceGroup().name)]",
                      "metadata": {
                        "description": "A new GUID used to identify the role assignment"
                      }
                    }
                  },
                  "variables": {
                    "role": {
                      "Owner": "[format('/subscriptions/{0}/providers/Microsoft.Authorization/roleDefinitions/8e3af657-a8ff-443c-a75c-2fe8c4bcb635', subscription().subscriptionId)]",
                      "Contributor": "[format('/subscriptions/{0}/providers/Microsoft.Authorization/roleDefinitions/b24988ac-6180-42a0-ab88-20f7382dd24c', subscription().subscriptionId)]",
                      "Reader": "[format('/subscriptions/{0}/providers/Microsoft.Authorization/roleDefinitions/acdd72a7-3385-48ef-bd42-f606fba81ae7', subscription().subscriptionId)]",
                      "StorageBlobDataOwner": "/subscriptions/{subscriptionId}/providers/Microsoft.Authorization/roleDefinitions/b7e6dc6d-f1e8-4753-8033-0f276bb0955b",
                      "StorageBlobDataReader": "/subscriptions/{subscriptionId}/providers/Microsoft.Authorization/roleDefinitions/2a2b9908-6ea1-4ae2-8e65-a410df84e7d1",
                      "StorageBlobDataContributor": "/subscriptions/{subscriptionId}/providers/Microsoft.Authorization/roleDefinitions/ba92f5b4-2d11-453d-a403-e96b0029c9fe"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2020-04-01-preview",
                      "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('saName'))]",
                      "name": "[parameters('roleNameGuid')]",
                      "properties": {
                        "description": "Assign storage Role",
                        "principalId": "[parameters('principalId')]",
                        "principalType": "ServicePrincipal",
                        "roleDefinitionId": "[variables('role')[parameters('builtInRoleType')]]"
                      }
                    }
                  ]
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('batchManagedIdentity'))]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('rgAzureBatch')), 'Microsoft.Resources/deployments', format('dpl-{0}-batchStorageAccounts', uniqueString(deployment().name, parameters('location'))))]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('dpl-{0}-batchBuildAcr', uniqueString(deployment().name, parameters('location')))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[variables('acrBuildName')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.10.61.36676",
                      "templateHash": "16993227065818767680"
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "maxLength": 50,
                      "minLength": 5,
                      "metadata": {
                        "description": "Required. Name of your Azure container registry"
                      }
                    },
                    "acrAdminUserEnabled": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. Enable admin user that have push / pull permission to the registry."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "Optional. Location for all resources."
                      }
                    },
                    "roleAssignments": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Array of role assignment objects that contain the 'roleDefinitionIdOrName' and 'principalId' to define RBAC role assignments on this resource. In the roleDefinitionIdOrName attribute, you can provide either the display name of the role definition, or it's fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'"
                      }
                    },
                    "privateEndpoints": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Configuration Details for private endpoints."
                      }
                    },
                    "acrSku": {
                      "type": "string",
                      "defaultValue": "Basic",
                      "allowedValues": [
                        "Basic",
                        "Standard",
                        "Premium"
                      ],
                      "metadata": {
                        "description": "Optional. Tier of your Azure container registry."
                      }
                    },
                    "quarantinePolicyStatus": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. The value that indicates whether the policy is enabled or not."
                      }
                    },
                    "trustPolicyStatus": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. The value that indicates whether the policy is enabled or not."
                      }
                    },
                    "retentionPolicyStatus": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. The value that indicates whether the policy is enabled or not."
                      }
                    },
                    "retentionPolicyDays": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. The number of days to retain an untagged manifest after which it gets purged."
                      }
                    },
                    "dataEndpointEnabled": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. Enable a single data endpoint per region for serving data. Not relevant in case of disabled public access."
                      }
                    },
                    "publicNetworkAccess": {
                      "type": "string",
                      "defaultValue": "Enabled",
                      "metadata": {
                        "description": "Optional. Whether or not public network access is allowed for the container registry. - Enabled or Disabled"
                      }
                    },
                    "networkRuleBypassOptions": {
                      "type": "string",
                      "defaultValue": "AzureServices",
                      "metadata": {
                        "description": "Optional. Whether to allow trusted Azure services to access a network restricted registry. Not relevant in case of public access. - AzureServices or None"
                      }
                    },
                    "lock": {
                      "type": "string",
                      "defaultValue": "NotSpecified",
                      "metadata": {
                        "description": "Optional. Specify the type of lock."
                      },
                      "allowedValues": [
                        "CanNotDelete",
                        "NotSpecified",
                        "ReadOnly"
                      ]
                    },
                    "systemAssignedIdentity": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. Enables system assigned managed identity on the resource."
                      }
                    },
                    "userAssignedIdentities": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. The ID(s) to assign to the resource."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Tags of the resource."
                      }
                    },
                    "cuaId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Customer Usage Attribution ID (GUID). This GUID must be previously registered"
                      }
                    },
                    "logsToEnable": {
                      "type": "array",
                      "defaultValue": [
                        "ContainerRegistryRepositoryEvents",
                        "ContainerRegistryLoginEvents"
                      ],
                      "allowedValues": [
                        "ContainerRegistryRepositoryEvents",
                        "ContainerRegistryLoginEvents"
                      ],
                      "metadata": {
                        "description": "Optional. The name of logs that will be streamed."
                      }
                    },
                    "metricsToEnable": {
                      "type": "array",
                      "defaultValue": [
                        "AllMetrics"
                      ],
                      "allowedValues": [
                        "AllMetrics"
                      ],
                      "metadata": {
                        "description": "Optional. The name of metrics that will be streamed."
                      }
                    },
                    "diagnosticLogsRetentionInDays": {
                      "type": "int",
                      "defaultValue": 365,
                      "maxValue": 365,
                      "minValue": 0,
                      "metadata": {
                        "description": "Optional. Specifies the number of days that logs will be kept for; a value of 0 will retain data indefinitely."
                      }
                    },
                    "diagnosticStorageAccountId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Resource ID of the diagnostic storage account."
                      }
                    },
                    "workspaceId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Resource ID of log analytics."
                      }
                    },
                    "eventHubAuthorizationRuleId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Resource ID of the event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                      }
                    },
                    "eventHubName": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Name of the event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category."
                      }
                    }
                  },
                  "variables": {
                    "copy": [
                      {
                        "name": "diagnosticsLogs",
                        "count": "[length(parameters('logsToEnable'))]",
                        "input": {
                          "category": "[parameters('logsToEnable')[copyIndex('diagnosticsLogs')]]",
                          "enabled": true,
                          "retentionPolicy": {
                            "enabled": true,
                            "days": "[parameters('diagnosticLogsRetentionInDays')]"
                          }
                        }
                      },
                      {
                        "name": "diagnosticsMetrics",
                        "count": "[length(parameters('metricsToEnable'))]",
                        "input": {
                          "category": "[parameters('metricsToEnable')[copyIndex('diagnosticsMetrics')]]",
                          "timeGrain": null,
                          "enabled": true,
                          "retentionPolicy": {
                            "enabled": true,
                            "days": "[parameters('diagnosticLogsRetentionInDays')]"
                          }
                        }
                      }
                    ],
                    "identityType": "[if(parameters('systemAssignedIdentity'), if(not(empty(parameters('userAssignedIdentities'))), 'SystemAssigned,UserAssigned', 'SystemAssigned'), if(not(empty(parameters('userAssignedIdentities'))), 'UserAssigned', 'None'))]",
                    "identity": "[if(not(equals(variables('identityType'), 'None')), createObject('type', variables('identityType'), 'userAssignedIdentities', if(not(empty(parameters('userAssignedIdentities'))), parameters('userAssignedIdentities'), null())), null())]"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.ContainerRegistry/registries",
                      "apiVersion": "2020-11-01-preview",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "identity": "[variables('identity')]",
                      "tags": "[parameters('tags')]",
                      "sku": {
                        "name": "[parameters('acrSku')]"
                      },
                      "properties": {
                        "adminUserEnabled": "[parameters('acrAdminUserEnabled')]",
                        "policies": {
                          "quarantinePolicy": {
                            "status": "[if(empty(parameters('quarantinePolicyStatus')), null(), parameters('quarantinePolicyStatus'))]"
                          },
                          "trustPolicy": {
                            "type": "Notary",
                            "status": "[if(empty(parameters('trustPolicyStatus')), null(), parameters('trustPolicyStatus'))]"
                          },
                          "retentionPolicy": {
                            "days": "[if(empty(parameters('retentionPolicyDays')), null(), int(parameters('retentionPolicyDays')))]",
                            "status": "[if(empty(parameters('retentionPolicyStatus')), null(), parameters('retentionPolicyStatus'))]"
                          }
                        },
                        "dataEndpointEnabled": "[parameters('dataEndpointEnabled')]",
                        "publicNetworkAccess": "[parameters('publicNetworkAccess')]",
                        "networkRuleBypassOptions": "[parameters('networkRuleBypassOptions')]"
                      }
                    },
                    {
                      "condition": "[not(equals(parameters('lock'), 'NotSpecified'))]",
                      "type": "Microsoft.Authorization/locks",
                      "apiVersion": "2016-09-01",
                      "scope": "[format('Microsoft.ContainerRegistry/registries/{0}', parameters('name'))]",
                      "name": "[format('{0}-{1}-lock', parameters('name'), parameters('lock'))]",
                      "properties": {
                        "level": "[parameters('lock')]",
                        "notes": "[if(equals(parameters('lock'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot modify the resource or child resources.')]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.ContainerRegistry/registries', parameters('name'))]"
                      ]
                    },
                    {
                      "condition": "[or(or(or(not(empty(parameters('diagnosticStorageAccountId'))), not(empty(parameters('workspaceId')))), not(empty(parameters('eventHubAuthorizationRuleId')))), not(empty(parameters('eventHubName'))))]",
                      "type": "Microsoft.Insights/diagnosticSettings",
                      "apiVersion": "2021-05-01-preview",
                      "scope": "[format('Microsoft.ContainerRegistry/registries/{0}', parameters('name'))]",
                      "name": "[format('{0}-diagnosticSettings', parameters('name'))]",
                      "properties": {
                        "storageAccountId": "[if(not(empty(parameters('diagnosticStorageAccountId'))), parameters('diagnosticStorageAccountId'), null())]",
                        "workspaceId": "[if(not(empty(parameters('workspaceId'))), parameters('workspaceId'), null())]",
                        "eventHubAuthorizationRuleId": "[if(not(empty(parameters('eventHubAuthorizationRuleId'))), parameters('eventHubAuthorizationRuleId'), null())]",
                        "eventHubName": "[if(not(empty(parameters('eventHubName'))), parameters('eventHubName'), null())]",
                        "metrics": "[variables('diagnosticsMetrics')]",
                        "logs": "[variables('diagnosticsLogs')]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.ContainerRegistry/registries', parameters('name'))]"
                      ]
                    },
                    {
                      "condition": "[not(empty(parameters('cuaId')))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('pid-{0}', parameters('cuaId'))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {},
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.10.61.36676",
                              "templateHash": "4193470495622901480"
                            }
                          },
                          "resources": []
                        }
                      }
                    },
                    {
                      "copy": {
                        "name": "registry_rbac",
                        "count": "[length(parameters('roleAssignments'))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('{0}-ContainerRegistry-Rbac-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "principalIds": {
                            "value": "[parameters('roleAssignments')[copyIndex()].principalIds]"
                          },
                          "roleDefinitionIdOrName": {
                            "value": "[parameters('roleAssignments')[copyIndex()].roleDefinitionIdOrName]"
                          },
                          "principalType": {
                            "value": "[parameters('roleAssignments')[copyIndex()].principalType]"
                          },
                          "resourceId": {
                            "value": "[resourceId('Microsoft.ContainerRegistry/registries', parameters('name'))]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.10.61.36676",
                              "templateHash": "362362226205302491"
                            }
                          },
                          "parameters": {
                            "principalIds": {
                              "type": "array"
                            },
                            "roleDefinitionIdOrName": {
                              "type": "string"
                            },
                            "resourceId": {
                              "type": "string"
                            },
                            "principalType": {
                              "type": "string",
                              "allowedValues": [
                                "User",
                                "ServicePrincipal",
                                "ForeignGroup",
                                "Group"
                              ]
                            }
                          },
                          "variables": {
                            "builtInRoleNames": {
                              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                              "AcrDelete": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c2f4ef07-c644-48eb-af81-4b1b4947fb11')]",
                              "AcrImageSigner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '6cef56e8-d556-48e5-a04f-b8e64114680f')]",
                              "AcrPull": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '7f951dda-4ed3-4680-a7ca-43fe172d538d')]",
                              "AcrPush": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8311e382-0749-4cb8-b61a-304f252e45ec')]",
                              "AcrQuarantineReader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'cdda3590-29a3-44f6-95f2-9f980659eb04')]",
                              "AcrQuarantineWriter": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c8d4ff99-41c3-41a8-9f60-21dfdad59608')]",
                              "Azure Service Deploy Release Management Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '21d96096-b162-414a-8302-d8354f9d91b2')]",
                              "CAL-Custom-Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '7b266cd7-0bba-4ae2-8423-90ede5e1e898')]",
                              "Log Analytics Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '92aaf0da-9dab-42b6-94a3-d43ce8d16293')]",
                              "Log Analytics Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '73c42c96-874c-492b-b04d-ab87d138a893')]",
                              "Managed Application Contributor Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '641177b8-a67a-45b9-a033-47bc880bb21e')]",
                              "Managed Application Operator Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c7393b34-138c-406f-901b-d8cf2b17e6ae')]",
                              "Managed Applications Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b9331d33-8a36-4f8c-b097-4f54124fdb44')]",
                              "masterreader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'a48d7796-14b4-4889-afef-fbb65a93e5a2')]",
                              "Monitoring Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '749f88d5-cbae-40b8-bcfc-e573ddc772fa')]",
                              "Monitoring Metrics Publisher": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '3913510d-42f4-4e42-8a64-420c390055eb')]",
                              "Monitoring Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '43d0d8ad-25c7-4714-9337-8ba259a9fe05')]",
                              "Resource Policy Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '36243c78-bf99-498c-9df9-86d9f8d28608')]",
                              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                            }
                          },
                          "resources": [
                            {
                              "copy": {
                                "name": "roleAssignment",
                                "count": "[length(parameters('principalIds'))]"
                              },
                              "type": "Microsoft.Authorization/roleAssignments",
                              "apiVersion": "2020-04-01-preview",
                              "scope": "[format('Microsoft.ContainerRegistry/registries/{0}', last(split(parameters('resourceId'), '/')))]",
                              "name": "[guid(last(split(parameters('resourceId'), '/')), parameters('principalIds')[copyIndex()], parameters('roleDefinitionIdOrName'))]",
                              "properties": {
                                "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), parameters('roleDefinitionIdOrName')), variables('builtInRoleNames')[parameters('roleDefinitionIdOrName')], parameters('roleDefinitionIdOrName'))]",
                                "principalId": "[parameters('principalIds')[copyIndex()]]",
                                "principalType": "[parameters('principalType')]"
                              }
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.ContainerRegistry/registries', parameters('name'))]"
                      ]
                    },
                    {
                      "copy": {
                        "name": "registry_privateEndpoints",
                        "count": "[length(parameters('privateEndpoints'))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('{0}-ContainerRegistry-PrivateEndpoint-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "privateEndpointResourceId": {
                            "value": "[resourceId('Microsoft.ContainerRegistry/registries', parameters('name'))]"
                          },
                          "privateEndpointVnetLocation": {
                            "value": "[if(empty(parameters('privateEndpoints')), 'dummy', reference(split(parameters('privateEndpoints')[copyIndex()].subnetResourceId, '/subnets/')[0], '2020-06-01', 'Full').location)]"
                          },
                          "privateEndpointObj": {
                            "value": "[parameters('privateEndpoints')[copyIndex()]]"
                          },
                          "tags": {
                            "value": "[parameters('tags')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.10.61.36676",
                              "templateHash": "5781139449987624144"
                            }
                          },
                          "parameters": {
                            "privateEndpointResourceId": {
                              "type": "string"
                            },
                            "privateEndpointVnetLocation": {
                              "type": "string"
                            },
                            "privateEndpointObj": {
                              "type": "object"
                            },
                            "tags": {
                              "type": "object"
                            }
                          },
                          "variables": {
                            "privateEndpointResourceName": "[last(split(parameters('privateEndpointResourceId'), '/'))]",
                            "privateEndpoint_var": {
                              "name": "[if(contains(parameters('privateEndpointObj'), 'name'), if(empty(parameters('privateEndpointObj').name), format('{0}-{1}', variables('privateEndpointResourceName'), parameters('privateEndpointObj').service), parameters('privateEndpointObj').name), format('{0}-{1}', variables('privateEndpointResourceName'), parameters('privateEndpointObj').service))]",
                              "subnetResourceId": "[parameters('privateEndpointObj').subnetResourceId]",
                              "service": [
                                "[parameters('privateEndpointObj').service]"
                              ],
                              "privateDnsZoneResourceIds": "[if(contains(parameters('privateEndpointObj'), 'privateDnsZoneResourceIds'), parameters('privateEndpointObj').privateDnsZoneResourceIds, createArray())]",
                              "customDnsConfigs": "[if(contains(parameters('privateEndpointObj'), 'customDnsConfigs'), if(empty(parameters('privateEndpointObj').customDnsConfigs), null(), parameters('privateEndpointObj').customDnsConfigs), null())]"
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Network/privateEndpoints",
                              "apiVersion": "2021-02-01",
                              "name": "[variables('privateEndpoint_var').name]",
                              "location": "[parameters('privateEndpointVnetLocation')]",
                              "tags": "[parameters('tags')]",
                              "properties": {
                                "privateLinkServiceConnections": [
                                  {
                                    "name": "[variables('privateEndpoint_var').name]",
                                    "properties": {
                                      "privateLinkServiceId": "[parameters('privateEndpointResourceId')]",
                                      "groupIds": "[variables('privateEndpoint_var').service]"
                                    }
                                  }
                                ],
                                "manualPrivateLinkServiceConnections": [],
                                "subnet": {
                                  "id": "[variables('privateEndpoint_var').subnetResourceId]"
                                },
                                "customDnsConfigs": "[variables('privateEndpoint_var').customDnsConfigs]"
                              }
                            },
                            {
                              "condition": "[not(empty(variables('privateEndpoint_var').privateDnsZoneResourceIds))]",
                              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
                              "apiVersion": "2021-02-01",
                              "name": "[format('{0}/default', variables('privateEndpoint_var').name)]",
                              "properties": {
                                "copy": [
                                  {
                                    "name": "privateDnsZoneConfigs",
                                    "count": "[length(variables('privateEndpoint_var').privateDnsZoneResourceIds)]",
                                    "input": {
                                      "name": "[last(split(variables('privateEndpoint_var').privateDnsZoneResourceIds[copyIndex('privateDnsZoneConfigs')], '/'))]",
                                      "properties": {
                                        "privateDnsZoneId": "[variables('privateEndpoint_var').privateDnsZoneResourceIds[copyIndex('privateDnsZoneConfigs')]]"
                                      }
                                    }
                                  }
                                ]
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Network/privateEndpoints', variables('privateEndpoint_var').name)]"
                              ]
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.ContainerRegistry/registries', parameters('name'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "acrName": {
                      "type": "string",
                      "value": "[parameters('name')]",
                      "metadata": {
                        "description": "The Name of the Azure container registry."
                      }
                    },
                    "acrLoginServer": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.ContainerRegistry/registries', parameters('name')), '2019-05-01').loginServer]",
                      "metadata": {
                        "description": "The reference to the Azure container registry."
                      }
                    },
                    "acrResourceGroup": {
                      "type": "string",
                      "value": "[resourceGroup().name]",
                      "metadata": {
                        "description": "The name of the Azure container registry."
                      }
                    },
                    "acrResourceId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.ContainerRegistry/registries', parameters('name'))]",
                      "metadata": {
                        "description": "The resource ID of the Azure container registry."
                      }
                    },
                    "systemAssignedPrincipalId": {
                      "type": "string",
                      "value": "[if(parameters('systemAssignedIdentity'), reference(resourceId('Microsoft.ContainerRegistry/registries', parameters('name')), '2020-11-01-preview', 'full').identity.principalId, '')]",
                      "metadata": {
                        "description": "The principal ID of the system assigned identity."
                      }
                    }
                  }
                }
              }
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('dpl-{0}-batchAcr', uniqueString(deployment().name, parameters('location')))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[parameters('acrName')]"
                  },
                  "acrAdminUserEnabled": {
                    "value": "[parameters('acrAdminUserEnabled')]"
                  },
                  "privateEndpoints": {
                    "value": "[variables('acrPrivateEndpoints')]"
                  },
                  "acrSku": {
                    "value": "[parameters('acrSku')]"
                  },
                  "publicNetworkAccess": {
                    "value": "[parameters('acrPublicNetworkAccess')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "roleAssignments": {
                    "value": [
                      {
                        "roleDefinitionIdOrName": "AcrPush",
                        "principalIds": [
                          "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('batchManagedIdentity'))).principalId]"
                        ],
                        "principalType": "ServicePrincipal"
                      }
                    ]
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.10.61.36676",
                      "templateHash": "16993227065818767680"
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "maxLength": 50,
                      "minLength": 5,
                      "metadata": {
                        "description": "Required. Name of your Azure container registry"
                      }
                    },
                    "acrAdminUserEnabled": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. Enable admin user that have push / pull permission to the registry."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "Optional. Location for all resources."
                      }
                    },
                    "roleAssignments": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Array of role assignment objects that contain the 'roleDefinitionIdOrName' and 'principalId' to define RBAC role assignments on this resource. In the roleDefinitionIdOrName attribute, you can provide either the display name of the role definition, or it's fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'"
                      }
                    },
                    "privateEndpoints": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Configuration Details for private endpoints."
                      }
                    },
                    "acrSku": {
                      "type": "string",
                      "defaultValue": "Basic",
                      "allowedValues": [
                        "Basic",
                        "Standard",
                        "Premium"
                      ],
                      "metadata": {
                        "description": "Optional. Tier of your Azure container registry."
                      }
                    },
                    "quarantinePolicyStatus": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. The value that indicates whether the policy is enabled or not."
                      }
                    },
                    "trustPolicyStatus": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. The value that indicates whether the policy is enabled or not."
                      }
                    },
                    "retentionPolicyStatus": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. The value that indicates whether the policy is enabled or not."
                      }
                    },
                    "retentionPolicyDays": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. The number of days to retain an untagged manifest after which it gets purged."
                      }
                    },
                    "dataEndpointEnabled": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. Enable a single data endpoint per region for serving data. Not relevant in case of disabled public access."
                      }
                    },
                    "publicNetworkAccess": {
                      "type": "string",
                      "defaultValue": "Enabled",
                      "metadata": {
                        "description": "Optional. Whether or not public network access is allowed for the container registry. - Enabled or Disabled"
                      }
                    },
                    "networkRuleBypassOptions": {
                      "type": "string",
                      "defaultValue": "AzureServices",
                      "metadata": {
                        "description": "Optional. Whether to allow trusted Azure services to access a network restricted registry. Not relevant in case of public access. - AzureServices or None"
                      }
                    },
                    "lock": {
                      "type": "string",
                      "defaultValue": "NotSpecified",
                      "metadata": {
                        "description": "Optional. Specify the type of lock."
                      },
                      "allowedValues": [
                        "CanNotDelete",
                        "NotSpecified",
                        "ReadOnly"
                      ]
                    },
                    "systemAssignedIdentity": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. Enables system assigned managed identity on the resource."
                      }
                    },
                    "userAssignedIdentities": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. The ID(s) to assign to the resource."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Tags of the resource."
                      }
                    },
                    "cuaId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Customer Usage Attribution ID (GUID). This GUID must be previously registered"
                      }
                    },
                    "logsToEnable": {
                      "type": "array",
                      "defaultValue": [
                        "ContainerRegistryRepositoryEvents",
                        "ContainerRegistryLoginEvents"
                      ],
                      "allowedValues": [
                        "ContainerRegistryRepositoryEvents",
                        "ContainerRegistryLoginEvents"
                      ],
                      "metadata": {
                        "description": "Optional. The name of logs that will be streamed."
                      }
                    },
                    "metricsToEnable": {
                      "type": "array",
                      "defaultValue": [
                        "AllMetrics"
                      ],
                      "allowedValues": [
                        "AllMetrics"
                      ],
                      "metadata": {
                        "description": "Optional. The name of metrics that will be streamed."
                      }
                    },
                    "diagnosticLogsRetentionInDays": {
                      "type": "int",
                      "defaultValue": 365,
                      "maxValue": 365,
                      "minValue": 0,
                      "metadata": {
                        "description": "Optional. Specifies the number of days that logs will be kept for; a value of 0 will retain data indefinitely."
                      }
                    },
                    "diagnosticStorageAccountId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Resource ID of the diagnostic storage account."
                      }
                    },
                    "workspaceId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Resource ID of log analytics."
                      }
                    },
                    "eventHubAuthorizationRuleId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Resource ID of the event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                      }
                    },
                    "eventHubName": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Name of the event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category."
                      }
                    }
                  },
                  "variables": {
                    "copy": [
                      {
                        "name": "diagnosticsLogs",
                        "count": "[length(parameters('logsToEnable'))]",
                        "input": {
                          "category": "[parameters('logsToEnable')[copyIndex('diagnosticsLogs')]]",
                          "enabled": true,
                          "retentionPolicy": {
                            "enabled": true,
                            "days": "[parameters('diagnosticLogsRetentionInDays')]"
                          }
                        }
                      },
                      {
                        "name": "diagnosticsMetrics",
                        "count": "[length(parameters('metricsToEnable'))]",
                        "input": {
                          "category": "[parameters('metricsToEnable')[copyIndex('diagnosticsMetrics')]]",
                          "timeGrain": null,
                          "enabled": true,
                          "retentionPolicy": {
                            "enabled": true,
                            "days": "[parameters('diagnosticLogsRetentionInDays')]"
                          }
                        }
                      }
                    ],
                    "identityType": "[if(parameters('systemAssignedIdentity'), if(not(empty(parameters('userAssignedIdentities'))), 'SystemAssigned,UserAssigned', 'SystemAssigned'), if(not(empty(parameters('userAssignedIdentities'))), 'UserAssigned', 'None'))]",
                    "identity": "[if(not(equals(variables('identityType'), 'None')), createObject('type', variables('identityType'), 'userAssignedIdentities', if(not(empty(parameters('userAssignedIdentities'))), parameters('userAssignedIdentities'), null())), null())]"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.ContainerRegistry/registries",
                      "apiVersion": "2020-11-01-preview",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "identity": "[variables('identity')]",
                      "tags": "[parameters('tags')]",
                      "sku": {
                        "name": "[parameters('acrSku')]"
                      },
                      "properties": {
                        "adminUserEnabled": "[parameters('acrAdminUserEnabled')]",
                        "policies": {
                          "quarantinePolicy": {
                            "status": "[if(empty(parameters('quarantinePolicyStatus')), null(), parameters('quarantinePolicyStatus'))]"
                          },
                          "trustPolicy": {
                            "type": "Notary",
                            "status": "[if(empty(parameters('trustPolicyStatus')), null(), parameters('trustPolicyStatus'))]"
                          },
                          "retentionPolicy": {
                            "days": "[if(empty(parameters('retentionPolicyDays')), null(), int(parameters('retentionPolicyDays')))]",
                            "status": "[if(empty(parameters('retentionPolicyStatus')), null(), parameters('retentionPolicyStatus'))]"
                          }
                        },
                        "dataEndpointEnabled": "[parameters('dataEndpointEnabled')]",
                        "publicNetworkAccess": "[parameters('publicNetworkAccess')]",
                        "networkRuleBypassOptions": "[parameters('networkRuleBypassOptions')]"
                      }
                    },
                    {
                      "condition": "[not(equals(parameters('lock'), 'NotSpecified'))]",
                      "type": "Microsoft.Authorization/locks",
                      "apiVersion": "2016-09-01",
                      "scope": "[format('Microsoft.ContainerRegistry/registries/{0}', parameters('name'))]",
                      "name": "[format('{0}-{1}-lock', parameters('name'), parameters('lock'))]",
                      "properties": {
                        "level": "[parameters('lock')]",
                        "notes": "[if(equals(parameters('lock'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot modify the resource or child resources.')]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.ContainerRegistry/registries', parameters('name'))]"
                      ]
                    },
                    {
                      "condition": "[or(or(or(not(empty(parameters('diagnosticStorageAccountId'))), not(empty(parameters('workspaceId')))), not(empty(parameters('eventHubAuthorizationRuleId')))), not(empty(parameters('eventHubName'))))]",
                      "type": "Microsoft.Insights/diagnosticSettings",
                      "apiVersion": "2021-05-01-preview",
                      "scope": "[format('Microsoft.ContainerRegistry/registries/{0}', parameters('name'))]",
                      "name": "[format('{0}-diagnosticSettings', parameters('name'))]",
                      "properties": {
                        "storageAccountId": "[if(not(empty(parameters('diagnosticStorageAccountId'))), parameters('diagnosticStorageAccountId'), null())]",
                        "workspaceId": "[if(not(empty(parameters('workspaceId'))), parameters('workspaceId'), null())]",
                        "eventHubAuthorizationRuleId": "[if(not(empty(parameters('eventHubAuthorizationRuleId'))), parameters('eventHubAuthorizationRuleId'), null())]",
                        "eventHubName": "[if(not(empty(parameters('eventHubName'))), parameters('eventHubName'), null())]",
                        "metrics": "[variables('diagnosticsMetrics')]",
                        "logs": "[variables('diagnosticsLogs')]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.ContainerRegistry/registries', parameters('name'))]"
                      ]
                    },
                    {
                      "condition": "[not(empty(parameters('cuaId')))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('pid-{0}', parameters('cuaId'))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {},
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.10.61.36676",
                              "templateHash": "4193470495622901480"
                            }
                          },
                          "resources": []
                        }
                      }
                    },
                    {
                      "copy": {
                        "name": "registry_rbac",
                        "count": "[length(parameters('roleAssignments'))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('{0}-ContainerRegistry-Rbac-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "principalIds": {
                            "value": "[parameters('roleAssignments')[copyIndex()].principalIds]"
                          },
                          "roleDefinitionIdOrName": {
                            "value": "[parameters('roleAssignments')[copyIndex()].roleDefinitionIdOrName]"
                          },
                          "principalType": {
                            "value": "[parameters('roleAssignments')[copyIndex()].principalType]"
                          },
                          "resourceId": {
                            "value": "[resourceId('Microsoft.ContainerRegistry/registries', parameters('name'))]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.10.61.36676",
                              "templateHash": "362362226205302491"
                            }
                          },
                          "parameters": {
                            "principalIds": {
                              "type": "array"
                            },
                            "roleDefinitionIdOrName": {
                              "type": "string"
                            },
                            "resourceId": {
                              "type": "string"
                            },
                            "principalType": {
                              "type": "string",
                              "allowedValues": [
                                "User",
                                "ServicePrincipal",
                                "ForeignGroup",
                                "Group"
                              ]
                            }
                          },
                          "variables": {
                            "builtInRoleNames": {
                              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                              "AcrDelete": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c2f4ef07-c644-48eb-af81-4b1b4947fb11')]",
                              "AcrImageSigner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '6cef56e8-d556-48e5-a04f-b8e64114680f')]",
                              "AcrPull": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '7f951dda-4ed3-4680-a7ca-43fe172d538d')]",
                              "AcrPush": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8311e382-0749-4cb8-b61a-304f252e45ec')]",
                              "AcrQuarantineReader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'cdda3590-29a3-44f6-95f2-9f980659eb04')]",
                              "AcrQuarantineWriter": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c8d4ff99-41c3-41a8-9f60-21dfdad59608')]",
                              "Azure Service Deploy Release Management Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '21d96096-b162-414a-8302-d8354f9d91b2')]",
                              "CAL-Custom-Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '7b266cd7-0bba-4ae2-8423-90ede5e1e898')]",
                              "Log Analytics Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '92aaf0da-9dab-42b6-94a3-d43ce8d16293')]",
                              "Log Analytics Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '73c42c96-874c-492b-b04d-ab87d138a893')]",
                              "Managed Application Contributor Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '641177b8-a67a-45b9-a033-47bc880bb21e')]",
                              "Managed Application Operator Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c7393b34-138c-406f-901b-d8cf2b17e6ae')]",
                              "Managed Applications Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b9331d33-8a36-4f8c-b097-4f54124fdb44')]",
                              "masterreader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'a48d7796-14b4-4889-afef-fbb65a93e5a2')]",
                              "Monitoring Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '749f88d5-cbae-40b8-bcfc-e573ddc772fa')]",
                              "Monitoring Metrics Publisher": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '3913510d-42f4-4e42-8a64-420c390055eb')]",
                              "Monitoring Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '43d0d8ad-25c7-4714-9337-8ba259a9fe05')]",
                              "Resource Policy Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '36243c78-bf99-498c-9df9-86d9f8d28608')]",
                              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                            }
                          },
                          "resources": [
                            {
                              "copy": {
                                "name": "roleAssignment",
                                "count": "[length(parameters('principalIds'))]"
                              },
                              "type": "Microsoft.Authorization/roleAssignments",
                              "apiVersion": "2020-04-01-preview",
                              "scope": "[format('Microsoft.ContainerRegistry/registries/{0}', last(split(parameters('resourceId'), '/')))]",
                              "name": "[guid(last(split(parameters('resourceId'), '/')), parameters('principalIds')[copyIndex()], parameters('roleDefinitionIdOrName'))]",
                              "properties": {
                                "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), parameters('roleDefinitionIdOrName')), variables('builtInRoleNames')[parameters('roleDefinitionIdOrName')], parameters('roleDefinitionIdOrName'))]",
                                "principalId": "[parameters('principalIds')[copyIndex()]]",
                                "principalType": "[parameters('principalType')]"
                              }
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.ContainerRegistry/registries', parameters('name'))]"
                      ]
                    },
                    {
                      "copy": {
                        "name": "registry_privateEndpoints",
                        "count": "[length(parameters('privateEndpoints'))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('{0}-ContainerRegistry-PrivateEndpoint-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "privateEndpointResourceId": {
                            "value": "[resourceId('Microsoft.ContainerRegistry/registries', parameters('name'))]"
                          },
                          "privateEndpointVnetLocation": {
                            "value": "[if(empty(parameters('privateEndpoints')), 'dummy', reference(split(parameters('privateEndpoints')[copyIndex()].subnetResourceId, '/subnets/')[0], '2020-06-01', 'Full').location)]"
                          },
                          "privateEndpointObj": {
                            "value": "[parameters('privateEndpoints')[copyIndex()]]"
                          },
                          "tags": {
                            "value": "[parameters('tags')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.10.61.36676",
                              "templateHash": "5781139449987624144"
                            }
                          },
                          "parameters": {
                            "privateEndpointResourceId": {
                              "type": "string"
                            },
                            "privateEndpointVnetLocation": {
                              "type": "string"
                            },
                            "privateEndpointObj": {
                              "type": "object"
                            },
                            "tags": {
                              "type": "object"
                            }
                          },
                          "variables": {
                            "privateEndpointResourceName": "[last(split(parameters('privateEndpointResourceId'), '/'))]",
                            "privateEndpoint_var": {
                              "name": "[if(contains(parameters('privateEndpointObj'), 'name'), if(empty(parameters('privateEndpointObj').name), format('{0}-{1}', variables('privateEndpointResourceName'), parameters('privateEndpointObj').service), parameters('privateEndpointObj').name), format('{0}-{1}', variables('privateEndpointResourceName'), parameters('privateEndpointObj').service))]",
                              "subnetResourceId": "[parameters('privateEndpointObj').subnetResourceId]",
                              "service": [
                                "[parameters('privateEndpointObj').service]"
                              ],
                              "privateDnsZoneResourceIds": "[if(contains(parameters('privateEndpointObj'), 'privateDnsZoneResourceIds'), parameters('privateEndpointObj').privateDnsZoneResourceIds, createArray())]",
                              "customDnsConfigs": "[if(contains(parameters('privateEndpointObj'), 'customDnsConfigs'), if(empty(parameters('privateEndpointObj').customDnsConfigs), null(), parameters('privateEndpointObj').customDnsConfigs), null())]"
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Network/privateEndpoints",
                              "apiVersion": "2021-02-01",
                              "name": "[variables('privateEndpoint_var').name]",
                              "location": "[parameters('privateEndpointVnetLocation')]",
                              "tags": "[parameters('tags')]",
                              "properties": {
                                "privateLinkServiceConnections": [
                                  {
                                    "name": "[variables('privateEndpoint_var').name]",
                                    "properties": {
                                      "privateLinkServiceId": "[parameters('privateEndpointResourceId')]",
                                      "groupIds": "[variables('privateEndpoint_var').service]"
                                    }
                                  }
                                ],
                                "manualPrivateLinkServiceConnections": [],
                                "subnet": {
                                  "id": "[variables('privateEndpoint_var').subnetResourceId]"
                                },
                                "customDnsConfigs": "[variables('privateEndpoint_var').customDnsConfigs]"
                              }
                            },
                            {
                              "condition": "[not(empty(variables('privateEndpoint_var').privateDnsZoneResourceIds))]",
                              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
                              "apiVersion": "2021-02-01",
                              "name": "[format('{0}/default', variables('privateEndpoint_var').name)]",
                              "properties": {
                                "copy": [
                                  {
                                    "name": "privateDnsZoneConfigs",
                                    "count": "[length(variables('privateEndpoint_var').privateDnsZoneResourceIds)]",
                                    "input": {
                                      "name": "[last(split(variables('privateEndpoint_var').privateDnsZoneResourceIds[copyIndex('privateDnsZoneConfigs')], '/'))]",
                                      "properties": {
                                        "privateDnsZoneId": "[variables('privateEndpoint_var').privateDnsZoneResourceIds[copyIndex('privateDnsZoneConfigs')]]"
                                      }
                                    }
                                  }
                                ]
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Network/privateEndpoints', variables('privateEndpoint_var').name)]"
                              ]
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.ContainerRegistry/registries', parameters('name'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "acrName": {
                      "type": "string",
                      "value": "[parameters('name')]",
                      "metadata": {
                        "description": "The Name of the Azure container registry."
                      }
                    },
                    "acrLoginServer": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.ContainerRegistry/registries', parameters('name')), '2019-05-01').loginServer]",
                      "metadata": {
                        "description": "The reference to the Azure container registry."
                      }
                    },
                    "acrResourceGroup": {
                      "type": "string",
                      "value": "[resourceGroup().name]",
                      "metadata": {
                        "description": "The name of the Azure container registry."
                      }
                    },
                    "acrResourceId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.ContainerRegistry/registries', parameters('name'))]",
                      "metadata": {
                        "description": "The resource ID of the Azure container registry."
                      }
                    },
                    "systemAssignedPrincipalId": {
                      "type": "string",
                      "value": "[if(parameters('systemAssignedIdentity'), reference(resourceId('Microsoft.ContainerRegistry/registries', parameters('name')), '2020-11-01-preview', 'full').identity.principalId, '')]",
                      "metadata": {
                        "description": "The principal ID of the system assigned identity."
                      }
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('batchManagedIdentity'))]",
                "[resourceId('Microsoft.Resources/deployments', format('dpl-{0}-batchBuildAcr', uniqueString(deployment().name, parameters('location'))))]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('dpl-{0}-RG-Contrib-MI', uniqueString(deployment().name, parameters('location')))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "builtInRoleType": {
                    "value": "Contributor"
                  },
                  "principalId": {
                    "value": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('batchManagedIdentity'))).principalId]"
                  },
                  "principalType": {
                    "value": "ServicePrincipal"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.10.61.36676",
                      "templateHash": "10779920647375836820"
                    }
                  },
                  "parameters": {
                    "principalId": {
                      "type": "string"
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]"
                    },
                    "builtInRoleType": {
                      "type": "string",
                      "metadata": {
                        "description": "Built-in role to assign"
                      },
                      "allowedValues": [
                        "Owner",
                        "Contributor",
                        "Reader",
                        "NetworkContributor"
                      ]
                    },
                    "roleNameGuid": {
                      "type": "string",
                      "defaultValue": "[guid(parameters('principalId'), parameters('builtInRoleType'), subscription().displayName, parameters('location'), resourceGroup().name)]",
                      "metadata": {
                        "description": "A new GUID used to identify the role assignment"
                      }
                    },
                    "principalType": {
                      "type": "string",
                      "defaultValue": "ServicePrincipal",
                      "allowedValues": [
                        "User",
                        "ServicePrincipal",
                        "ForeignGroup",
                        "Group"
                      ]
                    }
                  },
                  "variables": {
                    "role": {
                      "Owner": "[format('/subscriptions/{0}/providers/Microsoft.Authorization/roleDefinitions/8e3af657-a8ff-443c-a75c-2fe8c4bcb635', subscription().subscriptionId)]",
                      "Contributor": "[format('/subscriptions/{0}/providers/Microsoft.Authorization/roleDefinitions/b24988ac-6180-42a0-ab88-20f7382dd24c', subscription().subscriptionId)]",
                      "Reader": "[format('/subscriptions/{0}/providers/Microsoft.Authorization/roleDefinitions/acdd72a7-3385-48ef-bd42-f606fba81ae7', subscription().subscriptionId)]",
                      "NetworkContributor": "[format('/subscriptions/{0}/providers/Microsoft.Authorization/roleDefinitions/4d97b98b-1d4f-4787-a291-c67834d212e7', subscription().subscriptionId)]"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2020-04-01-preview",
                      "name": "[parameters('roleNameGuid')]",
                      "properties": {
                        "roleDefinitionId": "[variables('role')[parameters('builtInRoleType')]]",
                        "principalId": "[parameters('principalId')]",
                        "principalType": "[parameters('principalType')]"
                      }
                    }
                  ]
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('batchManagedIdentity'))]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('dpl-{0}-Check-KV-Image', uniqueString(deployment().name, parameters('location')))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "acrBuildName": {
                    "value": "[variables('acrBuildName')]"
                  },
                  "acrName": {
                    "value": "[parameters('acrName')]"
                  },
                  "acrImageName": {
                    "value": "[variables('acrImageName')]"
                  },
                  "managedIdentityName": {
                    "value": "[variables('batchManagedIdentity')]"
                  },
                  "primaryScriptUri": {
                    "value": "[parameters('primaryScriptBuildKvTestImage')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.10.61.36676",
                      "templateHash": "5846562035348909417"
                    }
                  },
                  "parameters": {
                    "acrBuildName": {
                      "type": "string"
                    },
                    "acrName": {
                      "type": "string"
                    },
                    "acrImageName": {
                      "type": "string"
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]"
                    },
                    "managedIdentityName": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {}
                    },
                    "azureCliVersion": {
                      "type": "string",
                      "defaultValue": "2.30.0"
                    },
                    "currentTime": {
                      "type": "string",
                      "defaultValue": "[utcNow()]"
                    },
                    "primaryScriptUri": {
                      "type": "string"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Resources/deploymentScripts",
                      "apiVersion": "2019-10-01-preview",
                      "name": "deployTestContainerToACR",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "kind": "AzureCLI",
                      "identity": {
                        "type": "UserAssigned",
                        "userAssignedIdentities": {
                          "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName')))]": {}
                        }
                      },
                      "properties": {
                        "azCliVersion": "[parameters('azureCliVersion')]",
                        "arguments": "[format(' {0} {1} {2}', parameters('acrName'), parameters('acrImageName'), parameters('acrBuildName'))]",
                        "primaryScriptUri": "[parameters('primaryScriptUri')]",
                        "cleanupPreference": "OnSuccess",
                        "retentionInterval": "P1D",
                        "forceUpdateTag": "[parameters('currentTime')]"
                      }
                    }
                  ],
                  "outputs": {
                    "scriptLogs": {
                      "type": "string",
                      "value": "[reference(format('{0}/logs/default', resourceId('Microsoft.Resources/deploymentScripts', 'deployTestContainerToACR')), '2019-10-01-preview', 'Full').properties.log]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', format('dpl-{0}-RG-Contrib-MI', uniqueString(deployment().name, parameters('location'))))]",
                "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('batchManagedIdentity'))]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('dpl-{0}-batchAccount', uniqueString(deployment().name, parameters('location')))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "batchAccountName": {
                    "value": "[parameters('batchAccountName')]"
                  },
                  "batchKeyVault": {
                    "value": "[variables('kvName')]"
                  },
                  "batchManagedIdentity": {
                    "value": "[variables('batchManagedIdentity')]"
                  },
                  "batchStorageAccount": {
                    "value": "[parameters('saNameAzBatch')]"
                  },
                  "privateEndpointSubnetId": {
                    "value": "[variables('privateEndpointSubnetId')]"
                  },
                  "rgDNSZone": {
                    "value": "[parameters('rgHub')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.10.61.36676",
                      "templateHash": "3112664960187566373"
                    }
                  },
                  "parameters": {
                    "batchAccountName": {
                      "type": "string"
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]"
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {}
                    },
                    "batchManagedIdentity": {
                      "type": "string"
                    },
                    "batchStorageAccount": {
                      "type": "string"
                    },
                    "batchKeyVault": {
                      "type": "string"
                    },
                    "privateEndpointSubnetId": {
                      "type": "string"
                    },
                    "rgDNSZone": {
                      "type": "string"
                    }
                  },
                  "variables": {
                    "batchPrivateDnsZoneName": "[format('privatelink.{0}.batch.azure.com', parameters('location'))]"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Batch/batchAccounts",
                      "apiVersion": "2021-06-01",
                      "name": "[parameters('batchAccountName')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "identity": {
                        "type": "UserAssigned",
                        "userAssignedIdentities": {
                          "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('batchManagedIdentity')))]": {}
                        }
                      },
                      "properties": {
                        "allowedAuthenticationModes": [
                          "AAD",
                          "TaskAuthenticationToken"
                        ],
                        "autoStorage": {
                          "storageAccountId": "[resourceId('Microsoft.Storage/storageAccounts', parameters('batchStorageAccount'))]",
                          "authenticationMode": "BatchAccountManagedIdentity",
                          "nodeIdentityReference": {
                            "resourceId": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('batchManagedIdentity'))]"
                          }
                        },
                        "poolAllocationMode": "UserSubscription",
                        "publicNetworkAccess": "Disabled",
                        "keyVaultReference": {
                          "url": "[reference(resourceId('Microsoft.KeyVault/vaults', parameters('batchKeyVault')), '2021-06-01-preview').vaultUri]",
                          "id": "[resourceId('Microsoft.KeyVault/vaults', parameters('batchKeyVault'))]"
                        }
                      }
                    },
                    {
                      "type": "Microsoft.Network/privateEndpoints",
                      "apiVersion": "2021-03-01",
                      "name": "[format('{0}-pl', parameters('batchAccountName'))]",
                      "tags": "[parameters('tags')]",
                      "location": "[parameters('location')]",
                      "properties": {
                        "subnet": {
                          "id": "[parameters('privateEndpointSubnetId')]"
                        },
                        "privateLinkServiceConnections": [
                          {
                            "name": "[format('{0}-pl', parameters('batchAccountName'))]",
                            "properties": {
                              "privateLinkServiceId": "[resourceId('Microsoft.Batch/batchAccounts', parameters('batchAccountName'))]",
                              "groupIds": [
                                "batchAccount"
                              ]
                            }
                          }
                        ]
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Batch/batchAccounts', parameters('batchAccountName'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('deployEndpointAEntry-{0}', parameters('batchAccountName'))]",
                      "resourceGroup": "[parameters('rgDNSZone')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "ipAddress": {
                            "value": "[reference(resourceId('Microsoft.Network/privateEndpoints', format('{0}-pl', parameters('batchAccountName')))).customDnsConfigs[0].ipAddresses[0]]"
                          },
                          "privateDnsZoneName": {
                            "value": "[variables('batchPrivateDnsZoneName')]"
                          },
                          "serviceName": {
                            "value": "[parameters('batchAccountName')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.10.61.36676",
                              "templateHash": "13254199335564405154"
                            }
                          },
                          "parameters": {
                            "privateDnsZoneName": {
                              "type": "string"
                            },
                            "serviceName": {
                              "type": "string"
                            },
                            "ipAddress": {
                              "type": "string"
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Network/privateDnsZones/A",
                              "apiVersion": "2020-06-01",
                              "name": "[format('{0}/{1}', parameters('privateDnsZoneName'), parameters('serviceName'))]",
                              "properties": {
                                "ttl": 3600,
                                "aRecords": [
                                  {
                                    "ipv4Address": "[parameters('ipAddress')]"
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Batch/batchAccounts', parameters('batchAccountName'))]",
                        "[resourceId('Microsoft.Network/privateEndpoints', format('{0}-pl', parameters('batchAccountName')))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "privateEndpointIp": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Network/privateEndpoints', format('{0}-pl', parameters('batchAccountName')))).customDnsConfigs[0].ipAddresses[0]]"
                    },
                    "privateEndpointFqdn": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Network/privateEndpoints', format('{0}-pl', parameters('batchAccountName')))).customDnsConfigs[0].fqdn]"
                    }
                  }
                }
              },
              "dependsOn": [
                "assignStorageAccountRole",
                "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('batchManagedIdentity'))]",
                "[resourceId('Microsoft.Resources/deployments', format('dpl-{0}-batchKeyVault', uniqueString(deployment().name, parameters('location'))))]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('rgAzureBatch')), 'Microsoft.Resources/deployments', format('dpl-{0}-batchStorageAccounts', uniqueString(deployment().name, parameters('location'))))]",
                "[subscriptionResourceId('Microsoft.Resources/deployments', format('dpl-{0}-batchRoleAssignment', uniqueString(deployment().name, parameters('location'))))]",
                "[resourceId('Microsoft.Resources/deployments', format('dpl-{0}-batchKV-Policy-MI-add', uniqueString(deployment().name, parameters('location'))))]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('dpl-{0}-batchPool-main', uniqueString(deployment().name, parameters('location')))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "batchAccountName": {
                    "value": "[parameters('batchAccountName')]"
                  },
                  "batchManagedIdentity": {
                    "value": "[variables('batchManagedIdentity')]"
                  },
                  "batchNodeSku": {
                    "value": "[parameters('batchNodeSku')]"
                  },
                  "acrName": {
                    "value": "[parameters('acrName')]"
                  },
                  "acrImageName": {
                    "value": "[variables('acrImageName')]"
                  },
                  "appInsightsInstrumentKey": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('rgHub')), 'Microsoft.Insights/components', parameters('appInsightsName')), '2020-02-02').InstrumentationKey]"
                  },
                  "appInsightsAppId": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('rgHub')), 'Microsoft.Insights/components', parameters('appInsightsName')), '2020-02-02').ApplicationId]"
                  },
                  "batchPoolSubnetId_Linux": {
                    "value": "[variables('batchPoolSubnetId_Linux')]"
                  },
                  "batchPoolSubnetId_LinuxNoSsh": {
                    "value": "[variables('batchPoolSubnetId_LinuxNoSsh')]"
                  },
                  "batchPoolSubnetId_Windows": {
                    "value": "[variables('batchPoolSubnetId_Windows')]"
                  },
                  "saNameStorageSMB": {
                    "value": "[parameters('saNameStorageSMB')]"
                  },
                  "saNameStorageNFS": {
                    "value": "[parameters('saNameStorageNFS')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.10.61.36676",
                      "templateHash": "14942515476714450636"
                    }
                  },
                  "parameters": {
                    "batchAccountName": {
                      "type": "string"
                    },
                    "batchManagedIdentity": {
                      "type": "string"
                    },
                    "acrName": {
                      "type": "string"
                    },
                    "acrImageName": {
                      "type": "string"
                    },
                    "batchNodeSku": {
                      "type": "string"
                    },
                    "appInsightsInstrumentKey": {
                      "type": "string"
                    },
                    "appInsightsAppId": {
                      "type": "string"
                    },
                    "batchPoolSubnetId_Linux": {
                      "type": "string"
                    },
                    "batchPoolSubnetId_LinuxNoSsh": {
                      "type": "string"
                    },
                    "batchPoolSubnetId_Windows": {
                      "type": "string"
                    },
                    "saNameStorageSMB": {
                      "type": "string"
                    },
                    "saNameStorageNFS": {
                      "type": "string"
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]"
                    }
                  },
                  "variables": {
                    "preloadContainerImage": "[format('{0}.azurecr.io/{1}:latest', parameters('acrName'), parameters('acrImageName'))]",
                    "containerRegistryServer": "[format('{0}.azurecr.io', parameters('acrName'))]",
                    "smbShareName": "share",
                    "smbShareURL": "[format('https://{0}.file.{1}/{2}', parameters('saNameStorageSMB'), environment().suffixes.storage, variables('smbShareName'))]",
                    "nfsShareName": "container",
                    "nfsShareSource": "[format('{0}.blob.{1}:/{2}/{3}', parameters('saNameStorageNFS'), environment().suffixes.storage, parameters('saNameStorageNFS'), variables('nfsShareName'))]",
                    "nfsMountOptions": "-o sec=sys,vers=3,nolock,proto=tcp"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('dpl-{0}-batchPoolCollection', uniqueString(deployment().name, parameters('location')))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "batchAccountName": {
                            "value": "[parameters('batchAccountName')]"
                          },
                          "batchPoolObjects": {
                            "value": [
                              {
                                "poolName": "linux-dev-pool",
                                "vmSize": "[parameters('batchNodeSku')]",
                                "taskSlotsPerNode": 2,
                                "taskSchedulingPolicy": {
                                  "nodeFillType": "Pack"
                                },
                                "deploymentConfiguration": {
                                  "virtualMachineConfiguration": {
                                    "imageReference": {
                                      "publisher": "microsoft-azure-batch",
                                      "offer": "ubuntu-server-container",
                                      "sku": "20-04-lts",
                                      "version": "latest"
                                    },
                                    "nodeAgentSkuId": "batch.node.ubuntu 20.04",
                                    "containerConfiguration": {
                                      "type": "DockerCompatible",
                                      "containerImageNames": [
                                        "[variables('preloadContainerImage')]"
                                      ],
                                      "containerRegistries": [
                                        {
                                          "identityReference": {
                                            "resourceId": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('batchManagedIdentity'))]"
                                          },
                                          "registryServer": "[variables('containerRegistryServer')]"
                                        }
                                      ]
                                    }
                                  }
                                },
                                "scaleSettings": {
                                  "fixedScale": {
                                    "targetDedicatedNodes": 0,
                                    "targetLowPriorityNodes": 0,
                                    "resizeTimeout": "PT15M"
                                  }
                                },
                                "mountConfiguration": [
                                  {
                                    "nfsMountConfiguration": {
                                      "source": "[variables('nfsShareSource')]",
                                      "relativeMountPath": "shared",
                                      "mountOptions": "[variables('nfsMountOptions')]"
                                    }
                                  }
                                ],
                                "startTask": {
                                  "commandLine": "/bin/bash -c 'wget  -O - https://raw.githubusercontent.com/Azure/batch-insights/master/scripts/run-linux.sh | bash'",
                                  "environmentSettings": [
                                    {
                                      "name": "APP_INSIGHTS_INSTRUMENTATION_KEY",
                                      "value": "[parameters('appInsightsInstrumentKey')]"
                                    },
                                    {
                                      "name": "APP_INSIGHTS_APP_ID",
                                      "value": "[parameters('appInsightsAppId')]"
                                    },
                                    {
                                      "name": "BATCH_INSIGHTS_DOWNLOAD_URL",
                                      "value": "https://github.com/Azure/batch-insights/releases/download/v1.3.0/batch-insights"
                                    }
                                  ],
                                  "maxTaskRetryCount": 1,
                                  "userIdentity": {
                                    "autoUser": {
                                      "elevationLevel": "Admin",
                                      "scope": "Pool"
                                    }
                                  },
                                  "waitForSuccess": true
                                },
                                "interNodeCommunication": "Disabled",
                                "networkConfiguration": {
                                  "subnetId": "[parameters('batchPoolSubnetId_Linux')]",
                                  "publicIPAddressConfiguration": {
                                    "provision": "NoPublicIPAddresses"
                                  }
                                }
                              },
                              {
                                "poolName": "linux-prod-pool",
                                "vmSize": "[parameters('batchNodeSku')]",
                                "taskSlotsPerNode": 2,
                                "taskSchedulingPolicy": {
                                  "nodeFillType": "Pack"
                                },
                                "deploymentConfiguration": {
                                  "virtualMachineConfiguration": {
                                    "imageReference": {
                                      "publisher": "microsoft-azure-batch",
                                      "offer": "ubuntu-server-container",
                                      "sku": "20-04-lts",
                                      "version": "latest"
                                    },
                                    "nodeAgentSkuId": "batch.node.ubuntu 20.04",
                                    "containerConfiguration": {
                                      "type": "DockerCompatible",
                                      "containerImageNames": [
                                        "[variables('preloadContainerImage')]"
                                      ],
                                      "containerRegistries": [
                                        {
                                          "identityReference": {
                                            "resourceId": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('batchManagedIdentity'))]"
                                          },
                                          "registryServer": "[variables('containerRegistryServer')]"
                                        }
                                      ]
                                    }
                                  }
                                },
                                "scaleSettings": {
                                  "autoScale": {
                                    "evaluationInterval": "PT5M",
                                    "formula": "        startingNumberOfVMs = 0;\n        maxNumberofVMs = 2;\n        pendingTaskSamplePercent = $PendingTasks.GetSamplePercent(180 * TimeInterval_Second);\n        pendingTaskSamples = pendingTaskSamplePercent < 70 ? startingNumberOfVMs : avg($PendingTasks.GetSample(180 *   TimeInterval_Second));\n        $TargetDedicatedNodes=min(maxNumberofVMs, pendingTaskSamples);\n        $NodeDeallocationOption=taskcompletion \n        "
                                  }
                                },
                                "mountConfiguration": [
                                  {
                                    "nfsMountConfiguration": {
                                      "source": "[variables('nfsShareSource')]",
                                      "relativeMountPath": "shared",
                                      "mountOptions": "[variables('nfsMountOptions')]"
                                    }
                                  }
                                ],
                                "startTask": {
                                  "commandLine": "/bin/bash -c 'wget  -O - https://raw.githubusercontent.com/Azure/batch-insights/master/scripts/run-linux.sh | bash'",
                                  "environmentSettings": [
                                    {
                                      "name": "APP_INSIGHTS_INSTRUMENTATION_KEY",
                                      "value": "[parameters('appInsightsInstrumentKey')]"
                                    },
                                    {
                                      "name": "APP_INSIGHTS_APP_ID",
                                      "value": "[parameters('appInsightsAppId')]"
                                    },
                                    {
                                      "name": "BATCH_INSIGHTS_DOWNLOAD_URL",
                                      "value": "https://github.com/Azure/batch-insights/releases/download/v1.3.0/batch-insights"
                                    }
                                  ],
                                  "maxTaskRetryCount": 1,
                                  "userIdentity": {
                                    "autoUser": {
                                      "elevationLevel": "Admin",
                                      "scope": "Pool"
                                    }
                                  },
                                  "waitForSuccess": true
                                },
                                "interNodeCommunication": "Disabled",
                                "networkConfiguration": {
                                  "subnetId": "[parameters('batchPoolSubnetId_LinuxNoSsh')]",
                                  "publicIPAddressConfiguration": {
                                    "provision": "NoPublicIPAddresses"
                                  }
                                }
                              },
                              {
                                "poolName": "windows-dev-pool",
                                "vmSize": "[parameters('batchNodeSku')]",
                                "taskSlotsPerNode": 2,
                                "taskSchedulingPolicy": {
                                  "nodeFillType": "Pack"
                                },
                                "deploymentConfiguration": {
                                  "virtualMachineConfiguration": {
                                    "imageReference": {
                                      "publisher": "microsoftwindowsserver",
                                      "offer": "windowsserver",
                                      "sku": "2022-datacenter-smalldisk",
                                      "version": "latest"
                                    },
                                    "nodeAgentSkuId": "batch.node.windows amd64",
                                    "windowsConfiguration": {
                                      "enableAutomaticUpdates": true
                                    }
                                  }
                                },
                                "scaleSettings": {
                                  "fixedScale": {
                                    "targetDedicatedNodes": 0,
                                    "targetLowPriorityNodes": 0,
                                    "resizeTimeout": "PT15M"
                                  }
                                },
                                "mountConfiguration": [
                                  {
                                    "azureFileShareConfiguration": {
                                      "accountKey": "[listKeys(resourceId('Microsoft.Storage/storageAccounts', parameters('saNameStorageSMB')), '2021-06-01').keys[0].value]",
                                      "accountName": "[parameters('saNameStorageSMB')]",
                                      "azureFileUrl": "[variables('smbShareURL')]",
                                      "relativeMountPath": "S"
                                    }
                                  }
                                ],
                                "startTask": {
                                  "commandLine": "cmd /c @\"%SystemRoot%\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\" -NoProfile -InputFormat None -ExecutionPolicy Bypass -Command \"iex ((New-Object System.Net.WebClient).DownloadString('https://raw.githubusercontent.com/Azure/batch-insights/master/scripts/run-windows.ps1'))\" & python-3.10.1-amd64.exe /quiet InstallAllUsers=1 PrependPath=1 Include_test=0",
                                  "resourceFiles": [
                                    {
                                      "httpUrl": "https://raw.githubusercontent.com/mocelj/AzureBatch-Secured/main/artefacts/Python/python-3.10.1-amd64.exe",
                                      "filePath": "python-3.10.1-amd64.exe"
                                    }
                                  ],
                                  "environmentSettings": [
                                    {
                                      "name": "APP_INSIGHTS_INSTRUMENTATION_KEY",
                                      "value": "[parameters('appInsightsInstrumentKey')]"
                                    },
                                    {
                                      "name": "APP_INSIGHTS_APP_ID",
                                      "value": "[parameters('appInsightsAppId')]"
                                    },
                                    {
                                      "name": "BATCH_INSIGHTS_DOWNLOAD_URL",
                                      "value": "https://github.com/Azure/batch-insights/releases/download/v1.3.0/batch-insights.exe"
                                    }
                                  ],
                                  "maxTaskRetryCount": 1,
                                  "userIdentity": {
                                    "autoUser": {
                                      "elevationLevel": "Admin",
                                      "scope": "Pool"
                                    }
                                  },
                                  "waitForSuccess": true
                                },
                                "interNodeCommunication": "Disabled",
                                "networkConfiguration": {
                                  "subnetId": "[parameters('batchPoolSubnetId_Windows')]",
                                  "publicIPAddressConfiguration": {
                                    "provision": "NoPublicIPAddresses"
                                  }
                                }
                              }
                            ]
                          },
                          "batchManagedIdentityId": {
                            "value": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('batchManagedIdentity'))]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.10.61.36676",
                              "templateHash": "13239025263675305167"
                            }
                          },
                          "parameters": {
                            "batchAccountName": {
                              "type": "string"
                            },
                            "batchManagedIdentityId": {
                              "type": "string"
                            },
                            "batchPoolObjects": {
                              "type": "array"
                            }
                          },
                          "resources": [
                            {
                              "copy": {
                                "name": "batchAccountPool",
                                "count": "[length(parameters('batchPoolObjects'))]",
                                "mode": "serial",
                                "batchSize": 1
                              },
                              "type": "Microsoft.Batch/batchAccounts/pools",
                              "apiVersion": "2021-06-01",
                              "name": "[format('{0}/{1}', parameters('batchAccountName'), parameters('batchPoolObjects')[copyIndex()].poolName)]",
                              "identity": {
                                "type": "UserAssigned",
                                "userAssignedIdentities": {
                                  "[format('{0}', parameters('batchManagedIdentityId'))]": {}
                                }
                              },
                              "properties": {
                                "displayName": "[parameters('batchPoolObjects')[copyIndex()].poolName]",
                                "vmSize": "[parameters('batchPoolObjects')[copyIndex()].vmSize]",
                                "taskSlotsPerNode": "[parameters('batchPoolObjects')[copyIndex()].taskSlotsPerNode]",
                                "taskSchedulingPolicy": "[parameters('batchPoolObjects')[copyIndex()].taskSchedulingPolicy]",
                                "deploymentConfiguration": "[parameters('batchPoolObjects')[copyIndex()].deploymentConfiguration]",
                                "scaleSettings": "[parameters('batchPoolObjects')[copyIndex()].scaleSettings]",
                                "interNodeCommunication": "[parameters('batchPoolObjects')[copyIndex()].interNodeCommunication]",
                                "networkConfiguration": "[parameters('batchPoolObjects')[copyIndex()].networkConfiguration]",
                                "startTask": "[if(contains(parameters('batchPoolObjects')[copyIndex()], 'startTask'), parameters('batchPoolObjects')[copyIndex()].startTask, '')]",
                                "mountConfiguration": "[if(contains(parameters('batchPoolObjects')[copyIndex()], 'mountConfiguration'), parameters('batchPoolObjects')[copyIndex()].mountConfiguration, '')]"
                              }
                            }
                          ]
                        }
                      }
                    }
                  ]
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', format('dpl-{0}-batchAccount', uniqueString(deployment().name, parameters('location'))))]"
              ]
            }
          ]
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgHub')), 'Microsoft.Resources/deployments', format('dpl-{0}-appInsights', uniqueString(deployment().name, deployment().location)))]",
        "[subscriptionResourceId('Microsoft.Resources/deployments', format('dpl-{0}-hubSpoke', uniqueString(deployment().name, deployment().location)))]"
      ]
    },
    {
      "condition": "[parameters('deployJumpBoxVMs')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('dpl-{0}-jumpbox', uniqueString(deployment().name, deployment().location))]",
      "resourceGroup": "[variables('rgJumpbox')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "vmExtensionWindowsJumpboxUri": {
            "value": "[parameters('vmExtensionWindowsJumpboxUri')]"
          },
          "vmObjectJumpboxWindows": {
            "value": "[variables('vmObjectJumpboxWindows')]"
          },
          "vmObjectJumpbox": {
            "value": "[variables('vmObjectJumpbox')]"
          },
          "vNetHubObject": {
            "value": "[variables('vNetHubObject')]"
          },
          "deployJumpboxWindowsAddOns": {
            "value": "[parameters('deployJumpboxWindowsAddOns')]"
          },
          "rgHub": {
            "value": "[variables('rgHub')]"
          },
          "tags": {
            "value": "[parameters('resourceTags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.10.61.36676",
              "templateHash": "13285058694094005314"
            }
          },
          "parameters": {
            "vNetHubObject": {
              "type": "object"
            },
            "vmObjectJumpbox": {
              "type": "object"
            },
            "vmObjectJumpboxWindows": {
              "type": "object"
            },
            "deployJumpboxWindowsAddOns": {
              "type": "bool"
            },
            "vmExtensionWindowsJumpboxUri": {
              "type": "string"
            },
            "rgHub": {
              "type": "string"
            },
            "tags": {
              "type": "object",
              "defaultValue": {}
            }
          },
          "resources": [
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "deployJumpBoxVM",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "subnetId": {
                    "value": "[format('{0}/subnets/{1}', extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('rgHub')), 'Microsoft.Network/virtualNetworks', parameters('vNetHubObject').vNetName), parameters('vNetHubObject').subnets[parameters('vNetHubObject').positionJumpBox].subnetName)]"
                  },
                  "vmObject": {
                    "value": "[parameters('vmObjectJumpbox')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.10.61.36676",
                      "templateHash": "13643951747345780148"
                    }
                  },
                  "parameters": {
                    "vmCount": {
                      "type": "int",
                      "defaultValue": 1
                    },
                    "vmObject": {
                      "type": "object"
                    },
                    "subnetId": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {}
                    }
                  },
                  "resources": [
                    {
                      "copy": {
                        "name": "nicNameVMResource",
                        "count": "[length(range(0, parameters('vmCount')))]"
                      },
                      "type": "Microsoft.Network/networkInterfaces",
                      "apiVersion": "2020-05-01",
                      "name": "[format('{0}{1}', parameters('vmObject').nicName, add(range(0, parameters('vmCount'))[copyIndex()], 1))]",
                      "location": "[resourceGroup().location]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "ipConfigurations": [
                          {
                            "name": "ipconfig",
                            "properties": {
                              "privateIPAllocationMethod": "Dynamic",
                              "subnet": {
                                "id": "[parameters('subnetId')]"
                              }
                            }
                          }
                        ]
                      }
                    },
                    {
                      "copy": {
                        "name": "vmResource",
                        "count": "[length(range(0, parameters('vmCount')))]"
                      },
                      "type": "Microsoft.Compute/virtualMachines",
                      "apiVersion": "2019-07-01",
                      "name": "[format('{0}{1}', parameters('vmObject').vmName, add(range(0, parameters('vmCount'))[copyIndex()], 1))]",
                      "location": "[resourceGroup().location]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "hardwareProfile": {
                          "vmSize": "[parameters('vmObject').vmSize]"
                        },
                        "osProfile": "[parameters('vmObject').osProfile]",
                        "storageProfile": {
                          "imageReference": "[parameters('vmObject').imageReference]",
                          "osDisk": {
                            "createOption": "FromImage"
                          }
                        },
                        "networkProfile": {
                          "networkInterfaces": [
                            {
                              "id": "[resourceId('Microsoft.Network/networkInterfaces', format('{0}{1}', parameters('vmObject').nicName, add(range(0, parameters('vmCount'))[copyIndex()], 1)))]"
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "nicNameVMResource"
                      ]
                    }
                  ],
                  "outputs": {
                    "nicDetail": {
                      "type": "array",
                      "copy": {
                        "count": "[length(range(0, parameters('vmCount')))]",
                        "input": {
                          "nicName": "[format('{0}{1}', parameters('vmObject').nicName, add(range(0, parameters('vmCount'))[copyIndex()], 1))]",
                          "privateIp": "[reference(format('{0}{1}', parameters('vmObject').nicName, add(range(0, parameters('vmCount'))[copyIndex()], 1)), '2020-05-01', 'Full').properties.ipConfigurations[0].properties.privateIPAddress]"
                        }
                      }
                    }
                  }
                }
              }
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "deployJumpBoxWindowsVM",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "subnetId": {
                    "value": "[format('{0}/subnets/{1}', extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('rgHub')), 'Microsoft.Network/virtualNetworks', parameters('vNetHubObject').vNetName), parameters('vNetHubObject').subnets[parameters('vNetHubObject').positionJumpBox].subnetName)]"
                  },
                  "vmObject": {
                    "value": "[parameters('vmObjectJumpboxWindows')]"
                  },
                  "vmCount": {
                    "value": 1
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.10.61.36676",
                      "templateHash": "13643951747345780148"
                    }
                  },
                  "parameters": {
                    "vmCount": {
                      "type": "int",
                      "defaultValue": 1
                    },
                    "vmObject": {
                      "type": "object"
                    },
                    "subnetId": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {}
                    }
                  },
                  "resources": [
                    {
                      "copy": {
                        "name": "nicNameVMResource",
                        "count": "[length(range(0, parameters('vmCount')))]"
                      },
                      "type": "Microsoft.Network/networkInterfaces",
                      "apiVersion": "2020-05-01",
                      "name": "[format('{0}{1}', parameters('vmObject').nicName, add(range(0, parameters('vmCount'))[copyIndex()], 1))]",
                      "location": "[resourceGroup().location]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "ipConfigurations": [
                          {
                            "name": "ipconfig",
                            "properties": {
                              "privateIPAllocationMethod": "Dynamic",
                              "subnet": {
                                "id": "[parameters('subnetId')]"
                              }
                            }
                          }
                        ]
                      }
                    },
                    {
                      "copy": {
                        "name": "vmResource",
                        "count": "[length(range(0, parameters('vmCount')))]"
                      },
                      "type": "Microsoft.Compute/virtualMachines",
                      "apiVersion": "2019-07-01",
                      "name": "[format('{0}{1}', parameters('vmObject').vmName, add(range(0, parameters('vmCount'))[copyIndex()], 1))]",
                      "location": "[resourceGroup().location]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "hardwareProfile": {
                          "vmSize": "[parameters('vmObject').vmSize]"
                        },
                        "osProfile": "[parameters('vmObject').osProfile]",
                        "storageProfile": {
                          "imageReference": "[parameters('vmObject').imageReference]",
                          "osDisk": {
                            "createOption": "FromImage"
                          }
                        },
                        "networkProfile": {
                          "networkInterfaces": [
                            {
                              "id": "[resourceId('Microsoft.Network/networkInterfaces', format('{0}{1}', parameters('vmObject').nicName, add(range(0, parameters('vmCount'))[copyIndex()], 1)))]"
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "nicNameVMResource"
                      ]
                    }
                  ],
                  "outputs": {
                    "nicDetail": {
                      "type": "array",
                      "copy": {
                        "count": "[length(range(0, parameters('vmCount')))]",
                        "input": {
                          "nicName": "[format('{0}{1}', parameters('vmObject').nicName, add(range(0, parameters('vmCount'))[copyIndex()], 1))]",
                          "privateIp": "[reference(format('{0}{1}', parameters('vmObject').nicName, add(range(0, parameters('vmCount'))[copyIndex()], 1)), '2020-05-01', 'Full').properties.ipConfigurations[0].properties.privateIPAddress]"
                        }
                      }
                    }
                  }
                }
              }
            },
            {
              "condition": "[parameters('deployJumpboxWindowsAddOns')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "depoyWindowsJumpboxVMExtension",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "virtualMachineExtensionCustomScriptUri": {
                    "value": "[parameters('vmExtensionWindowsJumpboxUri')]"
                  },
                  "vmExtensionName": {
                    "value": "addJumpboxSoftware"
                  },
                  "vmName": {
                    "value": "[format('{0}1', parameters('vmObjectJumpboxWindows').vmName)]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.10.61.36676",
                      "templateHash": "14743820000849094944"
                    }
                  },
                  "parameters": {
                    "vmName": {
                      "type": "string"
                    },
                    "vmExtensionName": {
                      "type": "string"
                    },
                    "virtualMachineExtensionCustomScriptUri": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {}
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]"
                    },
                    "currentTime": {
                      "type": "string",
                      "defaultValue": "[utcNow()]"
                    }
                  },
                  "variables": {
                    "virtualMachineExtensionCustomScript": {
                      "name": "[format('{0}/{1}', parameters('vmName'), parameters('vmExtensionName'))]",
                      "location": "[parameters('location')]",
                      "fileUris": [
                        "[parameters('virtualMachineExtensionCustomScriptUri')]"
                      ],
                      "commandToExecute": "[format('powershell -ExecutionPolicy Unrestricted -File ./{0}', last(split(parameters('virtualMachineExtensionCustomScriptUri'), '/')))]"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2020-06-01",
                      "name": "[variables('virtualMachineExtensionCustomScript').name]",
                      "location": "[variables('virtualMachineExtensionCustomScript').location]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "publisher": "Microsoft.Compute",
                        "type": "CustomScriptExtension",
                        "typeHandlerVersion": "1.10",
                        "autoUpgradeMinorVersion": true,
                        "settings": {
                          "fileUris": "[variables('virtualMachineExtensionCustomScript').fileUris]",
                          "commandToExecute": "[variables('virtualMachineExtensionCustomScript').commandToExecute]"
                        },
                        "protectedSettings": {},
                        "forceUpdateTag": "[parameters('currentTime')]"
                      }
                    }
                  ]
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', 'deployJumpBoxWindowsVM')]"
              ]
            }
          ]
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgAzureBatch')), 'Microsoft.Resources/deployments', format('dpl-{0}-azBatchSecured', uniqueString(deployment().name, deployment().location)))]",
        "[subscriptionResourceId('Microsoft.Resources/deployments', format('dpl-{0}-hubSpoke', uniqueString(deployment().name, deployment().location)))]",
        "rgModule"
      ]
    }
  ]
}